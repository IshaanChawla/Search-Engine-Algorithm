<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> <![endif]-->
<!--[if IE 9]><html class="ie ie9"> <![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>
<!-- Basic -->
<meta charset="utf-8">
<title>C++ Quick Guide</title>
<meta name="description" content="C++ Quick Guide - Learning C++ in simple and easy steps : A beginner's tutorial containing complete knowledge of C++ Syntax Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces and Signal Handling" />
<meta name="Keywords" content="C++, Tutorials, Learning, Beginners, Basics, Object Oriented Language, Methods, Overriding, Inheritance, Polymorphism, Interfaces, STL, Iterators, Algorithms, Exception Handling, Overloading,Templates, Namespaces, Signal Handling" />
<base href="http://www.tutorialspoint.com/" />
<link rel="shortcut icon" href="http://cdn.tutorialspoint.com/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<meta name="author" content="tutorialspoint.com">
<meta property="fb:app_id" content="471319149685276" />
<script type="text/javascript" src="http://cdn.tutorialspoint.com/theme/js/script-min-v1.js"></script>
<link rel="stylesheet" href="http://cdn.tutorialspoint.com/theme/css/style-min-v1.css">
<!-- Head Libs -->
<!--[if IE]>
<link rel="stylesheet" href="http://cdn.tutorialspoint.com/theme/css/ie.css">
<![endif]-->
<!--[if lte IE 8]>
<script src="http://cdn.tutorialspoint.com/theme/vendor/respond.js"></script>
<![endif]-->
<!--[if IE]>
<link rel="stylesheet" href="http://cdn.tutorialspoint.com/theme/css/ie.css">
<![endif]-->
<!--[if lte IE 8]>
<script src="http://cdn.tutorialspoint.com/theme/vendor/respond.js"></script>
<![endif]-->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="http://cdn.tutorialspoint.com/theme/css/ie8.css">
<![endif]-->
<!--[if IE 9]>
<link rel="stylesheet" type="text/css" href="http://cdn.tutorialspoint.com/theme/css/ie9.css">
<![endif]-->
<!-- Front Page related changes -->
<style>
div.feature-box div.feature-box-icon, .col-md-3 .course-box, li.heading, footer div.footer-ribon, div.footer-copyright { background: #004481 url(/images/pattern.png) repeat center center !important; }
header nav ul.nav-main li a:hover, header nav ul.nav-main li.dropdown:hover a.dropdown-toggle { background: #004481;} 
header nav ul.nav-main li.dropdown:hover > ul{ border:2px solid #004481}
header nav ul.nav-main ul.dropdown-menu > li > a:hover, #mainMenu > li:hover, header nav.mega-menu ul.nav-main .mega-menu-content ul.sub-menu li:hover{ background: #004481 !important;}
img.mobile-apps { border: 1px solid #004481 !important; }
footer i.icon, footer ul.list.icons li i { color: #004481 !important; }
button.btn-responsive-nav, header div.search button.btn-default { background: #004481 !important;}
.social-icons-top { display:none; }
</style>
</head>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img  src="http://cdn.tutorialspoint.com/images/loading-cg.gif" alt="" width="70" height="70" />
   </div>
</div>
<div id="divGoogle"></div>
<div class="body">
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="index.htm" title="tutorialspoint">
      <img alt="tutorialspoint" src="/cplusplus/images/logo.png">
      </a>
      </h1>			
      <div class="search" id="searchBar">
         <form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
            <input type="hidden" name="sitesearch" value="www.tutorialspoint.com">
            <div class="input-group">
               <input type="text" class="form-control search" name="q" id="q" autocomplete="off" placeholder="Search your tutorials..." onfocus="if (this.value == 'Search your tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your tutorials...';}">
               <input value="FORID:11" name="cof" type="hidden">
               <input type="hidden" name="ie" value="ISO-8859-1">
               <span class="input-group-btn"> <button class="btn btn-default" type="submit" onclick="javascript:void(0);"><i class="icon icon-search"></i></button> </span>
            </div>
         </form>
      </div>
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a  id="free-training-icon" href="absoluteclasses.htm"><img src="http://cdn.tutorialspoint.com/images/free-training.jpg" style="width:100px; position:absolute;left:-158px; top:-7px; z-index:99;" title="Free Online Training"></a></li>
            <li> <a href="shared-tutorials.php"><i class="icon icon-user"></i> &nbsp;Shared</a> </li>
            <li> <a href="shorttutorials"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>
            <li>
            <div class="social-icons social-icons-top">
               <ul class="social-icons">
               <li class="facebook"><a href="http://www.facebook.com/tutorialspointindia" target="_blank" title="Facebook">Facebook</a></li>
               <li class="twitter"><a href="http://www.twitter.com/tutorialspoint" target="_blank" title="Twitter">Twitter</a></li>
               <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
               <li class="linkedin"><a href="http://www.linkedin.com/company/tutorialspoint" target="_blank" title="tutorialspoint @ Linkedin">Linkedin</a></li>
               </ul>
            </div>
            </li>
         </ul>
      </nav>
         <!-- search code here  --> 
      <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull"> <i class="icon icon-bars"></i> </button>
   </div>
   <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown"><a class="dropdown-toggle tut-lib" href="tutorialslibrary.htm"> Tutorials Library </a>
      <ul class="dropdown-menu" id="submenu">
         <li>
            <div class="mega-menu-content">
              <div class="row">
                 <div class="col-md-6">
                    <ul class="sub-menu">
                     <li><a href="academic_tutorials.htm">Academic</a></li>
                     <li><a href="big_data_tutorials.htm">Big Data</a></li>
                     <li><a href="database_tutorials.htm">Databases</a></li>
                     <li><a href="java_technology_tutorials.htm">Java Technologies</a></li>
                     <li><a href="mainframe_tutorials.htm">Mainframe</a></li>
                     <li><a href="management_tutorials.htm">Management</a></li>
                     <li><a href="microsoft_technologies_tutorials.htm">Microsoft Technologies</a></li>
                     <li><a href="questions_and_answers.htm">Questions and Answers</a></li>
                     <li><a href="misc_tutorials.htm">Miscellaneous</a></li>
                   </ul>
                 </div>
                 <div class="col-md-6">
                  <ul class="sub-menu">
                     <li><a href="mobile_development_tutorials.htm">Mobile Development</a></li>
                     <li><a href="computer_programming_tutorials.htm">Programming</a></li>
                     <li><a href="scripting_lnaguage_tutorials.htm">Scripts</a></li>
                     <li><a href="software_quality_tutorials.htm">Software Quality</a></li>
                     <li><a href="telecom_tutorials.htm">Telecom</a></li>
                     <li><a href="web_development_tutorials.htm">Web Development</a></li>
                     <li><a href="xml_technologies_tutorials.htm">XML Technologies</a></li>
                     <li><a href="multi_language_tutorials.htm">Multi Language Tutorials</a></li>
                  </ul>
                 </div>
              </div>
            </div>
         </li>
       </ul>
               </li>
               <li class="dropdown"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground</a> </li>
                  <li class="dropdown"> 							
                     <a class="dropdown-toggle tut-plus" href="absoluteclasses.htm">Absolute Classes</a>                     <ul class="dropdown-menu" id="submenu1">
                                                <li class="current-menu-ancestor current-menu-parent active dropdown-submenu" style="border-bottom:none;">
                        <li style="border-bottom:none;"><a href="absoluteclasses/userlogin.htm"><i class="fa-sign-in"></i>&nbsp;Login</a></li>
                        <li style="border-bottom:1px dashed #ccc; height:1px; padding:0px; margin:0px 10px 0px 10px" class="stickyhide">&nbsp;</li>
                        <li><a href="absoluteclasses/usersignup.htm"><i class="fa-pencil-square-o"></i>&nbsp;Sign Up&nbsp;</a></li>
                        <li style="border-bottom:none;"><a href="absoluteclasses/upcomingclasses.htm" style="border-bottom:none;"><i class="fa-book book-head"></i> Upcoming Classes </a></li>
                        <li style="border-bottom:1px dashed #ccc; height:1px; padding:0px; margin:0px 10px 0px 10px">&nbsp;</li>
                        <li style="border-bottom:1px dashed #ccc; height:1px; padding:0px; margin:0px 10px 0px 10px">&nbsp;</li>
                        <li style="border-bottom:1px dashed #ccc;;"><a href="absoluteclasses/allcourses.htm" style="border-bottom:none;"><i class="fa-book book-head"></i> All Courses </a></li>
                        <li style="border-bottom:1px dashed #ccc;;"><a href="absoluteclasses/testimonials.htm" style="border-bottom:none;"><i class="fa-check check"></i> Testimonial</a></li>
                        <li style="border-bottom:1px dashed #ccc;;"><a href="absoluteclasses/help.htm" style="border-bottom:none;"><i class="fa-question book-head"></i> Help/FAQ</a></li>
                        <li style="border-bottom:none;"><a href="absoluteclasses/contact_abc.htm" style="border-bottom:none;"><i class="fa fa-envelope-o"></i> Contact</a></li>
                                             
                     </ul>
                  </li>
            </ul>
         </nav>
      </div>
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<div class="mini-logo">
<img src="/cplusplus/images/cpp-mini-logo.jpg" alt="C++ Tutorial" />
</div>
<ul class="nav nav-list primary left-menu">
<li class="heading">C++ Basics</li>
<li><a target="_top" href="/cplusplus/index.htm">C++ Home</a></li>
<li><a target="_top" href="/cplusplus/cpp_overview.htm">C++ Overview</a></li>
<li><a target="_top" href="/cplusplus/cpp_environment_setup.htm">C++ Environment Setup</a></li>
<li><a target="_top" href="/cplusplus/cpp_basic_syntax.htm">C++ Basic Syntax</a></li>
<li><a target="_top" href="/cplusplus/cpp_comments.htm">C++ Comments</a></li>
<li><a target="_top" href="/cplusplus/cpp_data_types.htm">C++ Data Types</a></li>
<li><a target="_top" href="/cplusplus/cpp_variable_types.htm">C++  Variable Types</a></li>
<li><a target="_top" href="/cplusplus/cpp_variable_scope.htm">C++  Variable Scope</a></li>
<li><a target="_top" href="/cplusplus/cpp_constants_literals.htm">C++ Constants/Literals</a></li>
<li><a target="_top" href="/cplusplus/cpp_modifier_types.htm">C++ Modifier Types</a></li>
<li><a target="_top" href="/cplusplus/cpp_storage_classes.htm">C++ Storage Classes</a></li>
<li><a target="_top" href="/cplusplus/cpp_operators.htm">C++ Operators</a></li>
<li><a target="_top" href="/cplusplus/cpp_loop_types.htm">C++ Loop Types</a></li>
<li><a target="_top" href="/cplusplus/cpp_decision_making.htm">C++ Decision Making </a></li>
<li><a target="_top" href="/cplusplus/cpp_functions.htm">C++ Functions</a></li>
<li><a target="_top" href="/cplusplus/cpp_numbers.htm">C++ Numbers</a></li>
<li><a target="_top" href="/cplusplus/cpp_arrays.htm">C++ Arrays</a></li>
<li><a target="_top" href="/cplusplus/cpp_strings.htm">C++ Strings</a></li>
<li><a target="_top" href="/cplusplus/cpp_pointers.htm">C++ Pointers</a></li>
<li><a target="_top" href="/cplusplus/cpp_references.htm">C++ References</a></li>
<li><a target="_top" href="/cplusplus/cpp_date_time.htm">C++ Date &amp; Time</a></li>
<li><a target="_top" href="/cplusplus/cpp_basic_input_output.htm">C++ Basic Input/Output</a></li>
<li><a target="_top" href="/cplusplus/cpp_data_structures.htm">C++ Data Structures</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">C++ Object Oriented</li>
<li><a href="/cplusplus/cpp_classes_objects.htm">C++ Classes &amp; Objects</a></li>
<li><a href="/cplusplus/cpp_inheritance.htm">C++ Inheritance</a></li>
<li><a href="/cplusplus/cpp_overloading.htm">C++ Overloading</a></li>
<li><a href="/cplusplus/cpp_polymorphism.htm">C++ Polymorphism</a></li>
<li><a href="/cplusplus/cpp_data_abstraction.htm">C++ Abstraction</a></li>
<li><a href="/cplusplus/cpp_data_encapsulation.htm">C++ Encapsulation</a></li>
<li><a href="/cplusplus/cpp_interfaces.htm">C++ Interfaces</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">C++ Advanced</li>
<li><a href="/cplusplus/cpp_files_streams.htm">C++ Files and Streams</a></li>
<li><a href="/cplusplus/cpp_exceptions_handling.htm">C++ Exception Handling</a></li>
<li><a href="/cplusplus/cpp_dynamic_memory.htm">C++ Dynamic Memory</a></li>
<li><a href="/cplusplus/cpp_namespaces.htm">C++ Namespaces</a></li>
<li><a href="/cplusplus/cpp_templates.htm">C++ Templates</a></li>
<li><a href="/cplusplus/cpp_preprocessor.htm">C++ Preprocessor</a></li>
<li><a href="/cplusplus/cpp_signal_handling.htm">C++ Signal Handling</a></li>
<li><a href="/cplusplus/cpp_multithreading.htm">C++ Multithreading</a></li>
<li><a href="/cplusplus/cpp_web_programming.htm">C++ Web Programming</a></li>
</ul>
<ul class="nav nav-list primary left-menu">
<li class="heading">C++ Useful Resources</li>
<li><a href="/cplusplus/cpp_questions_answers.htm">C++ Questions and Answers</a></li>
<li><a href="/cplusplus/cpp_quick_guide.htm">C++ Quick Guide</a></li>
<li><a href="/cplusplus/cpp_object_oriented.htm">C++ Object Oriented</a></li>
<li><a href="/cplusplus/cpp_stl_tutorial.htm">C++ STL Tutorial</a></li>
<li><a href="/cplusplus/cpp_standard_library.htm">C++ Standard Library</a></li>
<li><a href="/cplusplus/cpp_useful_resources.htm">C++ Useful Resources</a></li>
<li><a href="/cplusplus/cpp_discussion.htm">C++ Discussion</a></li>
</ul>
<ul class="nav nav-list primary push-bottom left-menu special">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>C++ Quick Guide</h1>
<div class="topgooglead">
<hr />
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js"> 
</script>
</div>
<hr>
<div class="pre-btn">
<a href="/cplusplus/cpp_web_programming.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="/cplusplus/cpp_object_oriented.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<div class="clearer"></div>
<hr />
<p>C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming.</p>
<p>C++ is regarded as a <b>middle-level</b> language, as it comprises a combination of both high-level and low-level language features.</p>
<p>C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey, as an enhancement to the C language and originally named C with Classes but later it was renamed C++ in 1983.</p>
<p>C++ is a superset of C, and that virtually any legal C program is a legal C++ program.</p>
<h2>C++ Compiler:</h2> 
<p>This is actual C++ compiler, which will be used to compile your source code into final executable program.</p>
<p>Most C++ compilers don't care what extension you give your source code, but if you don't specify otherwise, many will use .cpp by default</p>
<p>Most frequently used and free available compiler is GNU C/C++ compiler, otherwise you can have compilers either from HP or Solaris if you have respective Operating Systems.</p>
<h2>C++ Program Structure:</h2>
<p>Let us look at a simple code that would print the words <i>Hello World</i>.</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt;
using namespace std;
 
// main() is where program execution begins.
 
int main()
{
   cout &lt;&lt; "Hello World"; // prints Hello World
   return 0;
}
</pre>
<h2>Comments in C++</h2>
<p>C++ supports single line and multi-line comments. All characters available inside any comment are ignored by C++ compiler.</p>
<p>C++ comments start with /* and end with */. For example:</p>
<pre class="prettyprint notranslate">
/* This is a comment */
 
/* C++ comments can  also
 * span multiple lines
 */
</pre>
<p>A comment can also start with //, extending to the end of the line. For example:</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt;
using namespace std;
 
main()
{
   cout &lt;&lt; "Hello World"; // prints Hello World
 
   return 0;
}
</pre>
<h2>C++ Primitive Built-in Types:</h2>
<p>C++ offer the programmer a rich assortment of built-in as well as user-defined data types. Following table list down seven basic C++ data types:</p>
<table class="table table-bordered">
<tr>
<th width="50%">Type</th>
<th>Keyword</th>
</tr>
<tr>
<td>Boolean</td>
<td>bool</td>
</tr>
<tr>
<td>Character</td>
<td>char</td>
</tr>
<tr>
<td>Integer</td>
<td>int</td>
</tr>
<tr>
<td>Floating point</td>
<td>float</td>
</tr>
<tr>
<td>Double floating point</td>
<td>double</td>
</tr>
<tr>
<td>Valueless</td>
<td> void</td>
</tr>
<tr>
<td>Wide character</td>
<td>wchar_t</td>
</tr>
</table>
<h2>Variable Definition &amp; Initialization in C++:</h2>
<p>Some examples are:</p>
<pre class="prettyprint notranslate">
extern int d, f      // declaration of d and f
int d = 3, f = 5;    // definition and initializing d and f.
byte z = 22;         // definition and initializes z.
char x = 'x';        // the variable x has the value 'x'.
</pre>
<h2>C++ Variable Scope:</h2>
<p>A scope is a region of the program and broadly speaking there are three places where variables can be declared:</p>
<ul class="list">
<li><p>Inside a function or a block which is called local variables,</p></li>
<li><p>In the definition of function parameters which is called formal parameters.</p></li>
<li><p>Outside of all functions which is called global variables.</p></li>
</ul>
<h2>C++ Constants/Literals:</h2>
<p>Constants refer to fixed values that the program may not alter and they are called <b>literals</b>.</p>
<p>Constants can be of any of the basic data types and can be divided in Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values.</p>
<p>Again, constants are treated just like regular variables except that their values cannot be modified after their definition.</p>
<h2>C++ Modifier Types:</h2>
<p>C++ allows the <b>char, int, </b> and <b>double</b> data types to have modifiers preceding them. A modifier is used to alter the meaning of the base type so that it more precisely fits the needs of various situations.</p>
<p>The data type modifiers are listed here:</p>
<ul class="list">
<li><p>signed</p></li>
<li><p>unsigned</p></li>
<li><p>long</p></li>
<li><p>short</p></li>
</ul>
<p>The modifiers <b>signed, unsigned, long,</b> and <b>short</b> can be applied to integer base types. In addition, <b>signed</b> and <b>unsigned</b> can be applied to char, and <b>long</b> can be applied to double.</p>
<p>The modifiers <b>signed</b> and <b>unsigned</b> can also be used as prefix to <b>long</b> or <b>short</b> modifiers. For example <b>unsigned long int</b>.</p>
<p>C++ allows a shorthand notation for declaring <b>unsigned, short,</b> or <b>long</b> integers. You can simply use the word <b>unsigned, short,</b> or <b>long</b>, without the int. The int is implied. For example, the following two statements both declare unsigned integer variables.</p>
<pre class="prettyprint notranslate">
unsigned x;
unsigned int y;
</pre>
<h2>Storage Classes in C++:</h2>
<p>A storage class defines the scope (visibility) and life time of variables and/or functions within a C++ Program. These specifiers precede the type that they modify. There are following storage classes which can be used in a C++ Program</p>
<ul class="list">
<li><p>auto</p></li>
<li><p>register</p></li>
<li><p>static</p></li>
<li><p>extern</p></li>
<li><p>mutable</p></li>
</ul>
<h2>C++ Operators:</h2>
<p>An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. C++ is rich in built-in operators and provides following type of operators:</p>
<ul class="list">
<li><p>Arithmetic Operators ( +, -, \, *, ++, --)</p></li>
<li><p>Relational Operators (==, !=, &gt;. &lt;, &gt;=, &lt;=)</p></li>
<li><p>Logical Operators (&amp;&amp;, ||, ! )</p></li>
<li><p>Bitwise Operators (&amp; |, ^, ~, &lt;&lt;, &gt;&gt;)</p></li>
<li><p>Assignment Operators (=, +=, -=, *=, /=, %=, &lt;&lt;=, &gt;&gt;=, &amp;=, ^=, |=)</p></li>
<li><p>Misc Operators ( sizeof, &amp; cast, comma, conditional etc.)</p></li>
</ul>
<h2>C++ Loop Types:</h2>
<p>C++ programming language provides the following types of loops to handle looping requirements. Click the following links to check their detail.</p>
<table class="table table-bordered">
<tr><th width="30%">Loop Type</th><th>Description</th></tr>
<tr><td><a href="/cplusplus/cpp_while_loop.htm" title="C++ while loop">while loop</a></td><td>Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.</td></tr>
<tr><td><a href="/cplusplus/cpp_for_loop.htm" title="C++ for loop">for loop</a></td><td>Execute a sequence of statements multiple times and abbreviates the code that manages the loop variable.</td></tr>
<tr><td><a href="/cplusplus/cpp_do_while_loop.htm" title="C++ do...while loop">do...while loop</a></td><td>Like a while statement, except that it tests the condition at the end of the loop body</td></tr>
<tr><td><a href="/cplusplus/cpp_nested_loops.htm" title="C++ nested loops">nested loops</a></td><td>You can use one or more loop inside any another while, for or do..while loop.</td></tr>
</table>
<h2>C++ Decision Making:</h2>
<p>C++ programming language provides following types of decision making statements. Click the following links to check their detail.</p>
<table class="table table-bordered">
<tr><th width="35%">Statement</th><th>Description</th></tr>
<tr><td><a href="/cplusplus/cpp_if_statement.htm" title="C++ if statement">if statement</a></td><td>An if statement consists of a boolean expression followed by one or more statements.</td></tr>
<tr><td><a href="/cplusplus/cpp_if_else_statement.htm" title="C++ if...else statement">if...else statement</a></td><td>An if statement can be followed by an optional else statement, which executes when the boolean expression is false.</td></tr>
<tr><td><a href="/cplusplus/cpp_switch_statement.htm" title="C++ switch statement">switch statement</a></td><td>A switch statement allows a variable to be tested for equality against a list of values.</td></tr>
<tr><td><a href="/cplusplus/cpp_nested_if.htm" title="C++ nested if statements">nested if statements</a></td><td>You can use one if or else if statement inside another if or else if statement(s).</td></tr>
<tr><td><a href="/cplusplus/cpp_nested_swicth.htm" title="C++ nested switch statements">nested switch statements</a></td><td>You can use one swicth statement inside another switch statement(s).</td></tr>
</table>
<h2>C++ Functions:</h2>
<p>The general form of a C++ function definition is as follows:</p>
<pre class="prettyprint notranslate">
return_type function_name( parameter list )
{
   body of the function
}
</pre>
<p>A C++ function definition consists of a function header and a function body. Here are all the parts of a function:</p>
<ul class="list">
<li><p><b>Return Type</b>: A function may return a value. The <b>return_type</b> is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword <b>void</b>.</p></li>
<li><p><b>Function Name:</b> This is the actual name of the function. The function name and the parameter list together constitute the function signature.</p></li>
<li><p><b>Parameters:</b> A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters.</p></li>
<li><p><b>Function Body:</b> The function body contains a collection of statements that define what the function does.</p></li>
</ul>
<h2>Numbers in C++:</h2>
<p>Following a simple example to show few of the mathematical operations on C++ numbers:</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt;
#include &lt;cmath&gt;
using namespace std;
 
int main ()
{
   // number definition:
   short  s = 10;
   int    i = -1000;
   long   l = 100000;
   float  f = 230.47;
   double d = 200.374;
 
   // mathematical operations;
   cout &lt;&lt; "sin(d) :" &lt;&lt; sin(d) &lt;&lt; endl;
   cout &lt;&lt; "abs(i)  :" &lt;&lt; abs(i) &lt;&lt; endl;
   cout &lt;&lt; "floor(d) :" &lt;&lt; floor(d) &lt;&lt; endl;
   cout &lt;&lt; "sqrt(f) :" &lt;&lt; sqrt(f) &lt;&lt; endl;
   cout &lt;&lt; "pow( d, 2) :" &lt;&lt; pow(d, 2) &lt;&lt; endl;
 
   return 0;
}
</pre>
<h2>C++ Arrays:</h2>
<p>Following is an example, which will show array declaration, assignment and accessing arrays in C++:</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt;
using namespace std;
 
#include &lt;iomanip&gt;
using std::setw;
 
int main ()
{
   int n[ 10 ]; // n is an array of 10 integers
 
   // initialize elements of array n to 0          
   for ( int i = 0; i &lt; 10; i++ )
   {
      n[ i ] = i + 100; // set element at location i to i + 100
   }
   cout &lt;&lt; "Element" &lt;&lt; setw( 13 ) &lt;&lt; "Value" &lt;&lt; endl;
 
   // output each array element's value                      
   for ( int j = 0; j &lt; 10; j++ )
   {
      cout &lt;&lt; setw( 7 )&lt;&lt; j &lt;&lt; setw( 13 ) &lt;&lt; n[ j ] &lt;&lt; endl;
   }
 
   return 0;
}
</pre>
<h2>C++ Strings:</h2>
<p>C++ provides following two types of string representations:</p>
<p>The C-style character string as follows:</p>
<pre class="prettyprint notranslate">
char greeting[6] = {'H', 'e', 'l', 'l', 'o', '\0'};
</pre>
<p>The standard C++ library provides a string class type that supports all the operations mentioned above, additionally much more functionality. Following is the example:</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt;
#include &lt;string&gt;
 
using namespace std;
 
int main ()
{
   string str1 = "Hello";
   string str2 = "World";
   string str3;
 
   // copy str1 into str3
   str3 = str1;
   cout &lt;&lt; "str3 : " &lt;&lt; str3 &lt;&lt; endl;
 
   // concatenates str1 and str2
   str3 = str1 + str2;
   cout &lt;&lt; "str1 + str2 : " &lt;&lt; str3 &lt;&lt; endl;
  
   return 0;
}
</pre>
<h2>C++ Classes &amp; Objects</h2>
<p>A class definition starts with the keyword <b>class</b> followed by the class name; and the class body, enclosed by a pair of curly braces. A class definition must be followed either by a semicolon or a list of declarations. For example we defined the Box data type using the keyword <b>class</b> as follows:</p>
<pre class="prettyprint notranslate">
class Box
{
   public:
      double length;   // Length of a box
      double breadth;  // Breadth of a box
      double height;   // Height of a box
};
</pre>
<p>The keyword <b>public</b> determines the access attributes of the members of the class that follow it. A public member can be accessed from outside the class anywhere within the scope of the class object. You can also specify the members of a class as <b>private</b> or <b>protected</b> which we will discuss in a sub-section.</p>
<h2>Define C++ Objects:</h2>
<p>A class provides the blueprints for objects, so basically an object is created from a class. We declare objects of a class with exactly the same sort of declaration that we declare variables of basic types. Following statements declare two objects of class Box:</p>
<pre class="prettyprint notranslate">
Box Box1;          // Declare Box1 of type Box
Box Box2;          // Declare Box2 of type Box
</pre>
<p>Both of the objects Box1 and Box2 will have their own copy of data members.</p>
<h2>Accessing the Data Members:</h2>
<p>The public data members of objects of a class can be accessed using the direct member access operator (.). Let us try following example to make the things clear:</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt;
 
using namespace std;
 
class Box
{
   public:
      double length;   // Length of a box
      double breadth;  // Breadth of a box
      double height;   // Height of a box
};
 
int main( )
{
   Box Box1;        // Declare Box1 of type Box
   Box Box2;        // Declare Box2 of type Box
   double volume = 0.0;     // Store the volume of a box here
 
   // box 1 specification
   Box1.height = 5.0; 
   Box1.length = 6.0; 
   Box1.breadth = 7.0;
 
   // box 2 specification
   Box2.height = 10.0;
   Box2.length = 12.0;
   Box2.breadth = 13.0;
   // volume of box 1
   volume = Box1.height * Box1.length * Box1.breadth;
   cout &lt;&lt; "Volume of Box1 : " &lt;&lt; volume &lt;&lt;endl;
 
   // volume of box 2
   volume = Box2.height * Box2.length * Box2.breadth;
   cout &lt;&lt; "Volume of Box2 : " &lt;&lt; volume &lt;&lt;endl;
   return 0;
}
</pre>
<h2>C++ Inheritance:</h2>
<p>One of the most important concepts in object-oriented programming is that of inheritance. Inheritance allows us to define a class in terms of another class which makes it easier to create and maintain an application. This also provides an opportunity to reuse the code functionality and fast implementation time.</p>
<p>When creating a class, instead of writing completely new data members and member functions, the programmer can designate that the new class should inherit the members of an existing class. This existing class is called the <b>base</b> class, and the new class is referred to as the <b>derived</b> class.</p>
<p>A class can be derived from more than one classes, which means it can inherit data and functions from multiple base classes. To define a derived class, we use a class derivation list to specify the base class(es). A class derivation list names one or more base classes and has the form:</p>
<pre class="prettyprint notranslate">
class derived-class: access-specifier base-class
</pre>
<p>Where access-specifier is one of <b>public, protected,</b> or <b>private</b>, and base-class is the name of a previously defined class. If the access-specifier is not used, then it is private by default.</p>
<p>Consider a base class <b>Shape</b> and its derived class <b>Rectangle</b> as follows:</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt;
 
using namespace std;
 
// Base class
class Shape 
{
   public:
      void setWidth(int w)
      {
         width = w;
      }
      void setHeight(int h)
      {
         height = h;
      }
   protected:
      int width;
      int height;
};
 
// Derived class
class Rectangle: public Shape
{
   public:
      int getArea()
      { 
         return (width * height); 
      }
};
 
int main(void)
{
   Rectangle Rect;
 
   Rect.setWidth(5);
   Rect.setHeight(7);
 
   // Print the area of the object.
   cout &lt;&lt; "Total area: " &lt;&lt; Rect.getArea() &lt;&lt; endl;
 
   return 0;
}
</pre>
<h2>C++ Overloading</h2>
<p>C++ allows you to specify more than one definition for a <b>function</b> name or an <b>operator</b> in the same scope, which is called <b>function overloading</b> and <b>operator overloading</b> respectively.</p>
<p>Following is the example where same function <b>print()</b> is being used to print different data types:</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt;
using namespace std;
 
class printData 
{
   public:
      void print(int i) {
        cout &lt;&lt; "Printing int: " &lt;&lt; i &lt;&lt; endl;
      }
 
      void print(double  f) {
        cout &lt;&lt; "Printing float: " &lt;&lt; f &lt;&lt; endl;
      }
 
      void print(char* c) {
        cout &lt;&lt; "Printing character: " &lt;&lt; c &lt;&lt; endl;
      }
};
 
int main(void)
{
   printData pd;
 
   // Call print to print integer
   pd.print(5);
   // Call print to print float
   pd.print(500.263);
   // Call print to print character
   pd.print("Hello C++");
 
   return 0;
}
</pre>
<h2>Polymorphism in C++</h2>
<p>C++ polymorphism means that a call to a member function will cause a different function to be executed depending on the type of object that invokes the function.</p>
<p>Consider the following example where a base class has been derived by other two classes and area() method has been implemented by the two sub-classes with different implementation.</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt; 
using namespace std;
 
class Shape {
   protected:
      int width, height;
   public:
      Shape( int a=0, int b=0)
      {
         width = a;
         height = b;
      }
      int area()
      {
         cout &lt;&lt; "Parent class area :" &lt;&lt;endl;
         return 0;
      }
};
class Rectangle: public Shape{
   public:
      Rectangle( int a=0, int b=0)
      {
        Shape(a, b); 
      }
      int area ()
      { 
         cout &lt;&lt; "Rectangle class area :" &lt;&lt;endl;
         return (width * height); 
      }
};
class Triangle: public Shape{
   public:
      Triangle( int a=0, int b=0)
      {
        Shape(a, b); 
      }
      int area ()
      { 
         cout &lt;&lt; "Triangle class area :" &lt;&lt;endl;
         return (width * height / 2); 
      }
};
// Main function for the program
int main( )
{
   Shape *shape;
   Rectangle rec(10,7);
   Triangle  tri(10,5);
 
   // store the address of Rectangle
   shape = &amp;rec;
   // call rectangle area.
   shape-&gt;area();
 
   // store the address of Triangle
   shape = &amp;tri;
   // call triangle area.
   shape-&gt;area();
   
   return 0;
}
</pre>
<p>The reason for the incorrect output is that the call of the function area() is being set once by the compiler as the version defined in the base class. This is called <b>static resolution</b> of the function call, or <b>static linkage</b> - the function call is fixed before the program is executed. This is also sometimes called <b>early binding</b> because the area() function is set during the compilation of the program.</p>
<p>But now, let's make a slight modification in our program and precede the declaration of area() in the Shape class with the keyword <b>virtual</b> so that it  looks like this:</p>
<pre class="prettyprint notranslate">
class Shape {
   protected:
      int width, height;
   public:
      Shape( int a=0, int b=0)
      {
         width = a;
         height = b;
      }
      virtual int area()
      {
         cout &lt;&lt; "Parent class area :" &lt;&lt;endl;
         return 0;
      }
};
</pre>
<p>After this slight modification, when the previous example code is compiled and executed, it produces the following result:</p>
<pre class="prettyprint notranslate">
Rectangle class area
Triangle class area
</pre>
<h2>Data Abstraction in C++:</h2>
<p>Data abstraction refers to, providing only essential information to the outside word and hiding their background details ie. to represent the needed information in program without presenting the details.</p>
<p>Data abstraction is a programming (and design) technique that relies on the separation of interface and implementation.</p>
<p>For example, in C++ we use <b>classes</b> to define our own abstract data types (ADT). You can use the <b>cout</b> object of class <b>ostream</b> to stream data to standard output like this:</p>
<pre class="prettyprint notranslate tryit">
#include &lt;iostream&gt;
using namespace std;
 
int main( )
{
   cout &lt;&lt; "Hello C++" &lt;&lt;endl;
   return 0;
}
</pre>
<p>Here, you don't need to understand how <b>cout</b> displays the text on the user's screen. You need only know the public interface and the underlying implementation of cout is free to change.</p>
<h2>Data Encapsulation in C++:</h2>
<p>All C++ programs are composed of following two fundamental elements: </p>
<ul class="list">
<li><p><b>Program statements (code):</b> This is the part of a program that performs actions and they are called functions.</p></li>
<li><p><b>Program data:</b> The data is the information of the program which affected by the program functions.</p></li>
</ul>
<p>Encapsulation is an Object Oriented Programming concept that binds together the data and functions that manipulate the data, and that keeps both safe from outside interference and misuse. Data encapsulation led to the important OOP concept of <b>data hiding</b>.</p>
<p>C++ supports the properties of encapsulation and data hiding through the creation of user-defined types, called <b>classes</b>. We already have studied that a class can contain <b>private, protected </b> and <b>public</b> members. By default, all items defined in a class are private. For example:</p>
<pre class="prettyprint notranslate">
class Box
{
   public:
      double getVolume(void)
      {
         return length * breadth * height;
      }
   private:
      double length;      // Length of a box
      double breadth;     // Breadth of a box
      double height;      // Height of a box
};
</pre>
<h2>C++ Files and Streams:</h2>
<p>The <b>iostream</b> standard library <b>cin</b> and <b>cout</b> methods for reading from standard input and writing to standard output respectively.</p>
<p>To read and write from a file requires another standard C++ library called <b>fstream</b> which defines three new data types:</p>
<table class="table table-bordered">
<tr>
<th  width="30%">Data Type</th>
<th>Description</th>
</tr>
<tr> 
<td>ofstream</td>
<td>This data type represents the output file stream and is used to create files and to write information to files.</td>
</tr>
<tr> 
<td>ifstream</td>
<td>This data type represents the input file stream and  is used to read information from files.</td> 
</tr>
<tr> 
<td>fstream</td>
<td>This data type represents the file stream generally, and has the capabilities of both ofstream and ifstream which means it can create files, write information to files, and read information from files.</td> 
</tr>
</table>
<p>Following is the C++ program, which opens a file in reading and writing mode. After writing information inputted by the user to a file named afile.dat, the program reads information from the file and outputs it onto the screen:</p>
<pre class="prettyprint notranslate">
#include &lt;fstream&gt;
#include &lt;iostream&gt;
using namespace std;
 
int main ()
{
    
   char data[100];
 
   // open a file in write mode.
   ofstream outfile;
   outfile.open("afile.dat");
 
   cout &lt;&lt; "Writing to the file" &lt;&lt; endl;
   cout &lt;&lt; "Enter your name: "; 
   cin.getline(data, 100);
 
   // write inputted data into the file.
   outfile &lt;&lt; data &lt;&lt; endl;
 
   cout &lt;&lt; "Enter your age: "; 
   cin &gt;&gt; data;
   cin.ignore();
   
   // again write inputted data into the file.
   outfile &lt;&lt; data &lt;&lt; endl;
 
   // close the opened file.
   outfile.close();
 
   // open a file in read mode.
   ifstream infile; 
   infile.open("afile.dat"); 
 
   cout &lt;&lt; "Reading from the file" &lt;&lt; endl; 
   infile &gt;&gt; data; 
 
   // write the data at the screen.
   cout &lt;&lt; data &lt;&lt; endl;
   
   // again read the data from the file and display it.
   infile &gt;&gt; data; 
   cout &lt;&lt; data &lt;&lt; endl; 
 
   // close the opened file.
   infile.close();
 
   return 0;
}
</pre>
<hr />
<div class="pre-btn">
<a href="/cplusplus/cpp_web_programming.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>
</div>
<div class="print-btn center">
<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>
</div>
<div class="nxt-btn">
<a href="/cplusplus/cpp_object_oriented.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>
</div>
<hr>
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script type="text/javascript"><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<!-- AddThis Button BEGIN -->
<!--
<div class="simple-ad">
<div class="addthis_sharing_toolbox"></div>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
-->
<!-- AddThis Button END -->
<!--
<div class="google-ad" style="position:relative; left:20px;">Advertisements</div>
-->
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div>
</div>
</div>
</div>
</div>
</div>
<footer class="inner">
<div class="container">
<div class="row">
<div class="footer-ribon">
<span>Extras</span>
</div>
<div class="col-md-2">
<h4>Mobile First</h4>
<ul class="list icons list-unstyled">
<li><a id="iphone" href="https://itunes.apple.com/om/app/tutorials-point/id914891263?mt=8" target="_blank" rel="nofollow"><img alt="tutorialspoint iPhone App" src="http://cdn.tutorialspoint.com/images/apple_store.jpg" class="mobile-apps"/></a></li>
<li><a id="android" href="https://play.google.com/store/apps/details?id=com.tutorialspoint.onlineviewer" target="_blank" rel="nofollow"><img alt="tutorialspoint Android app" src="http://cdn.tutorialspoint.com/images/google_play.jpg" class="mobile-apps"/></a></li>
<li><a id="microsoft" href="http://www.windowsphone.com/s?appid=91249671-7184-4ad6-8a5f-d11847946b09" target="_blank" rel="nofollow"><img alt="tutorialspoint Windows app" src="http://cdn.tutorialspoint.com/images/windows_store.jpg" class="mobile-apps"/></a></li>
</ul>
</div>
<div class="col-md-2">
<h4>About us</h4>
<ul class="list icons list-unstyled">
<li><i class="icon icon-caret-right"></i> <a href="/about/index.htm">Company</a></li>
<li><i class="icon icon-caret-right"></i> <a href="/about/about_team.htm">Team</a></li>
<li><i class="icon icon-caret-right"></i> <a href="/about/about_careers.htm">Careers</a></li>
<li><i class="icon icon-caret-right"></i> <a href="/about/about_privacy.htm">Privacy Policy</a></li>
<li><i class="icon icon-caret-right"></i> <a href="/about/about_terms_of_use.htm">Terms of use</a></li>
</ul>
</div>
<div class="col-md-2">
<h4>Extra Links</h4>
<ul class="list icons list-unstyled">
<li><i class="icon icon-caret-right"></i> <a href="forums/index.php">Forums</a></li>
<li><i class="icon icon-caret-right"></i> <a href="shorttutorials/">Articles</a></li>
<li><i class="icon icon-caret-right"></i> <a href="shared-tutorials.php">Shared</a></li>
<li><i class="icon icon-caret-right"></i> <a href="seo_tools.htm">Seo Tools</a></li>
<li><i class="icon icon-caret-right"></i> <a href="about/contact_us.htm">Contact</a></li>
</ul>
</div>
<div class="col-md-3">
<div class="contact-details">
<h4>Contact Us</h4>
<ul class="contact">
<li><p><i class="icon icon-map-marker"></i> <strong>Address:</strong> 388-A , Road no 22, Jubilee Hills, Hyderabad Telangana, INDIA-500033</p></li>
<li><p><i class="icon icon-envelope"></i> <strong>Email:</strong> <a href="about/contact_us.htm">Click Here</a></p></li>
<li><p><i class="icon icon-dribbble"></i> <strong>Website:</strong> <a href="http://www.tutorialspoint.com">www.tutorialspoint.com</a></p></li>
</ul>
</div>
<div class="social-icons">
<ul class="social-icons">
<li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
<li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
<li class="twitter"><a href="http://www.twitter.com/tutorialspoint" target="_blank" data-placement="bottom"  title="tutorialspoint @ Twitter">Twitter</a></li>
<li class="linkedin"><a href="http://www.linkedin.com/company/tutorialspoint" target="_blank" data-placement="bottom"  title="tutorialspoint @ Linkedin">Linkedin</a></li>
<li class="rss"><a href="http://feeds.feedburner.com/SharedTutorials" target="_blank" data-placement="bottom" title="tutorialspoint RSS">RSS</a></li>
</ul>
</div>
</div>
</div>
</div>
<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="index.htm" class="logo">
<img alt="Tutorials Point" class="img-responsive" src="http://cdn.tutorialspoint.com/scripts/img/logo-footer.png">
</a>
</div>
<div class="col-md-6">
<p>&copy; Copyright 2015. All Rights Reserved.</p>
</div>
<div class="col-md-4">
<nav id="sub-menu">
<ul>
<li><a href="/about/tutorials_writing.htm">Write for us</a></li>
<li><a href="/about/faq.htm">FAQ's</a></li>
<li><a href="/about/about_helping.htm">Helping</a></li>
<li><a href="/about/contact_us.htm">Contact</a></li>
</ul>
</nav>
</div>
</div>
</div>
</div>
</footer>
</div>
<!-- Libs -->
<script type="text/javascript" src="http://cdn.tutorialspoint.com/theme/js/custom-min.js"></script>
<script src="http://www.google-analytics.com/urchin.js">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
<script type="text/javascript" src="http://cdn.tutorialspoint.com/theme/js/jquery.colorbox-min.js"></script>
<script type="text/javascript">
   var tryit = new $.TryIt('cplusplus/try_cplusplus.php');
   tryit.compile();
</script>
<style>
pre.prettyprint.tryit {
    background: #eee url('cplusplus/images/try-it.jpg') top right no-repeat !important;
}
</style></div>
</body>
</html>

