<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

		<!-- Copyright (c) NextDawn 2007-2009 All rights reserved -->
  		<!-- Developed by : www.nextdawn.nl -->
		<!-- Contact : contact@nextdawn.nl -->
		
<head profile="http://gmpg.org/xfn/11">
<meta name="google-site-verification" content="G5RDgCqtCFBG4cey1sDM72BU7o__Y7tsE-nBe96YcYg" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<title>C Tutorial – Error Handling (Exception Handling) | CodingUnit Programming Tutorials</title>

    <meta name="description" content="C Tutorial – Error Handling (Exception Handling)" />

    <meta name="generator" content="WordPress 4.2.2" /> <!-- leave this for stats -->

    <script type="text/javascript" src="http://www.codingunit.com/wp-content/themes/codingunit-theme/nextdawn.js"></script>
    <link rel="stylesheet" href="http://www.codingunit.com/wp-content/themes/codingunit-theme/style.css" type="text/css" media="screen" />

    <link rel="stylesheet" href="http://www.codingunit.com/wp-content/themes/codingunit-theme/widgets.css" type="text/css" media="screen" />

    <link rel="shortcut icon" type="image/ico" href="http://www.codingunit.com/wp-content/themes/codingunit-theme/favicon.ico" />
	<link rel="alternate" type="text/xml" title="RSS .92" href="http://www.codingunit.com/feed/rss" />
	<link rel="alternate" type="application/atom+xml" title="Atom 0.3" href="http://www.codingunit.com/feed/atom" />
		<link rel='archives' title='June 2014' href='http://www.codingunit.com/2014/06' />
	<link rel='archives' title='June 2013' href='http://www.codingunit.com/2013/06' />
	<link rel='archives' title='January 2013' href='http://www.codingunit.com/2013/01' />
	<link rel='archives' title='November 2012' href='http://www.codingunit.com/2012/11' />
	<link rel='archives' title='June 2012' href='http://www.codingunit.com/2012/06' />
	<link rel='archives' title='April 2012' href='http://www.codingunit.com/2012/04' />
	<link rel='archives' title='November 2011' href='http://www.codingunit.com/2011/11' />
	<link rel='archives' title='February 2011' href='http://www.codingunit.com/2011/02' />
	<link rel='archives' title='December 2010' href='http://www.codingunit.com/2010/12' />
	<link rel='archives' title='October 2010' href='http://www.codingunit.com/2010/10' />
	<link rel='archives' title='June 2010' href='http://www.codingunit.com/2010/06' />
	<link rel='archives' title='May 2010' href='http://www.codingunit.com/2010/05' />
	<link rel='archives' title='April 2010' href='http://www.codingunit.com/2010/04' />
	<link rel='archives' title='March 2010' href='http://www.codingunit.com/2010/03' />
	<link rel='archives' title='February 2010' href='http://www.codingunit.com/2010/02' />
	<link rel='archives' title='January 2010' href='http://www.codingunit.com/2010/01' />
	<link rel='archives' title='November 2009' href='http://www.codingunit.com/2009/11' />
	<link rel='archives' title='September 2009' href='http://www.codingunit.com/2009/09' />
	<link rel='archives' title='July 2009' href='http://www.codingunit.com/2009/07' />
	<link rel='archives' title='September 2007' href='http://www.codingunit.com/2007/09' />
    <link rel="alternate" type="application/rss+xml" title="CodingUnit Programming Tutorials RSS Feed" href="http://www.codingunit.com/feed" />
    <link rel="pingback" href="http://www.codingunit.com/xmlrpc.php" />

<!--[if IE]>
<style type="text/css">#sizer {width:expression(document.body.clientWidth > 650 ? "100%" : "100%" );}</style>
<![endif]-->


<!-- All in One SEO Pack 2.2.6.2 by Michael Torbert of Semper Fi Web Design[537,637] -->
<meta name="description"  content="In this C language tutorial we are going to look at error handling. Although C programming does not provide direct support for error handling (also called" />

<meta name="keywords"  content="c tutorials" />

<link rel="canonical" href="http://www.codingunit.com/c-tutorial-error-handling-exception-handling" />
<!-- /all in one seo pack -->
<link rel="alternate" type="application/rss+xml" title="CodingUnit Programming Tutorials &raquo; C Tutorial – Error Handling (Exception Handling) Comments Feed" href="http://www.codingunit.com/c-tutorial-error-handling-exception-handling/feed" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"http:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"wpemoji":"http:\/\/www.codingunit.com\/wp-includes\/js\/wp-emoji.js?ver=4.2.2","twemoji":"http:\/\/www.codingunit.com\/wp-includes\/js\/twemoji.js?ver=4.2.2"}};
			( function( window, document, settings ) {
	var src, ready;

	/**
	 * Detect if the browser supports rendering emoji or flag emoji. Flag emoji are a single glyph
	 * made of two characters, so some browsers (notably, Firefox OS X) don't support them.
	 *
	 * @since 4.2.0
	 *
	 * @param type {String} Whether to test for support of "simple" or "flag" emoji.
	 * @return {Boolean} True if the browser can render emoji, false if it cannot.
	 */
	function browserSupportsEmoji( type ) {
		var canvas = document.createElement( 'canvas' ),
			context = canvas.getContext && canvas.getContext( '2d' );

		if ( ! context || ! context.fillText ) {
			return false;
		}

		/*
		 * Chrome on OS X added native emoji rendering in M41. Unfortunately,
		 * it doesn't work when the font is bolder than 500 weight. So, we
		 * check for bold rendering support to avoid invisible emoji in Chrome.
		 */
		context.textBaseline = 'top';
		context.font = '600 32px Arial';

		if ( type === 'flag' ) {
			/*
			 * This works because the image will be one of three things:
			 * - Two empty squares, if the browser doesn't render emoji
			 * - Two squares with 'G' and 'B' in them, if the browser doesn't render flag emoji
			 * - The British flag
			 *
			 * The first two will encode to small images (1-2KB data URLs), the third will encode
			 * to a larger image (4-5KB data URL).
			 */
			context.fillText( String.fromCharCode( 55356, 56812, 55356, 56807 ), 0, 0 );
			return canvas.toDataURL().length > 3000;
		} else {
			/*
			 * This creates a smiling emoji, and checks to see if there is any image data in the
			 * center pixel. In browsers that don't support emoji, the character will be rendered
			 * as an empty square, so the center pixel will be blank.
			 */
			context.fillText( String.fromCharCode( 55357, 56835 ), 0, 0 );
			return context.getImageData( 16, 16, 1, 1 ).data[0] !== 0;
		}
	}

	function addScript( src ) {
		var script = document.createElement( 'script' );

		script.src = src;
		script.type = 'text/javascript';
		document.getElementsByTagName( 'head' )[0].appendChild( script );
	}

	settings.supports = {
		simple: browserSupportsEmoji( 'simple' ),
		flag:   browserSupportsEmoji( 'flag' )
	};

	settings.DOMReady = false;
	settings.readyCallback = function() {
		settings.DOMReady = true;
	};

	if ( ! settings.supports.simple || ! settings.supports.flag ) {
		ready = function() {
			settings.readyCallback();
		};

		if ( document.addEventListener ) {
			document.addEventListener( 'DOMContentLoaded', ready, false );
			window.addEventListener( 'load', ready, false );
		} else {
			window.attachEvent( 'onload', ready );
			document.attachEvent( 'onreadystatechange', function() {
				if ( 'complete' === document.readyState ) {
					settings.readyCallback();
				}
			} );
		}

		src = settings.source || {};

		if ( src.concatemoji ) {
			addScript( src.concatemoji );
		} else if ( src.wpemoji && src.twemoji ) {
			addScript( src.twemoji );
			addScript( src.wpemoji );
		}
	}

} )( window, document, window._wpemojiSettings );
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.codingunit.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.codingunit.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='C Tutorial – Splitting a Text File into Multiple Files' href='http://www.codingunit.com/c-tutorial-splitting-a-text-file-into-multiple-files' />
<link rel='next' title='C Tutorial &#8211; Queues' href='http://www.codingunit.com/c-tutorial-queues' />
<meta name="generator" content="WordPress 4.2.2" />
<link rel='shortlink' href='http://www.codingunit.com/?p=1336' />
</head>
<body>

<div id="sizer">
<div id="expander">

<div id="newheader">
    <ul id="headerimage">
        <li><a href="http://www.codingunit.com/"></a></li>
    </ul>
</div>

<div id="navigation">
    <ul id="nav">
        <li><a href="http://www.codingunit.com/" title="Home: CodingUnit Programming Tutorials">Home</a></li>
        <li class="page_item page-item-2"><a href="http://www.codingunit.com/about">About</a></li>
    </ul>
	<div id="googlesearch">
		<form action="http://www.google.com/cse" id="cse-search-box" target="_blank">
  <div>
    <input type="hidden" name="cx" value="partner-pub-7868601750853261:s9r1fl-a8sm" />
    <input type="hidden" name="ie" value="ISO-8859-1" />
    <input type="text" name="q" size="25" />
    <input type="submit" name="sa" value="Search" />
  </div>
</form>
<script type="text/javascript" src="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>



	</div>
	<div id="rss">
		<a href="http://www.codingunit.com/feed" title="Subscribe to CodingUnit Programming Tutorials" class="iconrss">rss posts</a>
	</div>
</div>

<div id="wrapper1">

<div class="outer">

<div class="float-wrap">

<div id="column1">

<div class="centerbox">

    <a href="#" name="documentContent"></a>
  
	<div class="post" id="post-1336">
		<h1 class="firstheading"><a href="http://www.codingunit.com/c-tutorial-error-handling-exception-handling" rel="bookmark" title="C Tutorial – Error Handling (Exception Handling)">
		C Tutorial – Error Handling (Exception Handling)</a></h1>

			<div class="entry">
				<div id="watermark">
					<p>In this C language tutorial we are going to look at error handling. Although C programming does not provide direct support for error handling (also called exception handling), there are ways to do error handling.</p>
<p>Of course the programmer needs to prevent errors during coding and should always test the return values of functions called by the program.  A lot of C function calls return a -1 or NULL in case of an error, so quick test on these return values are easily done with for instance an ‘if statement’.<span id="more-1336"></span> </p>
<p>In previous tutorials we already mention  that this behavior (returning numbers to indicate an error) is also used in Unix or Linux like operating systems. For instance if a program successful ends the return value of the program is zero. If the program ends with an error usually a number larger than zero is returned (for example 1). (With command ‘echo $?’ on the command line you can display the return code of a program that has previously run).</p>
<p>So the one thing you need to remember is that you (the programmer) are responsible for error handling. You’re the person that needs to make sure that a program will gracefully terminate and not just CRASH unexpectedly! It is you that need to take appropriate action depending on the return values of function calls.</p>
<h2>Global Variable errno</h2>
<p>The global variable errno is used by C functions and this integer is set if there is an error during the function call.  To make use of errno you need to include errno.h and you need to call ‘extern int errno;’</p>
<p>Let us take a look at an example:</p>
<div id="cl">
<pre><code>
#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;

extern int errno;

int main () {
	FILE * fp;
	fp = fopen ("filedoesnotexist.txt", "rb");
	if (fp == NULL) {
		fprintf(stderr, "Value of errno: %d\n", errno);
	} else {
		fclose (fp);
	}
	return 0;
}

</code></pre>
</div>
<p><small><strong>Note:</strong> that you should always use stderr file stream to output all of the errors</small></p>
<p>The output of the program will be something like:</p>
<div id="cl">
<pre><code>
    Value of errno is: 2

</code></pre>
</div>
<p>As you can see we include the stdio.h and errno.h header files. Then ‘extern int errno’ is called, so we now have access to the integer errno. To generate an error we open a file that doesn’t exist. If the file pointer (fp) equals NULL then we print the value of errno (in this case errno will be 2). If we get a file pointer (in case the file exists) we close the file.</p>
<h2>The functions strerror() and perror()</h2>
<p>In the previous example the errno had a value of 2. But what is the meaning of the value of 2? How does the user know what this error is? Of course a good practice is to make some documentation where you describe each error number and what the user should do. But it is also a good practice to give a good descriptive error message when an error occurs in the program. The C programming language has two functions that can be used to display a text message that is associated with errno. The functions are strerror() and perror().</p>
<p>The function strerror() returns a pointer to the textual message of the current errno value. The function perror() displays a string you pass to it, followed by a colon and the textual message of the current errno value.</p>
<p>Before we look at an example it is important to note that you should always use stderr file stream to output all of the errors that may occur. Let’s take a look at an example:</p>
<div id="cl">
<pre><code>
#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;

extern int errno;

int main () {
	FILE * fp;
	fp = fopen ("filedoesnotexist.txt", "rb");
	if (fp == NULL) {
		fprintf(stderr, "Value of errno: %d\n", errno);
		fprintf(stderr, "Error opening the file: %s\n", strerror( errno ));
		perror("Error printed by perror");
	} else {
		fclose (fp);
	}
	return 0;
}

</code></pre>
</div>
<p><small><strong>Note:</strong> that the header file string.h is included, otherwise you get an segmentation fault when you use strerror() function in this program. (Try it! I tried it on Red Hat 6 system using gcc).</small></p>
<p>The output of the program will be:</p>
<div id="cl">
<pre><code>
    Value of errno: 2
    Error opening the file: No such file or directory
    Error printed by perror: No such file or directory

</code></pre>
</div>
<p>As in the previous example we include some header files and call ‘extern int errno’, so we can use errno in our program. As before we open an non existing file and if the file pointer equals NULL we got an error. First we print the errno. Then we use strerror() function to give a message of our own and print the text representation of errno. Then perror() function is used to give a message of our own, followed by a colon and the textual representation of errno.</p>
<h2>Program Exit Status</h2>
<p>As previous mentioned it is a good practice to return a value if the program end successful or ends with an error. To do this we can use the macros EXIT_SUCCESS and EXIT_FAILURE that are defined in stdlib.h (so you need to include this header file in your program).</p>
<p>If we take a look in the stdlib.h file (on Linux) you will find something like this:</p>
<div id="cl">
<pre><code>
    /* We define these the same for all machines.
        Changes from this to the outside world should be done in `_exit'.  */
    #define EXIT_FAILURE    1       /* Failing exit status.  */
    #define EXIT_SUCCESS    0       /* Successful exit status.  */

</code></pre>
</div>
<p>Let’s change our previous program by including the two exit macros:</p>
<div id="cl">
<pre><code>
#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

extern int errno;

int main () {
	FILE * fp;
	fp = fopen ("filedoesnotexist.txt", "rb");
	if (fp == NULL) {
		fprintf(stderr, "Value of errno: %d\n", errno);
		fprintf(stderr, "Error opening the file: %s\n", strerror( errno ));
		perror("Error printed by perror");
		exit(EXIT_FAILURE);
	} else {
		fclose (fp);
		exit(EXIT_SUCCESS);
	}
	return 0;
}

</code></pre>
</div>
<p>Let us compile the program on a Linux machine and too show the result and show you the return codes of the program:</p>
<div id="cl">
<pre><code>
	# ./err
	Value of errno: 2
	Error opening the file: No such file or directory
	Error printed by perror: No such file or directory
	# echo $?
	1
	# touch filedoesnotexist.txt
	# ./err
	# echo $?
	0
	#

</code></pre>
</div>
<p><small><strong>Note:</strong> with the ‘echo $?’ command on the command line you can display the return code of a program that has previously run.</small></p>
<p>With the ./err we run the program and we get the know messages of the error. We give an echo $? to display the return code, in this case a one which indicate an error has occurred. Then with the touch filedoesnotexist.txt command we create the file (that was previously missing). We start the program again and we get NO errors. Again we ask the return code and as you can see a zero is returned indicating that there was no error. </p>
<p>That’s all for this tutorial, may your errors be minor, but readable for all users by using the techniques described in this tutorial.</p>
				</div>
				
    <div class="boxedup">
					<small>
						This entry was posted in <a href="http://www.codingunit.com/category/c-tutorials" rel="category tag">C Tutorials</a>.
						You can follow any responses to this entry through the <a href='http://www.codingunit.com/c-tutorial-error-handling-exception-handling/feed'>RSS 2.0</a> feed.
												
													Both comments and pings are currently closed.

												
						<a href="http://twitter.com/home?status=C Tutorial – Error Handling (Exception Handling) http://www.codingunit.com/c-tutorial-error-handling-exception-handling" title="Click to send this page to Twitter!" target="_blank"><img src="http://www.codingunit.com/wp-content/themes/codingunit-theme/images/tweet-this2.png" width="18" height="18" alt="Tweet This!" /> Tweet This!</a><strong> or use </strong>
<script type="text/javascript" src="http://w.sharethis.com/widget/?tabs=web&amp;charset=utf-8&amp;style=default&amp;publisher=175d6d6f-554e-47d3-97f3-e45eb2d68de7&amp;headerbg=%230997b9"></script><strong> to share this post with others.</strong>						
					</small>
				</div>

			</div>
		</div>

	<div class="boxedup">
<!-- You can start editing here. -->

	<h3 id="comments">There are currently 2 responses to &#8220;C Tutorial – Error Handling (Exception Handling)&#8221;</h3> 
        <p>Why not let us know what you think by adding your own comment!</p>
	<ol class="commentlist">

	
		<li class="alt" id="comment-9082">

            			<cite><a href='http://www.google.com' rel='external nofollow' class='url'>james</a></cite> on <small>November 22nd, 2013</small>:
			
			<p>cool post</p>
		</li>

	
	
		<li class="" id="comment-9229">

            			<cite>amir</cite> on <small>December 13th, 2013</small>:
			
			<p>union structure<br />
typedef union large_integer{<br />
struct{<br />
Dword lowpart;<br />
long highpart;<br />
};<br />
struct{<br />
Dword lowpart;<br />
long highpart;<br />
}u;<br />
longlong quadpart;}<br />
large_integer,*plarge_integer;</p>
		</li>

	
	
	</ol>

 

</div>

	
   <div id="back">
            <a href="#documentContent" title="up to the page content">up to content</a> &raquo;
    </div>
</div>
</div>

<div id="column2">
<div class="container-left">

							<ul><li class="listHeader"><h2>C Tutorials</h2></li>
			<hr/>
																<li><a href="http://www.codingunit.com/the-history-of-the-c-language" rel="bookmark" title="The History of the C Language">The History of the C Language</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-compilers-gnu-and-visual-studio" rel="bookmark" title="C Tutorial &#8211; Compilers (GNU and Visual Studio)">C Tutorial &#8211; Compilers (GNU and Visual Studio)</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-first-c-program-hello-world" rel="bookmark" title="First C program, Hello World">First C program, Hello World</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-variables-and-constants" rel="bookmark" title="C Tutorial &#8211; variables and constants">C Tutorial &#8211; variables and constants</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-the-if-and-switch-statement" rel="bookmark" title="C Tutorial &#8211; The if and switch statement">C Tutorial &#8211; The if and switch statement</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-for-loop-while-loop-break-and-continue" rel="bookmark" title="C Tutorial &#8211; for loop, while loop, break and continue">C Tutorial &#8211; for loop, while loop, break and continue</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-arrays-and-multi-dimensional-arrays" rel="bookmark" title="C Tutorial &#8211; Arrays and Multi-Dimensional Arrays">C Tutorial &#8211; Arrays and Multi-Dimensional Arrays</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-functions-and-global-local-variables" rel="bookmark" title="C Tutorial &#8211; Functions and Global/Local variables">C Tutorial &#8211; Functions and Global/Local variables</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-more-on-c-functions" rel="bookmark" title="C Tutorial &#8211; More on Functions">C Tutorial &#8211; More on Functions</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-how-to-use-pointers" rel="bookmark" title="C Tutorial &#8211; How to use Pointers">C Tutorial &#8211; How to use Pointers</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-more-on-pointers" rel="bookmark" title="C Tutorial &#8211; More on Pointers">C Tutorial &#8211; More on Pointers</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-strings-and-string-library-functions" rel="bookmark" title="C Tutorial &#8211; strings and string Library Functions">C Tutorial &#8211; strings and string Library Functions</a></li>
									<li><a href="http://www.codingunit.com/printf-format-specifiers-format-conversions-and-formatted-output" rel="bookmark" title="C Tutorial &#8211; printf, Format Specifiers, Format Conversions and Formatted Output">C Tutorial &#8211; printf, Format Specifiers, Format Conversions and Formatted Output</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-structures-unions-typedef" rel="bookmark" title="C Tutorial &#8211; structures, unions, typedef">C Tutorial &#8211; structures, unions, typedef</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-file-io-using-text-files" rel="bookmark" title="C Tutorial &#8211; File I/O (using text files)">C Tutorial &#8211; File I/O (using text files)</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-the-functions-malloc-and-free" rel="bookmark" title="C Tutorial &#8211; The functions malloc and free">C Tutorial &#8211; The functions malloc and free</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-binary-file-io" rel="bookmark" title="C Tutorial &#8211; Binary File I/O">C Tutorial &#8211; Binary File I/O</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-deleting-and-renaming-a-file" rel="bookmark" title="C Tutorial &#8211; Deleting and Renaming a File">C Tutorial &#8211; Deleting and Renaming a File</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-copying-a-file-in-c" rel="bookmark" title="C Tutorial &#8211; Copying a File">C Tutorial &#8211; Copying a File</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-command-line-parameter-parsing" rel="bookmark" title="C Tutorial &#8211; Command Line Parameter Parsing">C Tutorial &#8211; Command Line Parameter Parsing</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-how-to-use-time-and-date-in-c" rel="bookmark" title="How to use Time and Date in C">How to use Time and Date in C</a></li>
									<li><a href="http://www.codingunit.com/writing-memory-to-a-file-and-reading-memory-from-a-file-in-c" rel="bookmark" title="Writing Memory to a File and Reading Memory from a File in C">Writing Memory to a File and Reading Memory from a File in C</a></li>
									<li><a href="http://www.codingunit.com/how-to-make-a-calendar-in-c" rel="bookmark" title="How to make a Calendar in C">How to make a Calendar in C</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-searching-for-strings-in-a-text-file" rel="bookmark" title="C Tutorial &#8211; Searching for Strings in a Text File">C Tutorial &#8211; Searching for Strings in a Text File</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-number-of-seconds-in-decade-and-visaversa" rel="bookmark" title="C Tutorial &#8211; Number of Seconds in Decade and Visa-Versa">C Tutorial &#8211; Number of Seconds in Decade and Visa-Versa</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-a-star-pyramid-and-string-triangle-using-for-loops" rel="bookmark" title="C Tutorial – A Star pyramid and String triangle using for loops">C Tutorial – A Star pyramid and String triangle using for loops</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-call-by-value-or-call-by-reference" rel="bookmark" title="C Tutorial – Call by Value or Call by Reference">C Tutorial – Call by Value or Call by Reference</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-deleting-a-record-from-a-binary-file" rel="bookmark" title="C Tutorial – Deleting a Record from a Binary File">C Tutorial – Deleting a Record from a Binary File</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-splitting-a-text-file-into-multiple-files" rel="bookmark" title="C Tutorial – Splitting a Text File into Multiple Files">C Tutorial – Splitting a Text File into Multiple Files</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-error-handling-exception-handling" rel="bookmark" title="C Tutorial – Error Handling (Exception Handling)">C Tutorial – Error Handling (Exception Handling)</a></li>
									<li><a href="http://www.codingunit.com/c-tutorial-queues" rel="bookmark" title="C Tutorial &#8211; Queues">C Tutorial &#8211; Queues</a></li>
								
			</ul>
					</div>
</div>
<br class="clear" />
</div>

<div id="column3">
<div class="container-right">
	<div class="google-skyscraper"><script type="text/javascript"><!--
google_ad_client = "pub-7868601750853261";
/* 300x250, created 9/24/08 */
google_ad_slot = "9605146122";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
			<ul><li class="listHeader"><h2>Latest Posts</h2></li>
		<hr/>
				<li><a href='http://www.codingunit.com/c-tutorial-queues'>C Tutorial &#8211; Queues</a></li>
	<li><a href='http://www.codingunit.com/c-tutorial-error-handling-exception-handling'>C Tutorial – Error Handling (Exception Handling)</a></li>
	<li><a href='http://www.codingunit.com/c-tutorial-splitting-a-text-file-into-multiple-files'>C Tutorial – Splitting a Text File into Multiple Files</a></li>
	<li><a href='http://www.codingunit.com/c-tutorial-deleting-a-record-from-a-binary-file'>C Tutorial – Deleting a Record from a Binary File</a></li>
	<li><a href='http://www.codingunit.com/c-tutorial-call-by-value-or-call-by-reference'>C Tutorial – Call by Value or Call by Reference</a></li>
	<li><a href='http://www.codingunit.com/checking-for-palindrome-strings-or-numbers-in-c-language'>Checking for Palindrome Strings or Numbers in C Language</a></li>
	<li><a href='http://www.codingunit.com/linear-search-algorithm-in-c-language'>Linear Search Algorithm in C Language</a></li>
	<li><a href='http://www.codingunit.com/determining-the-area-of-different-shaped-triangles-in-c'>Determining the Area of Different Shaped Triangles in C</a></li>
	<li><a href='http://www.codingunit.com/area-of-a-rectangle-circle-and-trapezium-in-c'>Area of a Rectangle Circle and Trapezium in C</a></li>
	<li><a href='http://www.codingunit.com/how-to-print-floyds-triangle-in-c'>How to Print Floyds Triangle in C</a></li>
		</ul>
		<div class="google-skyscraper"><script type="text/javascript"><!--
google_ad_client = "pub-7868601750853261";
/* 300x250, created 9/24/08 */
google_ad_slot = "9605146122";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
	<div class="google-skyscraper"><script type="text/javascript"><!--
google_ad_client = "pub-7868601750853261";
/* 300x250, created 9/24/08 */
google_ad_slot = "9605146122";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
</div>
</div>

<br class="clear" />

</div>

<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-2735312-4");
pageTracker._trackPageview();
} catch(err) {}</script>
<div id="footer">
	<hr/>
    <p>&copy; 2015 <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a>. All Rights Reserved. | <a href="mailto:contact@codingunit.com?subject=Question">Contact</a></p>
	<p><a href="http://www.codingunit.com/terms" target="_blank">TERMS</a> 
	  and <a href="http://www.codingunit.com/privacy-policy" target="_blank">Privacy Policy</a> 
	  UNDER WHICH THIS SERVICE IS PROVIDED TO YOU.</p>
</div>

</div>


</div>
</div>
        <!-- 28 queries. 0.594 seconds. -->
</body>
</html>

