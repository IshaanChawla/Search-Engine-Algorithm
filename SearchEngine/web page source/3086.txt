<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
<head>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 

  <title>PHP: Constants - Manual </title>

 <link rel="shortcut icon" href="http://php.net/favicon.ico">
 <link rel="search" type="application/opensearchdescription+xml" href="http://php.net/phpnetimprovedsearch.src" title="Add PHP.net search">
 <link rel="alternate" type="application/atom+xml" href="http://php.net/releases/feed.php" title="PHP Release feed">
 <link rel="alternate" type="application/atom+xml" href="http://php.net/feed.atom" title="PHP: Hypertext Preprocessor">

 <link rel="canonical" href="http://php.net/manual/en/language.constants.php">
 <link rel="shorturl" href="http://php.net/constants">
 <link rel="alternate" href="http://php.net/constants" hreflang="x-default">

 <link rel="contents" href="http://php.net/manual/en/index.php">
 <link rel="index" href="http://php.net/manual/en/langref.php">
 <link rel="prev" href="http://php.net/manual/en/language.variables.external.php">
 <link rel="next" href="http://php.net/manual/en/language.constants.syntax.php">

 <link rel="alternate" href="http://php.net/manual/en/language.constants.php" hreflang="en">
 <link rel="alternate" href="http://php.net/manual/pt_BR/language.constants.php" hreflang="pt_BR">
 <link rel="alternate" href="http://php.net/manual/zh/language.constants.php" hreflang="zh">
 <link rel="alternate" href="http://php.net/manual/fr/language.constants.php" hreflang="fr">
 <link rel="alternate" href="http://php.net/manual/de/language.constants.php" hreflang="de">
 <link rel="alternate" href="http://php.net/manual/ja/language.constants.php" hreflang="ja">
 <link rel="alternate" href="http://php.net/manual/kr/language.constants.php" hreflang="kr">
 <link rel="alternate" href="http://php.net/manual/ro/language.constants.php" hreflang="ro">
 <link rel="alternate" href="http://php.net/manual/ru/language.constants.php" hreflang="ru">
 <link rel="alternate" href="http://php.net/manual/es/language.constants.php" hreflang="es">
 <link rel="alternate" href="http://php.net/manual/tr/language.constants.php" hreflang="tr">

<link rel="stylesheet" type="text/css" href="http://php.net/cached.php?t=1421837618&amp;f=/fonts/Fira/fira.css" media="screen">
<link rel="stylesheet" type="text/css" href="http://php.net/cached.php?t=1421837618&amp;f=/fonts/Font-Awesome/css/fontello.css" media="screen">
<link rel="stylesheet" type="text/css" href="http://php.net/cached.php?t=1429291204&amp;f=/styles/theme-base.css" media="screen">
<link rel="stylesheet" type="text/css" href="http://php.net/cached.php?t=1429259403&amp;f=/styles/theme-medium.css" media="screen">

 <!--[if lte IE 7]>
 <link rel="stylesheet" type="text/css" href="http://php.net/styles/workarounds.ie7.css" media="screen">
 <![endif]-->

 <!--[if lte IE 8]>
 <script type="text/javascript">
  window.brokenIE = true;
 </script>
 <![endif]-->

 <!--[if lte IE 9]>
 <link rel="stylesheet" type="text/css" href="http://php.net/styles/workarounds.ie9.css" media="screen">
 <![endif]-->

 <!--[if IE]>
 <script type="text/javascript" src="http://php.net/js/ext/html5.js"></script>
 <![endif]-->

 <base href="http://php.net/manual/en/language.constants.php">

</head>
<body class="docs ">

<nav id="head-nav" class="navbar navbar-fixed-top">
  <div class="navbar-inner clearfix">
    <a href="/" class="brand"><img src="/images/logo.php" width="48" height="24" alt="php"></a>
    <div id="mainmenu-toggle-overlay"></div>
    <input type="checkbox" id="mainmenu-toggle">
    <ul class="nav">
      <li class=""><a href="/downloads">Downloads</a></li>
      <li class="active"><a href="/docs.php">Documentation</a></li>
      <li class=""><a href="/get-involved" >Get Involved</a></li>
      <li class=""><a href="/support">Help</a></li>
    </ul>
    <form class="navbar-search" id="topsearch" action="/search.php">
      <input type="hidden" name="show" value="quickref">
      <input type="search" name="pattern" class="search-query" placeholder="Search" accesskey="s">
    </form>
  </div>
  <div id="flash-message"></div>
</nav>
<div class="headsup"><a href='/index.php#id2015-05-14-3'>PHP 5.6.9 is available</a></div>
<nav id="trick"><div><dl>
<dt><a href='/manual/en/getting-started.php'>Getting Started</a></dt>
	<dd><a href='/manual/en/introduction.php'>Introduction</a></dd>
	<dd><a href='/manual/en/tutorial.php'>A simple tutorial</a></dd>
<dt><a href='/manual/en/langref.php'>Language Reference</a></dt>
	<dd><a href='/manual/en/language.basic-syntax.php'>Basic syntax</a></dd>
	<dd><a href='/manual/en/language.types.php'>Types</a></dd>
	<dd><a href='/manual/en/language.variables.php'>Variables</a></dd>
	<dd><a href='/manual/en/language.constants.php'>Constants</a></dd>
	<dd><a href='/manual/en/language.expressions.php'>Expressions</a></dd>
	<dd><a href='/manual/en/language.operators.php'>Operators</a></dd>
	<dd><a href='/manual/en/language.control-structures.php'>Control Structures</a></dd>
	<dd><a href='/manual/en/language.functions.php'>Functions</a></dd>
	<dd><a href='/manual/en/language.oop5.php'>Classes and Objects</a></dd>
	<dd><a href='/manual/en/language.namespaces.php'>Namespaces</a></dd>
	<dd><a href='/manual/en/language.exceptions.php'>Exceptions</a></dd>
	<dd><a href='/manual/en/language.generators.php'>Generators</a></dd>
	<dd><a href='/manual/en/language.references.php'>References Explained</a></dd>
	<dd><a href='/manual/en/reserved.variables.php'>Predefined Variables</a></dd>
	<dd><a href='/manual/en/reserved.exceptions.php'>Predefined Exceptions</a></dd>
	<dd><a href='/manual/en/reserved.interfaces.php'>Predefined Interfaces and Classes</a></dd>
	<dd><a href='/manual/en/context.php'>Context options and parameters</a></dd>
	<dd><a href='/manual/en/wrappers.php'>Supported Protocols and Wrappers</a></dd>
</dl>
<dl>
<dt><a href='/manual/en/security.php'>Security</a></dt>
	<dd><a href='/manual/en/security.intro.php'>Introduction</a></dd>
	<dd><a href='/manual/en/security.general.php'>General considerations</a></dd>
	<dd><a href='/manual/en/security.cgi-bin.php'>Installed as CGI binary</a></dd>
	<dd><a href='/manual/en/security.apache.php'>Installed as an Apache module</a></dd>
	<dd><a href='/manual/en/security.filesystem.php'>Filesystem Security</a></dd>
	<dd><a href='/manual/en/security.database.php'>Database Security</a></dd>
	<dd><a href='/manual/en/security.errors.php'>Error Reporting</a></dd>
	<dd><a href='/manual/en/security.globals.php'>Using Register Globals</a></dd>
	<dd><a href='/manual/en/security.variables.php'>User Submitted Data</a></dd>
	<dd><a href='/manual/en/security.magicquotes.php'>Magic Quotes</a></dd>
	<dd><a href='/manual/en/security.hiding.php'>Hiding PHP</a></dd>
	<dd><a href='/manual/en/security.current.php'>Keeping Current</a></dd>
<dt><a href='/manual/en/features.php'>Features</a></dt>
	<dd><a href='/manual/en/features.http-auth.php'>HTTP authentication with PHP</a></dd>
	<dd><a href='/manual/en/features.cookies.php'>Cookies</a></dd>
	<dd><a href='/manual/en/features.sessions.php'>Sessions</a></dd>
	<dd><a href='/manual/en/features.xforms.php'>Dealing with XForms</a></dd>
	<dd><a href='/manual/en/features.file-upload.php'>Handling file uploads</a></dd>
	<dd><a href='/manual/en/features.remote-files.php'>Using remote files</a></dd>
	<dd><a href='/manual/en/features.connection-handling.php'>Connection handling</a></dd>
	<dd><a href='/manual/en/features.persistent-connections.php'>Persistent Database Connections</a></dd>
	<dd><a href='/manual/en/features.safe-mode.php'>Safe Mode</a></dd>
	<dd><a href='/manual/en/features.commandline.php'>Command line usage</a></dd>
	<dd><a href='/manual/en/features.gc.php'>Garbage Collection</a></dd>
	<dd><a href='/manual/en/features.dtrace.php'>DTrace Dynamic Tracing</a></dd>
</dl>
<dl>
<dt><a href='/manual/en/funcref.php'>Function Reference</a></dt>
	<dd><a href='/manual/en/refs.basic.php.php'>Affecting PHP's Behaviour</a></dd>
	<dd><a href='/manual/en/refs.utilspec.audio.php'>Audio Formats Manipulation</a></dd>
	<dd><a href='/manual/en/refs.remote.auth.php'>Authentication Services</a></dd>
	<dd><a href='/manual/en/refs.utilspec.cmdline.php'>Command Line Specific Extensions</a></dd>
	<dd><a href='/manual/en/refs.compression.php'>Compression and Archive Extensions</a></dd>
	<dd><a href='/manual/en/refs.creditcard.php'>Credit Card Processing</a></dd>
	<dd><a href='/manual/en/refs.crypto.php'>Cryptography Extensions</a></dd>
	<dd><a href='/manual/en/refs.database.php'>Database Extensions</a></dd>
	<dd><a href='/manual/en/refs.calendar.php'>Date and Time Related Extensions</a></dd>
	<dd><a href='/manual/en/refs.fileprocess.file.php'>File System Related Extensions</a></dd>
	<dd><a href='/manual/en/refs.international.php'>Human Language and Character Encoding Support</a></dd>
	<dd><a href='/manual/en/refs.utilspec.image.php'>Image Processing and Generation</a></dd>
	<dd><a href='/manual/en/refs.remote.mail.php'>Mail Related Extensions</a></dd>
	<dd><a href='/manual/en/refs.math.php'>Mathematical Extensions</a></dd>
	<dd><a href='/manual/en/refs.utilspec.nontext.php'>Non-Text MIME Output</a></dd>
	<dd><a href='/manual/en/refs.fileprocess.process.php'>Process Control Extensions</a></dd>
	<dd><a href='/manual/en/refs.basic.other.php'>Other Basic Extensions</a></dd>
	<dd><a href='/manual/en/refs.remote.other.php'>Other Services</a></dd>
	<dd><a href='/manual/en/refs.search.php'>Search Engine Extensions</a></dd>
	<dd><a href='/manual/en/refs.utilspec.server.php'>Server Specific Extensions</a></dd>
	<dd><a href='/manual/en/refs.basic.session.php'>Session Extensions</a></dd>
	<dd><a href='/manual/en/refs.basic.text.php'>Text Processing</a></dd>
	<dd><a href='/manual/en/refs.basic.vartype.php'>Variable and Type Related Extensions</a></dd>
	<dd><a href='/manual/en/refs.webservice.php'>Web Services</a></dd>
	<dd><a href='/manual/en/refs.utilspec.windows.php'>Windows Only Extensions</a></dd>
	<dd><a href='/manual/en/refs.xml.php'>XML Manipulation</a></dd>
</dl>
<dl>
<dt>Keyboard Shortcuts</dt><dt>?</dt>
<dd>This help</dd>
<dt>j</dt>
<dd>Next menu item</dd>
<dt>k</dt>
<dd>Previous menu item</dd>
<dt>g p</dt>
<dd>Previous man page</dd>
<dt>g n</dt>
<dd>Next man page</dd>
<dt>G</dt>
<dd>Scroll to bottom</dd>
<dt>g g</dt>
<dd>Scroll to top</dd>
<dt>g h</dt>
<dd>Goto homepage</dd>
<dt>g s</dt>
<dd>Goto search<br>(current page)</dd>
<dt>/</dt>
<dd>Focus search box</dd>
</dl></div></nav>
<div id="goto">
    <div class="search">
         <div class="text"></div>
         <div class="results"><ul></ul></div>
   </div>
</div>

  <div id="breadcrumbs" class="clearfix">
    <div id="breadcrumbs-inner">
          <div class="next">
        <a href="language.constants.syntax.php">
          Syntax &raquo;
        </a>
      </div>
              <div class="prev">
        <a href="language.variables.external.php">
          &laquo; Variables From External Sources        </a>
      </div>
          <ul>
            <li><a href='index.php'>PHP Manual</a></li>      <li><a href='langref.php'>Language Reference</a></li>      </ul>
    </div>
  </div>




<div id="layout" class="clearfix">
  <section id="layout-content">
  <div class="page-tools">
    <div class="change-language">
      <form action="/manual/change.php" method="get" id="changelang" name="changelang">
        <fieldset>
          <label for="changelang-langs">Change language:</label>
          <select onchange="document.changelang.submit()" name="page" id="changelang-langs">
            <option value='en/language.constants.php' selected="selected">English</option>
            <option value='pt_BR/language.constants.php'>Brazilian Portuguese</option>
            <option value='zh/language.constants.php'>Chinese (Simplified)</option>
            <option value='fr/language.constants.php'>French</option>
            <option value='de/language.constants.php'>German</option>
            <option value='ja/language.constants.php'>Japanese</option>
            <option value='kr/language.constants.php'>Korean</option>
            <option value='ro/language.constants.php'>Romanian</option>
            <option value='ru/language.constants.php'>Russian</option>
            <option value='es/language.constants.php'>Spanish</option>
            <option value='tr/language.constants.php'>Turkish</option>
            <option value="help-translate.php">Other</option>
          </select>
        </fieldset>
      </form>
    </div>
    <div class="edit-bug">
      <a href="https://edit.php.net/?project=PHP&amp;perm=en/language.constants.php">Edit</a>
      <a href="https://bugs.php.net/report.php?bug_type=Documentation+problem&amp;manpage=language.constants">Report a Bug</a>
    </div>
  </div><div id="language.constants" class="chapter">
  <h1>Constants</h1>
<h2>Table of Contents</h2><ul class="chunklist chunklist_chapter"><li><a href="language.constants.syntax.php">Syntax</a></li><li><a href="language.constants.predefined.php">Magic constants</a></li></ul>


  <p class="simpara">
   A constant is an identifier (name) for a simple value. As the name
   suggests, that value cannot change during the execution of the
   script (except for <a href="language.constants.predefined.php" class="link">
   magic constants</a>, which aren&#039;t actually constants).
   A constant is case-sensitive by default. By convention, constant 
   identifiers are always uppercase.
  </p>
  <p class="para">
   The name of a constant follows the same rules as any label in PHP. A 
   valid constant name starts with a letter or underscore, followed
   by any number of letters, numbers, or underscores. As a regular
   expression, it would be expressed thusly:
   <em>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</em>
  </p>
  <div class="tip"><strong class="tip">Tip</strong><p class="simpara">See also the
<a href="userlandnaming.php" class="xref">Userland Naming Guide</a>.</p></div>
  <p class="para">
   <div class="example" id="example-126">
    <p><strong>Example #1 Valid and invalid constant names</strong></p>
    <div class="example-contents">
<div class="phpcode"><code><span style="color: #000000">
<span style="color: #0000BB">&lt;?php<br /><br /></span><span style="color: #FF8000">//&nbsp;Valid&nbsp;constant&nbsp;names<br /></span><span style="color: #0000BB">define</span><span style="color: #007700">(</span><span style="color: #DD0000">"FOO"</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"something"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">define</span><span style="color: #007700">(</span><span style="color: #DD0000">"FOO2"</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"something&nbsp;else"</span><span style="color: #007700">);<br /></span><span style="color: #0000BB">define</span><span style="color: #007700">(</span><span style="color: #DD0000">"FOO_BAR"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"something&nbsp;more"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;Invalid&nbsp;constant&nbsp;names<br /></span><span style="color: #0000BB">define</span><span style="color: #007700">(</span><span style="color: #DD0000">"2FOO"</span><span style="color: #007700">,&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color: #DD0000">"something"</span><span style="color: #007700">);<br /><br /></span><span style="color: #FF8000">//&nbsp;This&nbsp;is&nbsp;valid,&nbsp;but&nbsp;should&nbsp;be&nbsp;avoided:<br />//&nbsp;PHP&nbsp;may&nbsp;one&nbsp;day&nbsp;provide&nbsp;a&nbsp;magical&nbsp;constant<br />//&nbsp;that&nbsp;will&nbsp;break&nbsp;your&nbsp;script<br /></span><span style="color: #0000BB">define</span><span style="color: #007700">(</span><span style="color: #DD0000">"__FOO__"</span><span style="color: #007700">,&nbsp;</span><span style="color: #DD0000">"something"</span><span style="color: #007700">);&nbsp;<br /><br /></span><span style="color: #0000BB">?&gt;</span>
</span>
</code></div>
    </div>

   </div>
  </p>
  <blockquote class="note"><p><strong class="note">Note</strong>: 
   <span class="simpara">
    For our purposes here, a letter is a-z, A-Z, and the ASCII
    characters from 127 through 255 (0x7f-0xff).
   </span>
  </p></blockquote>

  <p class="simpara">
   Like <a href="language.variables.predefined.php" class="link">superglobals</a>, the scope of a constant is global.  You 
   can access constants anywhere in your script without regard to scope.  
   For more information on scope, read the manual section on
   <a href="language.variables.scope.php" class="link">variable scope</a>.
  </p>

  
  
  
 </div>

<section id="usernotes">
 <div class="head">
  <span class="action"><a href="/manual/add-note.php?sect=language.constants&amp;redirect=http://php.net/manual/en/language.constants.php"><img src='/images/notes-add@2x.png' alt='add a note' width='12' height='12'> <small>add a note</small></a></span>
  <h3 class="title">User Contributed Notes <span class="count">16 notes</span></h3>
 </div><div id="allnotes">
  <div class="note" id="108717">  <div class="votes">
    <div id="Vu108717">
    <a href="/manual/vote-note.php?id=108717&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd108717">
    <a href="/manual/vote-note.php?id=108717&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V108717" title="71% like this...">
    67
    </div>
  </div>
  <a href="#108717" class="name">
  <strong class="user"><em>wbcarts at juno dot com</em></strong></a><a class="genanchor" href="#108717"> &para;</a><div class="date" title="2012-05-20 03:04"><strong>3 years ago</strong></div>
  <div class="text" id="Hcom108717">
<div class="phpcode"><code><span class="html">
CONSTANTS and PHP Class Definitions<br /><br />Using "define('MY_VAR', 'default value')" INSIDE a class definition does not work. You have to use the PHP keyword 'const' and initialize it with a scalar value -- boolean, int, float, or string (no array or other object types) -- right away.<br /><br /><span class="default">&lt;?php<br /><br />define</span><span class="keyword">(</span><span class="string">'MIN_VALUE'</span><span class="keyword">, </span><span class="string">'0.0'</span><span class="keyword">);&nbsp;&nbsp; </span><span class="comment">// RIGHT - Works OUTSIDE of a class definition.<br /></span><span class="default">define</span><span class="keyword">(</span><span class="string">'MAX_VALUE'</span><span class="keyword">, </span><span class="string">'1.0'</span><span class="keyword">);&nbsp;&nbsp; </span><span class="comment">// RIGHT - Works OUTSIDE of a class definition.<br /><br />//const MIN_VALUE = 0.0;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; WRONG - Works INSIDE of a class definition.<br />//const MAX_VALUE = 1.0;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; WRONG - Works INSIDE of a class definition.<br /><br /></span><span class="keyword">class </span><span class="default">Constants<br /></span><span class="keyword">{<br />&nbsp; </span><span class="comment">//define('MIN_VALUE', '0.0');&nbsp; WRONG - Works OUTSIDE of a class definition.<br />&nbsp; //define('MAX_VALUE', '1.0');&nbsp; WRONG - Works OUTSIDE of a class definition.<br /><br />&nbsp; </span><span class="keyword">const </span><span class="default">MIN_VALUE </span><span class="keyword">= </span><span class="default">0.0</span><span class="keyword">;&nbsp; &nbsp; &nbsp; </span><span class="comment">// RIGHT - Works INSIDE of a class definition.<br />&nbsp; </span><span class="keyword">const </span><span class="default">MAX_VALUE </span><span class="keyword">= </span><span class="default">1.0</span><span class="keyword">;&nbsp; &nbsp; &nbsp; </span><span class="comment">// RIGHT - Works INSIDE of a class definition.<br /><br />&nbsp; </span><span class="keyword">public static function </span><span class="default">getMinValue</span><span class="keyword">()<br />&nbsp; {<br />&nbsp; &nbsp; return </span><span class="default">self</span><span class="keyword">::</span><span class="default">MIN_VALUE</span><span class="keyword">;<br />&nbsp; }<br /><br />&nbsp; public static function </span><span class="default">getMaxValue</span><span class="keyword">()<br />&nbsp; {<br />&nbsp; &nbsp; return </span><span class="default">self</span><span class="keyword">::</span><span class="default">MAX_VALUE</span><span class="keyword">;<br />&nbsp; }<br />}<br /><br /></span><span class="default">?&gt;<br /></span><br />#Example 1:<br />You can access these constants DIRECTLY like so:<br /> * type the class name exactly.<br /> * type two (2) colons.<br /> * type the const name exactly.<br /><br />#Example 2:<br />Because our class definition provides two (2) static functions, you can also access them like so:<br /> * type the class name exactly.<br /> * type two (2) colons.<br /> * type the function name exactly (with the parentheses).<br /><br /><span class="default">&lt;?php<br /><br /></span><span class="comment">#Example 1:<br /></span><span class="default">$min </span><span class="keyword">= </span><span class="default">Constants</span><span class="keyword">::</span><span class="default">MIN_VALUE</span><span class="keyword">;<br /></span><span class="default">$max </span><span class="keyword">= </span><span class="default">Constants</span><span class="keyword">::</span><span class="default">MAX_VALUE</span><span class="keyword">;<br /><br /></span><span class="comment">#Example 2:<br /></span><span class="default">$min </span><span class="keyword">= </span><span class="default">Constants</span><span class="keyword">::</span><span class="default">getMinValue</span><span class="keyword">();<br /></span><span class="default">$max </span><span class="keyword">= </span><span class="default">Constants</span><span class="keyword">::</span><span class="default">getMaxValue</span><span class="keyword">();<br /><br /></span><span class="default">?&gt;<br /></span><br />Once class constants are declared AND initialized, they cannot be set to different values -- that is why there are no setMinValue() and setMaxValue() functions in the class definition -- which means they are READ-ONLY and STATIC (shared by all instances of the class).</span>
</code></div>
  </div>
 </div>
  <div class="note" id="52008">  <div class="votes">
    <div id="Vu52008">
    <a href="/manual/vote-note.php?id=52008&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd52008">
    <a href="/manual/vote-note.php?id=52008&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V52008" title="60% like this...">
    11
    </div>
  </div>
  <a href="#52008" class="name">
  <strong class="user"><em>storm</em></strong></a><a class="genanchor" href="#52008"> &para;</a><div class="date" title="2005-04-18 09:54"><strong>10 years ago</strong></div>
  <div class="text" id="Hcom52008">
<div class="phpcode"><code><span class="html">
An undefined constant evaluates as true when not used correctly. Say for example you had something like this:<br /><br />settings.php<br /><span class="default">&lt;?php<br /></span><span class="comment">// Debug mode<br /></span><span class="default">define</span><span class="keyword">(</span><span class="string">'DEBUG'</span><span class="keyword">,</span><span class="default">false</span><span class="keyword">);<br /></span><span class="default">?&gt;<br /></span><br />test.php<br /><span class="default">&lt;?php<br /></span><span class="keyword">include(</span><span class="string">'settings.php'</span><span class="keyword">);<br /><br />if (</span><span class="default">DEBUG</span><span class="keyword">) {<br />&nbsp;&nbsp; </span><span class="comment">// echo some sensitive data.<br /></span><span class="keyword">}<br /></span><span class="default">?&gt;<br /></span><br />If for some reason settings.php doesn't get included and the DEBUG constant is not set, PHP will STILL print the sensitive data. The solution is to evaluate it. Like so:<br /><br />settings.php<br /><span class="default">&lt;?php<br /></span><span class="comment">// Debug mode<br /></span><span class="default">define</span><span class="keyword">(</span><span class="string">'DEBUG'</span><span class="keyword">,</span><span class="default">0</span><span class="keyword">);<br /></span><span class="default">?&gt;<br /></span><br />test.php<br /><span class="default">&lt;?php<br /></span><span class="keyword">include(</span><span class="string">'settings.php'</span><span class="keyword">);<br /><br />if (</span><span class="default">DEBUG </span><span class="keyword">== </span><span class="default">1</span><span class="keyword">) {<br />&nbsp;&nbsp; </span><span class="comment">// echo some sensitive data.<br /></span><span class="keyword">}<br /></span><span class="default">?&gt;<br /></span><br />Now it works correctly.</span>
</code></div>
  </div>
 </div>
  <div class="note" id="19363">  <div class="votes">
    <div id="Vu19363">
    <a href="/manual/vote-note.php?id=19363&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd19363">
    <a href="/manual/vote-note.php?id=19363&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V19363" title="61% like this...">
    9
    </div>
  </div>
  <a href="#19363" class="name">
  <strong class="user"><em>katana at katana-inc dot com</em></strong></a><a class="genanchor" href="#19363"> &para;</a><div class="date" title="2002-02-25 11:53"><strong>13 years ago</strong></div>
  <div class="text" id="Hcom19363">
<div class="phpcode"><code><span class="html">
Warning, constants used within the heredoc syntax (<a href="http://www.php.net/manual/en/language.types.string.php" rel="nofollow" target="_blank">http://www.php.net/manual/en/language.types.string.php</a>) are not interpreted!
<br />
<br />Editor's Note: This is true. PHP has no way of recognizing the constant from any other string of characters within the heredoc block.</span>
</code></div>
  </div>
 </div>
  <div class="note" id="35064">  <div class="votes">
    <div id="Vu35064">
    <a href="/manual/vote-note.php?id=35064&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd35064">
    <a href="/manual/vote-note.php?id=35064&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V35064" title="57% like this...">
    6
    </div>
  </div>
  <a href="#35064" class="name">
  <strong class="user"><em>ewspencer at industrex dot com</em></strong></a><a class="genanchor" href="#35064"> &para;</a><div class="date" title="2003-08-18 06:30"><strong>11 years ago</strong></div>
  <div class="text" id="Hcom35064">
<div class="phpcode"><code><span class="html">
I find using the concatenation operator helps disambiguate value assignments with constants. For example, setting constants in a global configuration file:
<br />
<br /><span class="default">&lt;?php
<br />define</span><span class="keyword">(</span><span class="string">'LOCATOR'</span><span class="keyword">,&nbsp;&nbsp; </span><span class="string">"/locator"</span><span class="keyword">);
<br /></span><span class="default">define</span><span class="keyword">(</span><span class="string">'CLASSES'</span><span class="keyword">,&nbsp;&nbsp; </span><span class="default">LOCATOR</span><span class="keyword">.</span><span class="string">"/code/classes"</span><span class="keyword">);
<br /></span><span class="default">define</span><span class="keyword">(</span><span class="string">'FUNCTIONS'</span><span class="keyword">, </span><span class="default">LOCATOR</span><span class="keyword">.</span><span class="string">"/code/functions"</span><span class="keyword">);
<br /></span><span class="default">define</span><span class="keyword">(</span><span class="string">'USERDIR'</span><span class="keyword">,&nbsp;&nbsp; </span><span class="default">LOCATOR</span><span class="keyword">.</span><span class="string">"/user"</span><span class="keyword">);
<br /></span><span class="default">?&gt;
<br /></span>
<br />Later, I can use the same convention when invoking a constant's value for static constructs such as require() calls:
<br />
<br /><span class="default">&lt;?php
<br /></span><span class="keyword">require_once(</span><span class="default">FUNCTIONS</span><span class="keyword">.</span><span class="string">"/database.fnc"</span><span class="keyword">);
<br />require_once(</span><span class="default">FUNCTIONS</span><span class="keyword">.</span><span class="string">"/randchar.fnc"</span><span class="keyword">);
<br /></span><span class="default">?&gt;
<br /></span>
<br />as well as dynamic constructs, typical of value assignment to variables:
<br />
<br /><span class="default">&lt;?php
<br />$userid&nbsp; </span><span class="keyword">= </span><span class="default">randchar</span><span class="keyword">(</span><span class="default">8</span><span class="keyword">,</span><span class="string">'anc'</span><span class="keyword">,</span><span class="string">'u'</span><span class="keyword">);
<br /></span><span class="default">$usermap </span><span class="keyword">= </span><span class="default">USERDIR</span><span class="keyword">.</span><span class="string">"/"</span><span class="keyword">.</span><span class="default">$userid</span><span class="keyword">.</span><span class="string">".png"</span><span class="keyword">;
<br /></span><span class="default">?&gt;
<br /></span>
<br />The above convention works for me, and helps produce self-documenting code.
<br />
<br />-- Erich</span>
</code></div>
  </div>
 </div>
  <div class="note" id="74836">  <div class="votes">
    <div id="Vu74836">
    <a href="/manual/vote-note.php?id=74836&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd74836">
    <a href="/manual/vote-note.php?id=74836&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V74836" title="54% like this...">
    3
    </div>
  </div>
  <a href="#74836" class="name">
  <strong class="user"><em>Andreas R.</em></strong></a><a class="genanchor" href="#74836"> &para;</a><div class="date" title="2007-04-30 07:19"><strong>8 years ago</strong></div>
  <div class="text" id="Hcom74836">
<div class="phpcode"><code><span class="html">
If you are looking for predefined constants like<br />* PHP_OS (to show the operating system, PHP was compiled for; php_uname('s') might be more suitable),<br />* DIRECTORY_SEPARATOR ("\\" on Win, '/' Linux,...)<br />* PATH_SEPARATOR (';' on Win, ':' on Linux,...)<br />they are buried in 'Predefined Constants' under 'List of Reserved Words' in the appendix:<br /><a href="http://www.php.net/manual/en/reserved.constants.php" rel="nofollow" target="_blank">http://www.php.net/manual/en/reserved.constants.php</a><br />while the latter two are also mentioned in 'Directory Functions'<br /><a href="http://www.php.net/manual/en/ref.dir.php" rel="nofollow" target="_blank">http://www.php.net/manual/en/ref.dir.php</a></span>
</code></div>
  </div>
 </div>
  <div class="note" id="115902">  <div class="votes">
    <div id="Vu115902">
    <a href="/manual/vote-note.php?id=115902&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd115902">
    <a href="/manual/vote-note.php?id=115902&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V115902" title="52% like this...">
    1
    </div>
  </div>
  <a href="#115902" class="name">
  <strong class="user"><em>alterg79 at gmail dot com</em></strong></a><a class="genanchor" href="#115902"> &para;</a><div class="date" title="2014-10-12 08:08"><strong>7 months ago</strong></div>
  <div class="text" id="Hcom115902">
<div class="phpcode"><code><span class="html">
There is a way to access a constant in heredoc.<br />Here is the example:<br /><span class="default">&lt;?php<br /><br />define</span><span class="keyword">(</span><span class="string">"__STR"</span><span class="keyword">,</span><span class="string">'constant.string.defined'</span><span class="keyword">);<br /><br />function </span><span class="default">heredocGetConstant</span><span class="keyword">(</span><span class="default">$constant</span><span class="keyword">) {<br />&nbsp; return </span><span class="default">constant</span><span class="keyword">(</span><span class="default">$constant</span><span class="keyword">);<br />}<br /><br /></span><span class="default">$heredocGetConstant </span><span class="keyword">= </span><span class="string">'heredocGetConstant'</span><span class="keyword">;<br /><br /></span><span class="default">$my_string </span><span class="keyword">= &lt;&lt;&lt;EOT<br /></span><span class="string">This is my constant printed from heredoc: </span><span class="keyword">{</span><span class="default">$heredocGetConstant</span><span class="keyword">(</span><span class="string">'__STR'</span><span class="keyword">)}</span><span class="string"><br /></span><span class="keyword">EOT;<br /><br />echo </span><span class="default">$my_string</span><span class="keyword">;<br /><br /></span><span class="default">Output</span><span class="keyword">:<br /></span><span class="default">This is my constant printed from heredoc</span><span class="keyword">: </span><span class="default">constant</span><span class="keyword">.</span><span class="default">string</span><span class="keyword">.</span><span class="default">defined</span>
</span>
</code></div>
  </div>
 </div>
  <div class="note" id="59936">  <div class="votes">
    <div id="Vu59936">
    <a href="/manual/vote-note.php?id=59936&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd59936">
    <a href="/manual/vote-note.php?id=59936&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V59936" title="53% like this...">
    3
    </div>
  </div>
  <a href="#59936" class="name">
  <strong class="user"><em>anj at aps dot anl dot gov</em></strong></a><a class="genanchor" href="#59936"> &para;</a><div class="date" title="2005-12-20 08:42"><strong>9 years ago</strong></div>
  <div class="text" id="Hcom59936">
<div class="phpcode"><code><span class="html">
It is possible to define constants that have the same name as a built-in PHP keyword, although subsequent attempts to actually use these constants will cause a parse error. For example in PHP 5.1.1, this code<br /><br />&nbsp; &nbsp; <span class="default">&lt;?php<br />&nbsp; &nbsp; define</span><span class="keyword">(</span><span class="string">"PUBLIC"</span><span class="keyword">, </span><span class="string">"Hello, world!"</span><span class="keyword">);<br />&nbsp; &nbsp; echo PUBLIC;<br />&nbsp; &nbsp; </span><span class="default">?&gt;<br /></span><br />gives the error<br /><br />&nbsp; &nbsp; Parse error: syntax error, unexpected T_PUBLIC in test.php on line 3<br /><br />This is a problem to be aware of when converting PHP4 applications to PHP5, since that release introduced several new keywords that used to be legal names for constants.</span>
</code></div>
  </div>
 </div>
  <div class="note" id="114762">  <div class="votes">
    <div id="Vu114762">
    <a href="/manual/vote-note.php?id=114762&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd114762">
    <a href="/manual/vote-note.php?id=114762&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V114762" title="51% like this...">
    1
    </div>
  </div>
  <a href="#114762" class="name">
  <strong class="user"><em>php at webflips dot net</em></strong></a><a class="genanchor" href="#114762"> &para;</a><div class="date" title="2014-04-02 08:03"><strong>1 year ago</strong></div>
  <div class="text" id="Hcom114762">
<div class="phpcode"><code><span class="html">
It is perfectly valid to use a built-in PHP keyword as a constant name - as long as you the constant() function to retrieve it later:<br /><br /><span class="default">&lt;?php<br />define</span><span class="keyword">(</span><span class="string">'echo'</span><span class="keyword">, </span><span class="string">'My constant value'</span><span class="keyword">);<br /><br />echo </span><span class="default">constant</span><span class="keyword">(</span><span class="string">'echo'</span><span class="keyword">); </span><span class="comment">// outputs 'My constant value'<br /></span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
  <div class="note" id="52133">  <div class="votes">
    <div id="Vu52133">
    <a href="/manual/vote-note.php?id=52133&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd52133">
    <a href="/manual/vote-note.php?id=52133&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V52133" title="53% like this...">
    2
    </div>
  </div>
  <a href="#52133" class="name">
  <strong class="user"><em>hafenator2000 at yahoo dot com</em></strong></a><a class="genanchor" href="#52133"> &para;</a><div class="date" title="2005-04-21 02:09"><strong>10 years ago</strong></div>
  <div class="text" id="Hcom52133">
<div class="phpcode"><code><span class="html">
PHP Modules also define constants.&nbsp; Make sure to avoid constant name collisions.&nbsp; There are two ways to do this that I can think of.<br />First: in your code make sure that the constant name is not already used.&nbsp; ex. <span class="default">&lt;?php </span><span class="keyword">if (! </span><span class="default">defined</span><span class="keyword">(</span><span class="string">"CONSTANT_NAME"</span><span class="keyword">)) { </span><span class="default">Define</span><span class="keyword">(</span><span class="string">"CONSTANT_NAME"</span><span class="keyword">,</span><span class="string">"Some Value"</span><span class="keyword">); } </span><span class="default">?&gt;</span>&nbsp; This can get messy when you start thinking about collision handling, and the implications of this.<br />Second: Use some off prepend to all your constant names without exception&nbsp; ex. <span class="default">&lt;?php Define</span><span class="keyword">(</span><span class="string">"SITE_CONSTANT_NAME"</span><span class="keyword">,</span><span class="string">"Some Value"</span><span class="keyword">); </span><span class="default">?&gt;<br /></span><br />Perhaps the developers or documentation maintainers could recommend a good prepend and ask module writers to avoid that prepend in modules.</span>
</code></div>
  </div>
 </div>
  <div class="note" id="116749">  <div class="votes">
    <div id="Vu116749">
    <a href="/manual/vote-note.php?id=116749&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd116749">
    <a href="/manual/vote-note.php?id=116749&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V116749" title="100% like this...">
    1
    </div>
  </div>
  <a href="#116749" class="name">
  <strong class="user"><em>Raheel Khan</em></strong></a><a class="genanchor" href="#116749"> &para;</a><div class="date" title="2015-02-22 08:39"><strong>2 months ago</strong></div>
  <div class="text" id="Hcom116749">
<div class="phpcode"><code><span class="html">
class constant are by default public in nature but they cannot be assigned visibility factor and in turn gives syntax error<br /><br /><span class="default">&lt;?php<br /><br /></span><span class="keyword">class </span><span class="default">constants </span><span class="keyword">{<br /><br />&nbsp; &nbsp; const </span><span class="default">MAX_VALUE </span><span class="keyword">= </span><span class="default">10</span><span class="keyword">;<br />&nbsp; &nbsp; &nbsp; &nbsp; public const </span><span class="default">MIN_VALUE </span><span class="keyword">=</span><span class="default">1</span><span class="keyword">;<br /><br />}<br /><br /></span><span class="comment">// This will work<br /></span><span class="keyword">echo </span><span class="default">constants</span><span class="keyword">::</span><span class="default">MAX_VALUE</span><span class="keyword">;<br /><br /></span><span class="comment">// This will return syntax error <br /></span><span class="keyword">echo </span><span class="default">constants</span><span class="keyword">::</span><span class="default">MIN_VALUE</span><span class="keyword">; <br /></span><span class="default">?&gt;</span>
</span>
</code></div>
  </div>
 </div>
  <div class="note" id="76304">  <div class="votes">
    <div id="Vu76304">
    <a href="/manual/vote-note.php?id=76304&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd76304">
    <a href="/manual/vote-note.php?id=76304&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V76304" title="45% like this...">
    -3
    </div>
  </div>
  <a href="#76304" class="name">
  <strong class="user"><em>tudor at tudorholton dot com</em></strong></a><a class="genanchor" href="#76304"> &para;</a><div class="date" title="2007-07-09 05:15"><strong>7 years ago</strong></div>
  <div class="text" id="Hcom76304">
<div class="phpcode"><code><span class="html">
Note that constant name must always be quoted when defined.<br /><br />e.g.<br />define('MY_CONST','blah') - correct<br />define(MY_CONST,'blah') - incorrect<br /><br />The following error message also indicates this fact:<br />Notice:&nbsp; Use of undefined constant MY_CONST - assumed 'MY_CONST' in included_script.php on line 5<br /><br />Note the error message gives you some incorrect information.&nbsp;&nbsp; 'MY_CONST' (with quotes) doesn't actually exist anywhere in your code.&nbsp; The error _is_ that you didn't quote the constant when you defined it in the 'assumed' file.</span>
</code></div>
  </div>
 </div>
  <div class="note" id="36875">  <div class="votes">
    <div id="Vu36875">
    <a href="/manual/vote-note.php?id=36875&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd36875">
    <a href="/manual/vote-note.php?id=36875&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V36875" title="45% like this...">
    -2
    </div>
  </div>
  <a href="#36875" class="name">
  <strong class="user"><em>kumar at farmdev</em></strong></a><a class="genanchor" href="#36875"> &para;</a><div class="date" title="2003-10-25 05:59"><strong>11 years ago</strong></div>
  <div class="text" id="Hcom36875">
<div class="phpcode"><code><span class="html">
before embarking on creating a language system I wanted to see if there was any speed advantage to defining language strings as constants vs. variables or array items.&nbsp; It is more logical to define language strings as constants but you have more flexibility using variables or arrays in your code (i.e. they can be accessed directly, concatenated, used in quotes, used in heredocs whereas constants can only be accessed directly or concatenated).<br /><br />Results of the test:<br />declaring as $Variable is fastest<br />declaring with define() is second fastest<br />declaring as $Array['Item'] is slowest<br /><br />=======================================<br />the test was done using PHP 4.3.2, Apache 1.3.27, and the ab (apache bench) tool.<br />100 requests (1 concurrent) were sent to one php file that includes 15 php files each containing 100 unique declarations of a language string.<br /><br />Example of each declaration ("Variable" numbered 1 - 1500):<br /><span class="default">&lt;?php<br />$GLOBALS</span><span class="keyword">[</span><span class="string">'Variable1'</span><span class="keyword">] = </span><span class="string">"A whole lot of text for this variable as if it were a language string containing a whole lot of text"</span><span class="keyword">;<br /></span><span class="default">?&gt;<br />&lt;?php<br />define</span><span class="keyword">(</span><span class="string">'Variable1' </span><span class="keyword">, </span><span class="string">"A whole lot of text for this variable as if it were a language string containing a whole lot of text"</span><span class="keyword">);<br /></span><span class="default">?&gt;<br />&lt;?php<br />$GLOBALS</span><span class="keyword">[</span><span class="string">'CP_Lang'</span><span class="keyword">][</span><span class="string">'Variable1'</span><span class="keyword">] = </span><span class="string">"A whole lot of text for this variable as if it were a language string containing a whole lot of text"</span><span class="keyword">;<br /></span><span class="default">?&gt;<br /></span><br />Here are the exact averages of each ab run of 100 requests (averages based on 6 runs):<br />variable (24.956 secs)<br />constant (25.426 secs)<br />array (28.141)<br /><br />(not huge differences but good to know that using variables won't take a huge performance hit)</span>
</code></div>
  </div>
 </div>
  <div class="note" id="79431">  <div class="votes">
    <div id="Vu79431">
    <a href="/manual/vote-note.php?id=79431&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd79431">
    <a href="/manual/vote-note.php?id=79431&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V79431" title="44% like this...">
    -3
    </div>
  </div>
  <a href="#79431" class="name">
  <strong class="user"><em>ben at bendodson dot com</em></strong></a><a class="genanchor" href="#79431"> &para;</a><div class="date" title="2007-11-27 03:14"><strong>7 years ago</strong></div>
  <div class="text" id="Hcom79431">
<div class="phpcode"><code><span class="html">
I recently found I needed a way of retrieving the value of a constant dynamically - e.g. trying to find the value of FOO_BAR by passing 'FOO_' . $someVariableWithValueBAR.&nbsp; I came up with the following solution:<br /><br /><span class="default">&lt;?php<br /><br />define</span><span class="keyword">(</span><span class="string">'FOO_BAR'</span><span class="keyword">,</span><span class="string">'It works!'</span><span class="keyword">);<br /></span><span class="default">define</span><span class="keyword">(</span><span class="string">'FOO_FOO_BAR'</span><span class="keyword">,</span><span class="string">'It works again!'</span><span class="keyword">);<br /><br /></span><span class="comment">// prints 'It works!'<br /></span><span class="default">$changing_variable </span><span class="keyword">= </span><span class="string">'bar'</span><span class="keyword">;<br />echo </span><span class="default">constant</span><span class="keyword">(</span><span class="string">'FOO_' </span><span class="keyword">. </span><span class="default">strtoupper</span><span class="keyword">(</span><span class="default">$changing_variable</span><span class="keyword">));<br /><br /></span><span class="comment">// prints 'It works again!'<br /></span><span class="default">$changing_variable </span><span class="keyword">= </span><span class="string">'foo_bar'</span><span class="keyword">;<br />echo </span><span class="default">constant</span><span class="keyword">(</span><span class="string">'FOO_' </span><span class="keyword">. </span><span class="default">strtoupper</span><span class="keyword">(</span><span class="default">$changing_variable</span><span class="keyword">));<br /><br /></span><span class="default">?&gt;<br /></span><br />Note the use of strtoupper() as constants should be defined in uppercase for good practice - feel free to remove if you have constants defined in lowercase or you can set $changing_variable as uppercase.<br /><br />Might be of some use to someone!</span>
</code></div>
  </div>
 </div>
  <div class="note" id="73339">  <div class="votes">
    <div id="Vu73339">
    <a href="/manual/vote-note.php?id=73339&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd73339">
    <a href="/manual/vote-note.php?id=73339&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V73339" title="41% like this...">
    -3
    </div>
  </div>
  <a href="#73339" class="name">
  <strong class="user"><em>pdenny at magmic dot com</em></strong></a><a class="genanchor" href="#73339"> &para;</a><div class="date" title="2007-02-18 09:46"><strong>8 years ago</strong></div>
  <div class="text" id="Hcom73339">
<div class="phpcode"><code><span class="html">
Note that constants can also be used as default argument values
<br />so the following code:
<br />
<br /><span class="default">&lt;?php
<br />&nbsp; define</span><span class="keyword">(</span><span class="string">'TEST_CONSTANT'</span><span class="keyword">,</span><span class="string">'Works!'</span><span class="keyword">);
<br />&nbsp; function </span><span class="default">testThis</span><span class="keyword">(</span><span class="default">$var</span><span class="keyword">=</span><span class="default">TEST_CONSTANT</span><span class="keyword">) {
<br />&nbsp; &nbsp; &nbsp; echo </span><span class="string">"Passing constants as default values </span><span class="default">$var</span><span class="string">"</span><span class="keyword">;
<br />&nbsp; }
<br />&nbsp; </span><span class="default">testThis</span><span class="keyword">();
<br /></span><span class="default">?&gt;
<br /></span>
<br />will produce :
<br />
<br />Passing constants as default values Works!
<br />
<br />(I tried this in both PHP 4 and 5)</span>
</code></div>
  </div>
 </div>
  <div class="note" id="56756">  <div class="votes">
    <div id="Vu56756">
    <a href="/manual/vote-note.php?id=56756&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd56756">
    <a href="/manual/vote-note.php?id=56756&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V56756" title="38% like this...">
    -7
    </div>
  </div>
  <a href="#56756" class="name">
  <strong class="user"><em>kencomer at NOSPAM dot kencomer dot com</em></strong></a><a class="genanchor" href="#56756"> &para;</a><div class="date" title="2005-09-14 05:38"><strong>9 years ago</strong></div>
  <div class="text" id="Hcom56756">
<div class="phpcode"><code><span class="html">
Being a belt and suspenders person, when I use a constant to do flow control (i.e., using constants to determine which version of a section of the program should be used), I always use something like:
<br />
<br />if ( defined('DEBUG') &amp;&amp; TRUE===DEBUG )
<br />
<br />If you accidentally use DEBUG somewhere before it is defined, PHP will create a new constant called DEBUG with the value 'DEBUG'. Adding the second comparison will prevent the expression from being TRUE when you did not intentionally create the constant. For the constant DEBUG, this would rarely be a problem, but if you had (e.g.) a constant used to determine whether a function was created using case-sensitive comparisons, an accidental creation of the constant IGNORE_CASE having the value 'IGNORE_CASE' could drive you up the wall trying to find out what went wrong, particularly if you had warnings turned off.
<br />
<br />In almost all code I write, I put this function definition in my configuration section:
<br />
<br /><span class="default">&lt;?php
<br /></span><span class="keyword">if (!</span><span class="default">function_exists</span><span class="keyword">(</span><span class="string">"debug_print"</span><span class="keyword">)) {
<br />&nbsp; if ( </span><span class="default">defined</span><span class="keyword">(</span><span class="string">'DEBUG'</span><span class="keyword">) &amp;&amp; </span><span class="default">TRUE</span><span class="keyword">===</span><span class="default">DEBUG </span><span class="keyword">) {
<br />&nbsp; &nbsp; function </span><span class="default">debug_print</span><span class="keyword">(</span><span class="default">$string</span><span class="keyword">,</span><span class="default">$flag</span><span class="keyword">=</span><span class="default">NULL</span><span class="keyword">) {
<br />&nbsp; &nbsp; &nbsp; </span><span class="comment">/* if second argument is absent or TRUE, print */
<br />&nbsp; &nbsp; &nbsp; </span><span class="keyword">if ( !(</span><span class="default">FALSE</span><span class="keyword">===</span><span class="default">$flag</span><span class="keyword">) )
<br />&nbsp; &nbsp; &nbsp; &nbsp; print </span><span class="string">'DEBUG: '</span><span class="keyword">.</span><span class="default">$string </span><span class="keyword">. </span><span class="string">"\n"</span><span class="keyword">;
<br />&nbsp; &nbsp; }
<br />&nbsp; } else {
<br />&nbsp; &nbsp; function </span><span class="default">debug_print</span><span class="keyword">(</span><span class="default">$string</span><span class="keyword">,</span><span class="default">$flag</span><span class="keyword">=</span><span class="default">NULL</span><span class="keyword">) {
<br />&nbsp; &nbsp; }
<br />&nbsp; }
<br />}
<br /></span><span class="default">?&gt;
<br /></span>
<br />Then, in my code, I'll sprinkle liberal doses of debug code like :
<br />
<br /><span class="default">&lt;?php
<br />define</span><span class="keyword">(</span><span class="string">"DEBUG_TRACK_EXAMPLE_CREATION"</span><span class="keyword">,</span><span class="default">FALSE</span><span class="keyword">);
<br />class </span><span class="default">Example </span><span class="keyword">extends </span><span class="default">Something </span><span class="keyword">{
<br />&nbsp; </span><span class="default">__construct</span><span class="keyword">(</span><span class="default">$whatever</span><span class="keyword">) {
<br />&nbsp; &nbsp; </span><span class="default">debug_print</span><span class="keyword">( </span><span class="string">"new instance of Example created with '</span><span class="default">$whatever</span><span class="string">'\n"</span><span class="keyword">,</span><span class="default">DEBUG_TRACK_EXAMPLE_CREATION</span><span class="keyword">);
<br />&nbsp; }
<br />}
<br /></span><span class="default">?&gt;
<br /></span>
<br />and :
<br />
<br /><span class="default">&lt;?php
<br />debug_print</span><span class="keyword">(</span><span class="string">"finished init.\n"</span><span class="keyword">);
<br /></span><span class="default">?&gt;
<br /></span>
<br />In the first case, I would not want to see that message every time I went into DEBUG mode, so I made it a special case. The second case is always printed in DEBUG mode. If I decide to turn everything on, special cases and all, all I have to do is comment out the "if" line in debug_print() and presto magicko! It costs a little and gains a lot.
<br />
<br />As another belt-and-suspenders aside, notice that, unlike most people, I put the language constant (e.g.,TRUE, "string", etc.) on the left side of the comparison. By doing that, you can never accidentally do something like 
<br />&nbsp; if ( $hard_to_find_error="here" )
<br />
<br />because you always write it as 
<br />&nbsp; if ( "here"==$no_error )
<br />
<br />or, if you got it wrong,
<br />&nbsp; if ( "here"=$easy_to_find_parse_error )</span>
</code></div>
  </div>
 </div>
  <div class="note" id="62253">  <div class="votes">
    <div id="Vu62253">
    <a href="/manual/vote-note.php?id=62253&amp;page=language.constants&amp;vote=up" title="Vote up!" class="usernotes-voteu">up</a>
    </div>
    <div id="Vd62253">
    <a href="/manual/vote-note.php?id=62253&amp;page=language.constants&amp;vote=down" title="Vote down!" class="usernotes-voted">down</a>
    </div>
    <div class="tally" id="V62253" title="37% like this...">
    -9
    </div>
  </div>
  <a href="#62253" class="name">
  <strong class="user"><em>martin at larsen dot dk</em></strong></a><a class="genanchor" href="#62253"> &para;</a><div class="date" title="2006-02-23 02:24"><strong>9 years ago</strong></div>
  <div class="text" id="Hcom62253">
<div class="phpcode"><code><span class="html">
I find variables much more flexible than constants because variables can be used inside quotes and heredocs etc. Especially for language systems, this is nice.<br /><br />As stated in one of the previous notes, there is no speed penalty by using variables. However, one issue is that you risc name collision with existing variables. When implementing a language system I simply found that adding a prefix to all the variables was the way to go, for example:<br /><br />$LNG_myvar1 = "my value";<br /><br />That is easier and performs faster than using arrays like<br /><br />$LNG['myvar'] = "my value";<br /><br />As a final note, implementing a new superglobal in PHP would make using constants much more beneficial. Then it could be used in qoutes like this:<br /><br />"The constant myconst has the value $CONSTANTS[myconst] !"</span>
</code></div>
  </div>
 </div></div>

 <div class="foot"><a href="/manual/add-note.php?sect=language.constants&amp;redirect=http://php.net/manual/en/language.constants.php"><img src='/images/notes-add@2x.png' alt='add a note' width='12' height='12'> <small>add a note</small></a></div>
</section>    </section><!-- layout-content -->
        <aside class='layout-menu'>
    
        <ul class='parent-menu-list'>
                                    <li>
                <a href="langref.php">Language Reference</a>
    
                                    <ul class='child-menu-list'>
    
                          
                        <li class="">
                            <a href="language.basic-syntax.php" title="Basic syntax">Basic syntax</a>
                        </li>
                          
                        <li class="">
                            <a href="language.types.php" title="Types">Types</a>
                        </li>
                          
                        <li class="">
                            <a href="language.variables.php" title="Variables">Variables</a>
                        </li>
                          
                        <li class="current">
                            <a href="language.constants.php" title="Constants">Constants</a>
                        </li>
                          
                        <li class="">
                            <a href="language.expressions.php" title="Expressions">Expressions</a>
                        </li>
                          
                        <li class="">
                            <a href="language.operators.php" title="Operators">Operators</a>
                        </li>
                          
                        <li class="">
                            <a href="language.control-structures.php" title="Control Structures">Control Structures</a>
                        </li>
                          
                        <li class="">
                            <a href="language.functions.php" title="Functions">Functions</a>
                        </li>
                          
                        <li class="">
                            <a href="language.oop5.php" title="Classes and Objects">Classes and Objects</a>
                        </li>
                          
                        <li class="">
                            <a href="language.namespaces.php" title="Namespaces">Namespaces</a>
                        </li>
                          
                        <li class="">
                            <a href="language.exceptions.php" title="Exceptions">Exceptions</a>
                        </li>
                          
                        <li class="">
                            <a href="language.generators.php" title="Generators">Generators</a>
                        </li>
                          
                        <li class="">
                            <a href="language.references.php" title="References Explained">References Explained</a>
                        </li>
                          
                        <li class="">
                            <a href="reserved.variables.php" title="Predefined Variables">Predefined Variables</a>
                        </li>
                          
                        <li class="">
                            <a href="reserved.exceptions.php" title="Predefined Exceptions">Predefined Exceptions</a>
                        </li>
                          
                        <li class="">
                            <a href="reserved.interfaces.php" title="Predefined Interfaces and Classes">Predefined Interfaces and Classes</a>
                        </li>
                          
                        <li class="">
                            <a href="context.php" title="Context options and parameters">Context options and parameters</a>
                        </li>
                          
                        <li class="">
                            <a href="wrappers.php" title="Supported Protocols and Wrappers">Supported Protocols and Wrappers</a>
                        </li>
                            
                    </ul>
                    
            </li>
                        
                    </ul>
    </aside>


  </div><!-- layout -->
         
  <footer>
    <div class="container footer-content">
      <div class="row-fluid">
      <ul class="footmenu">
        <li><a href="/copyright.php">Copyright &copy; 2001-2015 The PHP Group</a></li>
        <li><a href="/my.php">My PHP.net</a></li>
        <li><a href="/contact.php">Contact</a></li>
        <li><a href="/sites.php">Other PHP.net sites</a></li>
        <li><a href="/mirrors.php">Mirror sites</a></li>
        <li><a href="/privacy.php">Privacy policy</a></li>
      </ul>
      </div>
    </div>
  </footer>

    
 <!-- External and third party libraries. -->
 <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script type="text/javascript" src="http://php.net/cached.php?t=1421837618&amp;f=/js/ext/modernizr.js"></script>
<script type="text/javascript" src="http://php.net/cached.php?t=1421837618&amp;f=/js/ext/hogan-2.0.0.min.js"></script>
<script type="text/javascript" src="http://php.net/cached.php?t=1421837618&amp;f=/js/ext/typeahead.min.js"></script>
<script type="text/javascript" src="http://php.net/cached.php?t=1421837618&amp;f=/js/ext/mousetrap.min.js"></script>
<script type="text/javascript" src="http://php.net/cached.php?t=1421837618&amp;f=/js/search.js"></script>
<script type="text/javascript" src="http://php.net/cached.php?t=1430413803&amp;f=/js/common.js"></script>

<a id="toTop" href="javascript:;"><span id="toTopHover"></span><img width="40" height="40" alt="To Top" src="/images/to-top@2x.png"></a>

</body>
</html>


