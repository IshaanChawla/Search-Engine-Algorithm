<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>9.8 &#8212; Overloading the subscript operator &laquo; Learn C++</title>
	<link rel="shortcut icon" href="http://www.learncpp.com/blog/wp-content/ata-images/learncpp.ico" />
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; Feed" href="http://www.learncpp.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; Comments Feed" href="http://www.learncpp.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 9.8 &#8212; Overloading the subscript operator Comments Feed" href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"http:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"http:\/\/www.learncpp.com\/blog\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.2.2"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='crayon-css'  href='http://www.learncpp.com/blog/wp-content/plugins/crayon-syntax-highlighter/css/min/crayon.min.css?ver=2.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='crayon-theme-familiar-learncppcom-css'  href='http://www.learncpp.com/blog/wp-content/uploads/crayon-syntax-highlighter/themes/familiar-learncppcom/familiar-learncppcom.css?ver=2.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='crayon-font-monaco-css'  href='http://www.learncpp.com/blog/wp-content/plugins/crayon-syntax-highlighter/fonts/monaco.css?ver=2.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='genericons-css'  href='http://www.learncpp.com/blog/wp-content/plugins/jetpack/_inc/genericons/genericons/genericons.css?ver=3.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack_css-css'  href='http://www.learncpp.com/blog/wp-content/plugins/jetpack/css/jetpack.css?ver=3.5.3' type='text/css' media='all' />
<!-- This site uses the Google Analytics by Yoast plugin v5.4.2 - Universal disabled - https://yoast.com/wordpress/plugins/google-analytics/ -->
<script type="text/javascript">

	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_gat._forceSSL']);
	_gaq.push(['_trackPageview']);

	(function () {
		var ga = document.createElement('script');
		ga.type = 'text/javascript';
		ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0];
		s.parentNode.insertBefore(ga, s);
	})();

</script>
<!-- / Google Analytics by Yoast -->
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-includes/js/jquery/jquery.js?ver=1.11.2'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var AjaxCheckClicks = {"ajaxurl":"http:\/\/www.learncpp.com\/blog\/wp-admin\/admin-ajax.php","nonce":"12738d6e92"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/adsense-click-fraud-monitoring/js/checkclicks.js?ver=4.2.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var AjaxUpdateClicks = {"ajaxurl":"http:\/\/www.learncpp.com\/blog\/wp-admin\/admin-ajax.php","nonce":"441c3b4826"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/adsense-click-fraud-monitoring/js/updateclicks.js?ver=4.2.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var CrayonSyntaxSettings = {"version":"2.7.1","is_admin":"0","ajaxurl":"http:\/\/www.learncpp.com\/blog\/wp-admin\/admin-ajax.php","prefix":"crayon-","setting":"crayon-setting","selected":"crayon-setting-selected","changed":"crayon-setting-changed","special":"crayon-setting-special","orig_value":"data-orig-value","debug":""};
var CrayonSyntaxStrings = {"copy":"Press %s to Copy, %s to Paste","minimize":"Click To Expand Code"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/crayon-syntax-highlighter/js/min/crayon.min.js?ver=2.7.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var clientcfmonitor = {"client_ip":"203.45.39.152","clickcount":"8","bannedperiod":"1","preurl":"http:\/\/www.learncpp.com\/blog\/wp-content\/plugins\/adsense-click-fraud-monitoring\/clickupdate.php","firstclickdate":[[""],[""]],"updatedVisitCount":"0","isblockedcount":"0","customclass":"cf_monitor","firstclick":"false","disablead":"false","currentURL":"\/cpp-tutorial\/98-overloading-the-subscript-operator\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/adsense-click-fraud-monitoring/js/check_min.js?ver=4.2.2'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/themes/atahualpa/js/DD_roundies.js?ver=0.0.2a'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.learncpp.com/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='9.7 &#8212; Overloading the increment and decrement operators' href='http://www.learncpp.com/cpp-tutorial/97-overloading-the-increment-and-decrement-operators/' />
<link rel='next' title='7.12 &#8212; Handling errors (assert, cerr, exit, and exceptions)' href='http://www.learncpp.com/cpp-tutorial/712-handling-errors-assert-cerr-exit-and-exceptions/' />
<link rel='canonical' href='http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/' />
<link rel='shortlink' href='http://www.learncpp.com/?p=146' />
<script type="text/javascript">
    window._mNHandle = window._mNHandle || {};
    window._mNHandle.queue = window._mNHandle.queue || [];
    medianet_versionId = "121199"; 
    (function() {
        var sct = document.createElement("script"),
        sctHl = document.getElementsByTagName("script")[0],
        isSSL = 'https:' == document.location.protocol;
        sct.type = "text/javascript";
        sct.src = (isSSL ? 'https:' : 'http:') + '//contextual.media.net/dmedianet.js?cid=8CUIE2148' + (isSSL ? '&https=1' : '')+'';
        sct.async = "async";
        sctHl.parentNode.insertBefore(sct, sctHl);
    })();
</script>
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type='text/css'>img#wpstats{display:none}</style><style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#bbb;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:100%}div#container{padding:20px;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:10px}.coltwo{width:100% }.colthree-inner{width:10px}.colthree{width:200px}div#header.full-width{width:100%}div#header,td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.comments-icon:active,a.comments-icon:visited{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container-pre{position:relative;margin:0;padding:0;height:150px;}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.codeoverlay{position:absolute;top:0;left:0;width:100%;height:100%}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:10px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:10px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;background:#fff;padding-left:15px!important;padding-right:15px!important;border:solid 4px #eee}div#footer.full-width{width:100%}div#footer,td#footer{width:auto;background-color:#f7f7f7;border:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px;margin-left:220px;margin-right:220px;margin-top:20px;width:auto!important}div#footer a:link,div#footer a:visited,div#footer a:active,td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}div#footer a:hover,td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee;background:#fff}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto;background:#fff}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget a:link,div.widget a:visited,div.widget a:active,div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget a:hover,div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_nav_menu ul li,div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_nav_menu ul li a:link,div.widget_nav_menu ul li a:visited,div.widget_nav_menu ul li a:active,div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_nav_menu ul li a:hover,div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_nav_menu ul li ul li a:link,div.widget_nav_menu ul li ul li a:visited,div.widget_nav_menu ul li ul li a:active,div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_nav_menu ul li ul li a:hover,div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_nav_menu ul li ul li ul li a:link,div.widget_nav_menu ul li ul li ul li a:visited,div.widget_nav_menu ul li ul li ul li a:active,div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_nav_menu ul li ul li ul li a:hover,div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_nav_menu ul li a:link,div.widget_nav_menu ul li a:active,div.widget_nav_menu ul li a:visited,div.widget_nav_menu ul li a:hover,div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;padding-top:20px}div.sticky{background:#eee url('<?php bloginfo('template_directory');?>/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button,input[type=submit]{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}input.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}p.thesetags{margin:10px 0}h3.reply,h3#reply-title{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:inline-block !important;background:url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;border-radius:5px;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}.post img.size-full{max-width:96%;width:auto;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colone-inner,.colthree-inner,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0;display:none}td#middle{width:100% !important;display:block}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.sub-menu li,ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}.page-id-8 .post-headline{display:none;} div.useCode{background:linear-gradient(#FFFF66,#CCCC00);border-radius:8px;padding-left:10px;padding-right:10px;padding-top:2px;padding-bottom:2px;font-size:10pt;text-align:left;display:inline-block;font-weight:550;}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('<?php bloginfo('template_directory');?>/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}ul{list-style-position:inside}</style>
<script type="text/javascript">
//<![CDATA[



/* JQUERY */
jQuery(document).ready(function(){ 
    
   
  

	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	
	
	/* Since 3.7.8: Auto resize videos (embed and iframe elements) 
	TODO: Parse parent's dimensions only once per layout column, not per video
	*/
	function bfa_resize_video() {
		jQuery('embed, iframe').each( function() {
			var video = jQuery(this),
			videoWidth = video.attr('width'); // use the attr here, not width() or css()
			videoParent = video.parent(),
			videoParentWidth = parseFloat( videoParent.css( 'width' ) ),
			videoParentBorder = parseFloat( videoParent.css( 'border-left-width' ) ) 
										+  parseFloat( videoParent.css( 'border-right-width' ) ),
			videoParentPadding = parseFloat( videoParent.css( 'padding-left' ) ) 
										+  parseFloat( videoParent.css( 'padding-right' ) ),
			maxWidth = videoParentWidth - videoParentBorder - videoParentPadding;

			if( videoWidth > maxWidth ) {
				var videoHeight = video.attr('height'),
				videoMaxHeight = ( maxWidth / videoWidth * videoHeight );
				video.attr({ width: maxWidth, height: videoMaxHeight });
			} 

		});	
	}
	bfa_resize_video();
	jQuery(window).resize( bfa_resize_video );

		
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button, input#submit").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>

<!--[if IE 6]>
<script type="text/javascript">DD_roundies.addRule("a.posts-icon, a.comments-icon, a.email-icon, img.logo");</script>
<![endif]-->

<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="9.8 -- Overloading the subscript operator" />
<meta property="og:url" content="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/" />
<meta property="og:description" content="When working with arrays, we typically use the subscript operator ([]) to index specific elements of an array: [crayon-555d7882d9bf0180738945/] However, consider the following IntList class, which ..." />
<meta property="article:published_time" content="2007-10-19T17:50:10+00:00" />
<meta property="article:modified_time" content="2007-10-19T17:50:10+00:00" />
<meta property="article:author" content="http://www.learncpp.com/author/alex/" />
<meta property="og:site_name" content="Learn C++" />
<meta property="og:image" content="http://www.learncpp.com/images/CppTutorial/next.png" />
<meta property="og:image" content="http://www.learncpp.com/images/CppTutorial/up.png" />
<meta property="og:image" content="http://www.learncpp.com/images/CppTutorial/prev.png" />
<meta property="og:locale" content="en_US" />
<meta name="twitter:image" content="http://www.learncpp.com/images/CppTutorial/next.png?w=240" />
<meta name="twitter:card" content="summary" />
</head>
<body class="single single-post postid-146 single-format-standard category-cpp-tutorial">

		<!-- Full Width Header -->
		<div id="header" class="full-width">
		<div id="imagecontainer-pre" class="header-image-container-pre">    <div id="imagecontainer" class="header-image-container" style="background: url('http://www.learncpp.com/blog/wp-content/ata-images/header/LearnCppHeader3_800.jpg') top center no-repeat;"></div><div class="clickable"><a class="divclick" title="Learn C++" href ="http://www.learncpp.com/">&nbsp;</a></div><div class="codeoverlay"></div></div>		</div>
		<!-- / Full Width Header -->
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-2" class="widget widget_text">			<div class="textwidget"><ul>
<li><a href="/"><big><big>Main Page</big></big></a>
<li><a href="
/featured-articles/">Featured Articles</a>
</ul>
<hr>
<ul>
<li><a href="/site-news/find-something-wrong/">Report an Issue</a>
<li><a href="/about/">About / Contact</a>
<li><a href="/about/#Support">Support LearnCpp</a>
</ul>
</div>
		</div><div id="text-3" class="widget widget_text"><div class="widget-title"><h3>Search</h3></div>			<div class="textwidget"><!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="center">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="16" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="hidden" name="sitesearch" value="www.LearnCpp.com" checked id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div>    
<!-- 
	Plugin: Custom Meta Widget	Plugin URL: http://shinraholdings.com/plugins/custom-meta-widget/-->


	<div id="custommetawidget-2" class="widget customMetaWidget">	<div class="widget-title"><h3>Meta</h3></div>	<ul>
	
	
    <li><a href="http://www.learncpp.com/blog/wp-login.php">Log in</a></li>	
	</ul>
    
	</div><div id="text-9" class="widget widget_text">			<div class="textwidget"><div class="cf_monitor">
<script type="text/javascript">
    google_ad_client = "ca-pub-0588844875925051";
    google_ad_slot = "2780990843";
    google_ad_width = 160;
    google_ad_height = 600;
</script>
<!-- Post - Left Sidebar - Wide Skyscraper -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
		</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

    
		
	<div class='code-block code-block-1' style='float:left;margin:8px 8px 8px 0px;'><div class="cf_monitor">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>	
								<div class="post-146 post type-post status-publish format-standard hentry category-cpp-tutorial odd" id="post-146">
						<div class="post-headline">		<h1>9.8 &#8212; Overloading the subscript operator</h1>
		</div>		<div class="post-byline">By Alex, on October 19th, 2007</div>		<div class="post-bodycopy clearfix"><p>When working with arrays, we typically use the subscript operator ([]) to index specific elements of an array:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882d9bf0180738945" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882d9bf0180738945-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882d9bf0180738945-1"><span class="crayon-v">anArray</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">7</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// put the value 7 in the first element of the array</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0007 seconds] -->
<p></p>
<p>However, consider the following IntList class, which has a member variable that is an array:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882d9c00593150366" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882d9c00593150366-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c00593150366-2">2</div><div class="crayon-num" data-line="crayon-555d7882d9c00593150366-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c00593150366-4">4</div><div class="crayon-num" data-line="crayon-555d7882d9c00593150366-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c00593150366-6">6</div><div class="crayon-num" data-line="crayon-555d7882d9c00593150366-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c00593150366-8">8</div><div class="crayon-num" data-line="crayon-555d7882d9c00593150366-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c00593150366-10">10</div><div class="crayon-num" data-line="crayon-555d7882d9c00593150366-11">11</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882d9c00593150366-1"><span class="crayon-t">class</span><span class="crayon-h"> </span><span class="crayon-e">IntList</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c00593150366-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882d9c00593150366-3"><span class="crayon-m">private</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c00593150366-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">m_anList</span><span class="crayon-sy">[</span><span class="crayon-cn">10</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c00593150366-5"><span class="crayon-sy">}</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c00593150366-6">&nbsp;</div><div class="crayon-line" id="crayon-555d7882d9c00593150366-7"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c00593150366-8"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882d9c00593150366-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-e">IntList </span><span class="crayon-v">cMyList</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c00593150366-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c00593150366-11"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0010 seconds] -->
<p></p>
<p>Because the m_anList member variable is private, we can not access it directly from cMyList.  This means we have no way to directly get or set values in the m_anList array.  So how do we get or put elements into our list?</p>
<p>Without operator overloading, the typical method would be to create access functions:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882d9c07457787639" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882d9c07457787639-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c07457787639-2">2</div><div class="crayon-num" data-line="crayon-555d7882d9c07457787639-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c07457787639-4">4</div><div class="crayon-num" data-line="crayon-555d7882d9c07457787639-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c07457787639-6">6</div><div class="crayon-num" data-line="crayon-555d7882d9c07457787639-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c07457787639-8">8</div><div class="crayon-num" data-line="crayon-555d7882d9c07457787639-9">9</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882d9c07457787639-1"><span class="crayon-t">class</span><span class="crayon-h"> </span><span class="crayon-e">IntList</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c07457787639-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882d9c07457787639-3"><span class="crayon-m">private</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c07457787639-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">m_anList</span><span class="crayon-sy">[</span><span class="crayon-cn">10</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c07457787639-5">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c07457787639-6"><span class="crayon-m">public</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-555d7882d9c07457787639-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">void</span><span class="crayon-h"> </span><span class="crayon-e">SetItem</span><span class="crayon-sy">(</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nIndex</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nData</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-v">m_anList</span><span class="crayon-sy">[</span><span class="crayon-v">nIndex</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">nData</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-sy">}</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c07457787639-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">GetItem</span><span class="crayon-sy">(</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nIndex</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">m_anList</span><span class="crayon-sy">[</span><span class="crayon-v">nIndex</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-555d7882d9c07457787639-9"><span class="crayon-sy">}</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0018 seconds] -->
<p></p>
<p>While this works, it&#8217;s not particularly user friendly.  Consider the following example:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882d9c0e822778156" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882d9c0e822778156-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c0e822778156-2">2</div><div class="crayon-num" data-line="crayon-555d7882d9c0e822778156-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c0e822778156-4">4</div><div class="crayon-num" data-line="crayon-555d7882d9c0e822778156-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c0e822778156-6">6</div><div class="crayon-num" data-line="crayon-555d7882d9c0e822778156-7">7</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882d9c0e822778156-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c0e822778156-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882d9c0e822778156-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-e">IntList </span><span class="crayon-v">cMyList</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c0e822778156-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">cMyList</span><span class="crayon-sy">.</span><span class="crayon-e">SetItem</span><span class="crayon-sy">(</span><span class="crayon-cn">2</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">3</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c0e822778156-5">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c0e822778156-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c0e822778156-7"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0009 seconds] -->
<p></p>
<p>Are we setting element 2 to the value 3, or element 3 to the value 2?  Without seeing the definition of SetItem(), it&#8217;s simply not clear.</p>
<p>A better solution in this case is to overload the subscript operator ([]) to allow access to the elements of m_anList.  The subscript operator is one of the operators that must be overloaded as a member function.  In this case, our overloaded subscript will take one parameter, an integer value that is the index of the element to access, and it will return an integer.</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882d9c14536395658" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882d9c14536395658-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c14536395658-2">2</div><div class="crayon-num" data-line="crayon-555d7882d9c14536395658-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c14536395658-4">4</div><div class="crayon-num" data-line="crayon-555d7882d9c14536395658-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c14536395658-6">6</div><div class="crayon-num" data-line="crayon-555d7882d9c14536395658-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c14536395658-8">8</div><div class="crayon-num" data-line="crayon-555d7882d9c14536395658-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c14536395658-10">10</div><div class="crayon-num" data-line="crayon-555d7882d9c14536395658-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c14536395658-12">12</div><div class="crayon-num" data-line="crayon-555d7882d9c14536395658-13">13</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882d9c14536395658-1"><span class="crayon-t">class</span><span class="crayon-h"> </span><span class="crayon-e">IntList</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c14536395658-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882d9c14536395658-3"><span class="crayon-m">private</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c14536395658-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">m_anList</span><span class="crayon-sy">[</span><span class="crayon-cn">10</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c14536395658-5">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c14536395658-6"><span class="crayon-m">public</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-555d7882d9c14536395658-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-o">&amp;</span><span class="crayon-h"> </span><span class="crayon-t">operator</span><span class="crayon-sy">[</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nIndex</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c14536395658-8"><span class="crayon-sy">}</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c14536395658-9">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c14536395658-10"><span class="crayon-t">int</span><span class="crayon-o">&amp;</span><span class="crayon-h"> </span><span class="crayon-v">IntList</span><span class="crayon-o">::</span><span class="crayon-t">operator</span><span class="crayon-sy">[</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nIndex</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-555d7882d9c14536395658-11"><span class="crayon-sy">{</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c14536395658-12"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">m_anList</span><span class="crayon-sy">[</span><span class="crayon-v">nIndex</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c14536395658-13"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0017 seconds] -->
<p></p>
<p>Now, whenever we use the subscript operator ([]) on an object of our class, the compiler will return the corresponding element from the m_anList member variable!  This allows us to both get and set values of m_anList directly:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882d9c1b853809090" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882d9c1b853809090-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c1b853809090-2">2</div><div class="crayon-num" data-line="crayon-555d7882d9c1b853809090-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c1b853809090-4">4</div><div class="crayon-num" data-line="crayon-555d7882d9c1b853809090-5">5</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882d9c1b853809090-1"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-e">IntList </span><span class="crayon-v">cMyList</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c1b853809090-2"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">cMyList</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">3</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// set a value</span></div><div class="crayon-line" id="crayon-555d7882d9c1b853809090-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">cMyList</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// get a value</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c1b853809090-4">&nbsp;</div><div class="crayon-line" id="crayon-555d7882d9c1b853809090-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0010 seconds] -->
<p></p>
<p>In this case, it&#8217;s much more obvious that <code>cMyList[2] = 3</code> is setting element 2 to the value of 3!</p>
<p><strong>Why operator[] returns a reference</strong></p>
<p>Let&#8217;s take a closer look at how <code>cMyList[2] = 3</code> evaluates.  Because the subscript operator has a higher precedence than the assignment operator, <code>cMyList[2]</code> evaluates first.  <code>cMyList[2]</code> calls operator[], which we&#8217;ve defined to return a reference to <code>cMyList.m_anList[2]</code>.  Because operator[] is returning a reference, it returns the actual <code>cMyList.m_anList[2]</code> array element.  Our partially evaluated expression becomes <code>cMyList.m_anList[2] = 3</code>, which is a straightforward integer assignment.</p>
<p>In the lesson <a href="http://www.learncpp.com/cpp-tutorial/13-a-first-look-at-variables/">a first look at variables</a>, you learned that any value on the left hand side of an assignment statement must be an l-value (which is a variable that has an actual memory address).  Because the result of operator[] can be used on the left hand side of an assignment (eg. <code>cMyList[2] = 3</code>), the return value of operator[] must be an l-value.  As it turns out, references are always l-values, because you can only take a reference of variables that have memory addresses.  So by returning a reference, the compiler is satisfied that we are returning an l-value.</p>
<p>Consider what would happen if operator[] returned an integer by value instead of by reference.  <code>cMyList[2]</code> would call operator[], which would return the <em>value of</em> cMyList.m_anList[2].  For example, if m_anList[2] had the value of 6, operator[] would return the value 6.  <code>cMyList[2] = 3</code> would partially evaluate to <code>6 = 3</code>, which makes no sense!  If you try to do this, the C++ compiler will complain:</p>
<pre>
C:VCProjectsTest.cpp(386) : error C2106: '=' : left operand must be l-value
</pre>
<p><em>Rule: Values returned by reference or pointer can be l-values or r-values.  Values returned by value can only be r-values.</em></p>
<p><strong>Conclusion</strong></p>
<p>The subscript operator is typically overloaded to provide access to 1-dimensional array elements contained within a class.  Because strings are typically implemented as arrays of characters, operator[] is often implemented in string classes to allow the user to access a single character of the string.</p>
<p>One other advantage of overloading the subscript operator is that we can make it safer than accessing arrays directly.  Normally, when accessing arrays, the subscript operator does not check whether the index is valid.  For example, the compiler will not complain about the following code:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882d9c26946988087" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882d9c26946988087-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c26946988087-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882d9c26946988087-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">anArray</span><span class="crayon-sy">[</span><span class="crayon-cn">5</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c26946988087-2"><span class="crayon-v">anArray</span><span class="crayon-sy">[</span><span class="crayon-cn">7</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">3</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// index 7 is out of bounds!</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0006 seconds] -->
<p></p>
<p>However, if we know the size of our array, we can make our overloaded subscript operator check to ensure the index is within bounds:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882d9c2d662232595" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882d9c2d662232595-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c2d662232595-2">2</div><div class="crayon-num" data-line="crayon-555d7882d9c2d662232595-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c2d662232595-4">4</div><div class="crayon-num" data-line="crayon-555d7882d9c2d662232595-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c2d662232595-6">6</div><div class="crayon-num" data-line="crayon-555d7882d9c2d662232595-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c2d662232595-8">8</div><div class="crayon-num" data-line="crayon-555d7882d9c2d662232595-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c2d662232595-10">10</div><div class="crayon-num" data-line="crayon-555d7882d9c2d662232595-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c2d662232595-12">12</div><div class="crayon-num" data-line="crayon-555d7882d9c2d662232595-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c2d662232595-14">14</div><div class="crayon-num" data-line="crayon-555d7882d9c2d662232595-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882d9c2d662232595-16">16</div><div class="crayon-num" data-line="crayon-555d7882d9c2d662232595-17">17</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882d9c2d662232595-1"><span class="crayon-p">#include &lt;cassert&gt; // for assert()</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c2d662232595-2">&nbsp;</div><div class="crayon-line" id="crayon-555d7882d9c2d662232595-3"><span class="crayon-t">class</span><span class="crayon-h"> </span><span class="crayon-e">IntList</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c2d662232595-4"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882d9c2d662232595-5"><span class="crayon-m">private</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c2d662232595-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">m_anList</span><span class="crayon-sy">[</span><span class="crayon-cn">10</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c2d662232595-7">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c2d662232595-8"><span class="crayon-m">public</span><span class="crayon-o">:</span></div><div class="crayon-line" id="crayon-555d7882d9c2d662232595-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-o">&amp;</span><span class="crayon-h"> </span><span class="crayon-t">operator</span><span class="crayon-sy">[</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nIndex</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c2d662232595-10"><span class="crayon-sy">}</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c2d662232595-11">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c2d662232595-12"><span class="crayon-t">int</span><span class="crayon-o">&amp;</span><span class="crayon-h"> </span><span class="crayon-v">IntList</span><span class="crayon-o">::</span><span class="crayon-t">operator</span><span class="crayon-sy">[</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nIndex</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-555d7882d9c2d662232595-13"><span class="crayon-sy">{</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c2d662232595-14"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">assert</span><span class="crayon-sy">(</span><span class="crayon-v">nIndex</span><span class="crayon-h"> </span><span class="crayon-o">&gt;=</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-h"> </span><span class="crayon-o">&amp;&amp;</span><span class="crayon-h"> </span><span class="crayon-v">nIndex</span><span class="crayon-h"> </span><span class="crayon-o">&lt;</span><span class="crayon-h"> </span><span class="crayon-cn">10</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c2d662232595-15">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7882d9c2d662232595-16"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">m_anList</span><span class="crayon-sy">[</span><span class="crayon-v">nIndex</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882d9c2d662232595-17"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0022 seconds] -->
<p></p>
<p>In the above example, we have used the assert() function (included in the cassert header) to make sure our index is valid.  If the expression inside the assert evaluates to false (which means the user passed in an invalid index), the program will terminate with an error message, which is much better than the alternative (corrupting memory).  This is probably the most common method of doing error checking of this sort.</p>
<table border=0 cellpadding=3>
<tr>
<td>
        <a href="http://www.learncpp.com/cpp-tutorial/99-overloading-the-parenthesis-operator/" style="text-decoration:none"><img src="http://www.learncpp.com/images/CppTutorial/next.png" align=middle> 9.9 -- Overloading the parenthesis operator</a>
</td>
</tr>
<tr>
<td>
        <a href="http://www.learncpp.com/#Chapter9" style="text-decoration:none"><img src="http://www.learncpp.com/images/CppTutorial/up.png" align=middle> Index</a>
</td>
</tr>
<tr>
<td>
        <a href="http://www.learncpp.com/cpp-tutorial/97-overloading-the-increment-and-decrement-operators/" style="text-decoration:none"><img src="http://www.learncpp.com/images/CppTutorial/prev.png" align=middle> 9.7 -- Overloading the increment and decrement operators</a>
</td>
</tr>
</table>
<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-email"><a rel="nofollow" data-shared="" class="share-email sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/?share=email" target="_blank" title="Click to email this to a friend"><span>Email</span></a></li><li class="share-facebook"><a rel="nofollow" data-shared="sharing-facebook-146" class="share-facebook sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/?share=facebook" target="_blank" title="Share on Facebook"><span>Facebook</span></a></li><li class="share-twitter"><a rel="nofollow" data-shared="sharing-twitter-146" class="share-twitter sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-google-plus-1"><a rel="nofollow" data-shared="sharing-google-146" class="share-google-plus-1 sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/?share=google-plus-1" target="_blank" title="Click to share on Google+"><span>Google</span></a></li><li class="share-pinterest"><a rel="nofollow" data-shared="sharing-pinterest-146" class="share-pinterest sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/?share=pinterest" target="_blank" title="Click to share on Pinterest"><span>Pinterest</span></a></li><li class="share-end"></li></ul></div></div></div><div class='code-block code-block-2' style='float:left;margin:8px 8px 8px 0px;'><div class="cf_monitor">
<div id="171844866">
    <script type="text/javascript">
    try {
        window._mNHandle.queue.push(function () {
		    window._mNDetails.loadTag("171844866", "336x280", "171844866");
		    });
		}
    catch (error) {}
	</script>
</div>
</div></div></div>						<div class="post-footer"><img src="http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/icons/folder-gray.gif" alt="" /> <a class="cpp-tutorial" href="http://www.learncpp.com/category/cpp-tutorial/" title="View all posts in C++ Tutorial">C++ Tutorial</a>   | <a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/print/" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="http://www.learncpp.com/blog/wp-content/plugins/wp-print/images/printer_famfamfam.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/print/" title="Print This Post" rel="nofollow">Print This Post</a></div>		</div><!-- / Post -->	
						
	
			

	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">21 comments to 9.8 &#8212; Overloading the subscript operator</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="comment even thread-even depth-1 clearfix" id="comment-2078">
		<div id="div-comment-2078" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/e8765a201bced99b7a255fba0a2ac665?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/e8765a201bced99b7a255fba0a2ac665?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">sergk</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-2078">
		October 19, 2007 at 4:22 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=2078#respond' onclick='return addComment.moveForm( "comment-2078", "2078", "respond", "146" )' aria-label='Reply to sergk'> &middot; Reply</a></span>		 
		</div>
		<p>Backwards compatibility with C sometimes could be regretting.<br />
Subscript operator is such case. In C is meant to be used with C &#8220;arrays&#8221;, and in turn those are just `pointer+offset*sizeof` syntactic sugar.<br />
Long story short, handy `operator[]` is useless when you deal with pointer to an object. Of course there is possibility to use dereference operator, or just call `operator[]` explicitly, but this is no way better than using getters/setters.</p>
<p>Such semantical inconsistency could lead to some evil pitfalls. Consider:<br />
<code><br />
class Node<br />
{<br />
private:<br />
    Node* m_list;<br />
public:<br />
	...<br />
	Node* operator[] (const int index) { return m_list[index]; }<br />
};<br />
</code><br />
and when usage:<br />
<code><br />
Node cMyNode;<br />
Node* pMyNode = cMyNode[2]; // ok - operator[]<br />
Node* pNoNode = pMyNode[2]; // gotcha!<br />
</code></p>
		</div>
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alex bypostauthor odd alt thread-odd thread-alt depth-1 clearfix" id="comment-2082">
		<div id="div-comment-2082" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-2082">
		October 19, 2007 at 8:54 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=2082#respond' onclick='return addComment.moveForm( "comment-2082", "2082", "respond", "146" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Good point, Sergk.  If you use a subscript on a pointer, the compiler will assume that you are trying to access a member of an array that the pointer is pointing to.</p>
<p>If you want to use an overloaded subscript operator on the variable that a pointer points to, you have to dereference the pointer first.  However, because the array index operator has a higher precedence than the subscript operator, you have to use parenthesis to make sure it resolves correctly:</p>
<p>Node *pNode = new Node();<br />
cout << (*pNode)[2];</p>
<p>(dereference first, then use overloaded subscript operator to get second element)</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-7042">
		<div id="div-comment-7042" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/aaa4a3d247ad6f870a1d45b2f55f5eaf?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/aaa4a3d247ad6f870a1d45b2f55f5eaf?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">jarves</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-7042">
		February 1, 2008 at 7:48 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=7042#respond' onclick='return addComment.moveForm( "comment-7042", "7042", "respond", "146" )' aria-label='Reply to jarves'> &middot; Reply</a></span>		 
		</div>
		<p>what about overloading the subscript operator to&#8230; say sort and int of arrays:</p>
<p>example:</p>
<p>class Whatever<br />
{<br />
private:<br />
    int * m_value;<br />
public:<br />
    int &#038;operator[](std::size_t index);<br />
};</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-7047">
		<div id="div-comment-7047" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-7047">
		February 1, 2008 at 9:27 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=7047#respond' onclick='return addComment.moveForm( "comment-7047", "7047", "respond", "146" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>I am not sure what you are saying, Jarves.  You want to overload the subscript operator to do what?</p>
		</div>
<ul class="children">
		<li class="comment even depth-3 clearfix" id="comment-7048">
		<div id="div-comment-7048" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/aaa4a3d247ad6f870a1d45b2f55f5eaf?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/aaa4a3d247ad6f870a1d45b2f55f5eaf?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">jarves</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-7048">
		February 1, 2008 at 10:16 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=7048#respond' onclick='return addComment.moveForm( "comment-7048", "7048", "respond", "146" )' aria-label='Reply to jarves'> &middot; Reply</a></span>		 
		</div>
		<p>oh sorries :S basically what i&#8217;m trying to do here is take a dynamic array of ints (int * m_value) and use the overloaded subscript operator to sort the array from smallest integer to highest integer&#8230; and it&#8217;s kickin my ass.</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-4 clearfix" id="comment-7055">
		<div id="div-comment-7055" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-7055">
		February 1, 2008 at 12:13 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=7055#respond' onclick='return addComment.moveForm( "comment-7055", "7055", "respond", "146" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>I would highly recommend using a function named Sort instead of overloading the subscript operator to do array sorting.  It&#8217;s generally not a good idea to overload operators to do things they aren&#8217;t normally used for, simply because it&#8217;s confusing and non-intuitive.</p>
		</div>
<ul class="children">
		<li class="comment even depth-5 clearfix" id="comment-7065">
		<div id="div-comment-7065" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/aaa4a3d247ad6f870a1d45b2f55f5eaf?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/aaa4a3d247ad6f870a1d45b2f55f5eaf?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">jarves</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-7065">
		February 1, 2008 at 8:53 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=7065#respond' onclick='return addComment.moveForm( "comment-7065", "7065", "respond", "146" )' aria-label='Reply to jarves'> &middot; Reply</a></span>		 
		</div>
		<p>if i had a choice i would&#8230; but my professor is strict&#8230; and i been pounding my head on this keyboard for too long.. i mean he wants it done this way but your right a sort function would be sooo freakin easy&#8230;</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-6 clearfix" id="comment-7068">
		<div id="div-comment-7068" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-7068">
		February 1, 2008 at 9:29 pm</a>
        		 
		</div>
		<p>You might try posting a message in the forum.  There are a few people who hang out there who enjoy helping others out. <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-27506">
		<div id="div-comment-27506" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/26a804036b8ab921a5ba422364bd2055?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/26a804036b8ab921a5ba422364bd2055?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">davidv</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-27506">
		September 15, 2008 at 9:17 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=27506#respond' onclick='return addComment.moveForm( "comment-27506", "27506", "respond", "146" )' aria-label='Reply to davidv'> &middot; Reply</a></span>		 
		</div>
		<p>The &#8220;Why operator[] returns a reference&#8221; part was brilliant. You made a pretty difficult idea (at least to me) to seem obvious.</p>
		</div>
<ul class="children">
		<li class="comment odd alt depth-2 clearfix" id="comment-71849">
		<div id="div-comment-71849" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/472d407990f0c12946cfcce9cb14569d?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/472d407990f0c12946cfcce9cb14569d?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Thom</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-71849">
		November 6, 2009 at 9:13 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=71849#respond' onclick='return addComment.moveForm( "comment-71849", "71849", "respond", "146" )' aria-label='Reply to Thom'> &middot; Reply</a></span>		 
		</div>
		<p>I agree.  The concept of references finally clicked when I read that.</p>
		</div>
<ul class="children">
		<li class="comment even depth-3 clearfix" id="comment-93644">
		<div id="div-comment-93644" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/35e6ea45027d6552d84b119f7de3118f?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/35e6ea45027d6552d84b119f7de3118f?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://codingfreak.blogspot.com' rel='external nofollow' class='url'>codingfreak</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-93644">
		October 13, 2010 at 4:25 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=93644#respond' onclick='return addComment.moveForm( "comment-93644", "93644", "respond", "146" )' aria-label='Reply to codingfreak'> &middot; Reply</a></span>		 
		</div>
		<p>I agree guys</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-74646">
		<div id="div-comment-74646" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/48e962a51ba722e2423a9a63c9cbb987?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/48e962a51ba722e2423a9a63c9cbb987?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://subsscript' rel='external nofollow' class='url'>ekta namdeo</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-74646">
		December 21, 2009 at 8:00 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=74646#respond' onclick='return addComment.moveForm( "comment-74646", "74646", "respond", "146" )' aria-label='Reply to ekta namdeo'> &middot; Reply</a></span>		 
		</div>
		<p>subs script operator  overloading in c++ with header file include simple and sweet program dijiye</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-80923">
		<div id="div-comment-80923" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/8f2151164cb3f21fadb8cdecc4ef6286?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/8f2151164cb3f21fadb8cdecc4ef6286?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Mojito</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-80923">
		March 19, 2010 at 1:28 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=80923#respond' onclick='return addComment.moveForm( "comment-80923", "80923", "respond", "146" )' aria-label='Reply to Mojito'> &middot; Reply</a></span>		 
		</div>
		<p>Hi, and thanks for this post.</p>
<p>I have another question. I want to do sub-indexing too, something like: MyNewType[a][b]. </p>
<p>anybody? <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
		</div>
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-86002">
		<div id="div-comment-86002" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/33d28d70fc9289fe30c39d6b5e3fc989?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/33d28d70fc9289fe30c39d6b5e3fc989?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">rob</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-86002">
		June 5, 2010 at 8:33 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=86002#respond' onclick='return addComment.moveForm( "comment-86002", "86002", "respond", "146" )' aria-label='Reply to rob'> &middot; Reply</a></span>		 
		</div>
		<p>Hi Alex,</p>
<p>In a case where we have 2 lists, can we still overload the [] operator?<br />
How does the overload function know which list to use when returning the reference?</p>
<p>--rob</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882dd177588276618" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882dd177588276618-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd177588276618-2">2</div><div class="crayon-num" data-line="crayon-555d7882dd177588276618-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd177588276618-4">4</div><div class="crayon-num" data-line="crayon-555d7882dd177588276618-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd177588276618-6">6</div><div class="crayon-num" data-line="crayon-555d7882dd177588276618-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd177588276618-8">8</div><div class="crayon-num" data-line="crayon-555d7882dd177588276618-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd177588276618-10">10</div><div class="crayon-num" data-line="crayon-555d7882dd177588276618-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd177588276618-12">12</div><div class="crayon-num" data-line="crayon-555d7882dd177588276618-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd177588276618-14">14</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882dd177588276618-1"><span class="crayon-t">class</span><span class="crayon-h"> </span><span class="crayon-e">IntList</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd177588276618-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882dd177588276618-3"><span class="crayon-m">private</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd177588276618-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">m_anList_A</span><span class="crayon-sy">[</span><span class="crayon-cn">10</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dd177588276618-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">m_anList_B</span><span class="crayon-sy">[</span><span class="crayon-cn">10</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd177588276618-6">&nbsp;</div><div class="crayon-line" id="crayon-555d7882dd177588276618-7"><span class="crayon-m">public</span><span class="crayon-o">:</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd177588276618-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-o">&amp;</span><span class="crayon-h"> </span><span class="crayon-t">operator</span><span class="crayon-sy">[</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nIndex</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dd177588276618-9"><span class="crayon-sy">}</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd177588276618-10">&nbsp;</div><div class="crayon-line" id="crayon-555d7882dd177588276618-11"><span class="crayon-t">int</span><span class="crayon-o">&amp;</span><span class="crayon-h"> </span><span class="crayon-v">IntList</span><span class="crayon-o">::</span><span class="crayon-t">operator</span><span class="crayon-sy">[</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nIndex</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd177588276618-12"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882dd177588276618-13"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-sy">?</span><span class="crayon-sy">?</span><span class="crayon-sy">?</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd177588276618-14"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0019 seconds] -->
<p></p>
		</div>
<ul class="children">
		<li class="comment even depth-2 clearfix" id="comment-87394">
		<div id="div-comment-87394" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/21172c0cf96629c2ead8e6b5203894d5?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/21172c0cf96629c2ead8e6b5203894d5?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jeffrey Bosboom</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-87394">
		June 29, 2010 at 4:15 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=87394#respond' onclick='return addComment.moveForm( "comment-87394", "87394", "respond", "146" )' aria-label='Reply to Jeffrey Bosboom'> &middot; Reply</a></span>		 
		</div>
		<p>Your operator[] function will do whatever you write in its body -- it&#8217;s just a regular member function with a funny name.  So you can overload operator[] to return an element from the first list or the second list.  You can also do something more complicated like:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882dd0a6357978341" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882dd0a6357978341-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd0a6357978341-2">2</div><div class="crayon-num" data-line="crayon-555d7882dd0a6357978341-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd0a6357978341-4">4</div><div class="crayon-num" data-line="crayon-555d7882dd0a6357978341-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd0a6357978341-6">6</div><div class="crayon-num" data-line="crayon-555d7882dd0a6357978341-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd0a6357978341-8">8</div><div class="crayon-num" data-line="crayon-555d7882dd0a6357978341-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dd0a6357978341-10">10</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882dd0a6357978341-1"><span class="crayon-t">int</span><span class="crayon-o">&amp;</span><span class="crayon-h"> </span><span class="crayon-v">IntList</span><span class="crayon-o">::</span><span class="crayon-t">operator</span><span class="crayon-sy">[</span><span class="crayon-sy">]</span><span class="crayon-sy">(</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">index</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd0a6357978341-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882dd0a6357978341-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">index</span><span class="crayon-h"> </span><span class="crayon-o">&lt;</span><span class="crayon-h"> </span><span class="crayon-cn">10</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd0a6357978341-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">m_anList_A</span><span class="crayon-sy">[</span><span class="crayon-v">index</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dd0a6357978341-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">else</span><span class="crayon-h"> </span><span class="crayon-st">if</span><span class="crayon-h"> </span><span class="crayon-sy">(</span><span class="crayon-v">index</span><span class="crayon-h"> </span><span class="crayon-o">&lt;</span><span class="crayon-h"> </span><span class="crayon-cn">20</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd0a6357978341-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">m_anList_B</span><span class="crayon-sy">[</span><span class="crayon-v">index</span><span class="crayon-o">-</span><span class="crayon-cn">10</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dd0a6357978341-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">else</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd0a6357978341-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">throw</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-e">out_of_range</span><span class="crayon-sy">(</span><span class="crayon-s">"Index out of range"</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dd0a6357978341-9"><span class="crayon-sy">}</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dd0a6357978341-10"><span class="crayon-o">&lt;</span><span class="crayon-o">!</span><span class="crayon-o">--</span><span class="crayon-v">formatted</span><span class="crayon-o">--</span><span class="crayon-o">&gt;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0029 seconds] -->
<p></p>
<p>This will return an element from the first list if the index is 0-9, return an element from the second list if the index is 10-19, or throw an exception otherwise.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-95081">
		<div id="div-comment-95081" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/0add07cb8f27ac8c5e4fcf48ad6b30ea?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/0add07cb8f27ac8c5e4fcf48ad6b30ea?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Nathan_OR</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-95081">
		December 28, 2010 at 11:20 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=95081#respond' onclick='return addComment.moveForm( "comment-95081", "95081", "respond", "146" )' aria-label='Reply to Nathan_OR'> &middot; Reply</a></span>		 
		</div>
		<p>Great explanation and yes thank you for the &#8220;why operator[] returns a reference&#8221; portion, it makes it very clear why it must be so when using array[n] as an l-value.  However I am still not clear why operator[] returns a reference when used as an r-value!  It seems that would be equivalent to:</p>
<p><code><br />
int x = 1;<br />
int y = 2;<br />
int array[3] = { 0, 0, 0 };</p>
<p>array[0] = x; // okay, per your explanation, we don&#039;t mean to write 0 = 1, rather, we mean [element at index 0] = 1<br />
// but then what about:<br />
x = array[0]; // why does x end up holding the r-value of &quot;0&quot;, instead of the address of the integer array element at index 0?<br />
</code></p>
<p>Perhaps I need more coffee, but the reasoning here is escaping me&#8230; is it simply a matter of compiler convention that a reference used as an r-value will always be evaluated for its r-value rather than the l-value?</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-99804">
		<div id="div-comment-99804" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/346829e9a328568ff43be24b812dcab5?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/346829e9a328568ff43be24b812dcab5?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">venkatvb</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-99804">
		June 20, 2013 at 2:23 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=99804#respond' onclick='return addComment.moveForm( "comment-99804", "99804", "respond", "146" )' aria-label='Reply to venkatvb'> &middot; Reply</a></span>		 
		</div>
		<p>why can&#8217;t we overload array subscript operator as friend. why it gives error when I overload [],-&gt;,= operator as friend?</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-153639">
		<div id="div-comment-153639" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/f9793453ab66f74a2079f25b8c31915d?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/f9793453ab66f74a2079f25b8c31915d?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">kekie</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-153639">
		June 19, 2014 at 2:44 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=153639#respond' onclick='return addComment.moveForm( "comment-153639", "153639", "respond", "146" )' aria-label='Reply to kekie'> &middot; Reply</a></span>		 
		</div>
		<p>In the example, when you;</p>
<p>IntList cMyList;<br />
cMyList[2] = 3;</p>
<p>How does C++ know that the 2 is assigned to nIndex?<br />
Is just built-in that when overloading `[]` the argument comes from between `[` and `]` ?</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-250436">
		<div id="div-comment-250436" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/6b5a2422fa86340b447110bdd0652ec3?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/6b5a2422fa86340b447110bdd0652ec3?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">senjes</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-250436">
		December 29, 2014 at 2:31 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=250436#respond' onclick='return addComment.moveForm( "comment-250436", "250436", "respond", "146" )' aria-label='Reply to senjes'> &middot; Reply</a></span>		 
		</div>
		<p>What will happen when I have array of objects and the subscript operator overloaded. I tried it , It is trying to invoke the equal to operator which I feel is correct . In this case, If I have array of objects then the subscript operator overloading is ignored right. Is there any workaround for this ?</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-251147">
		<div id="div-comment-251147" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/c0f08656d39aaf6d106b149bc198d1d4?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/c0f08656d39aaf6d106b149bc198d1d4?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">blank</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-251147">
		January 14, 2015 at 3:28 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=251147#respond' onclick='return addComment.moveForm( "comment-251147", "251147", "respond", "146" )' aria-label='Reply to blank'> &middot; Reply</a></span>		 
		</div>
		<p>The code below was to overload the [] operator to accept a list of 2 elements to access an element of<br />
a 3&#215;3 matrix. It seems to work when I uses a variable assignment for the argument ie. &#8220;Indexer&#8221; , but will not work<br />
when I try to enter the list in the form of cAmatrix[{1,1}]. Is there a way I have [] operator take either inputs and output the same result?</p>
<p>Matrix3x3.h</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882dcdb0247847268" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-2">2</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-4">4</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-6">6</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-8">8</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-10">10</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-12">12</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-14">14</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-16">16</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-17">17</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-18">18</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-19">19</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-20">20</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-21">21</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-22">22</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-23">23</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-24">24</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-25">25</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-26">26</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-27">27</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdb0247847268-28">28</div><div class="crayon-num" data-line="crayon-555d7882dcdb0247847268-29">29</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882dcdb0247847268-1"><span class="crayon-t">class</span><span class="crayon-h"> </span><span class="crayon-e">Matrix3x3</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-3"><span class="crayon-m">private</span><span class="crayon-o">:</span><span class="crayon-h"> </span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-4"><span class="crayon-h">	</span></div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-5"><span class="crayon-h">	</span><span class="crayon-t">float</span><span class="crayon-h"> </span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">3</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">3</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-6">&nbsp;</div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-7"><span class="crayon-m">public</span><span class="crayon-o">:</span><span class="crayon-h"> </span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-8">&nbsp;</div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-9"><span class="crayon-h">	</span><span class="crayon-e">Matrix3x3</span><span class="crayon-sy">(</span><span class="crayon-t">float</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">3</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">3</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span><span class="crayon-sy">{</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-10"><span class="crayon-h">		</span></div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-11"><span class="crayon-h">		</span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-12"><span class="crayon-h">		</span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-13"><span class="crayon-h">		</span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-14"><span class="crayon-h">		</span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-15"><span class="crayon-h">		</span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-16"><span class="crayon-h">		</span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-17"><span class="crayon-h">		</span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-18"><span class="crayon-h">		</span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-19"><span class="crayon-h">		</span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">s</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-20">&nbsp;</div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-21"><span class="crayon-h">	</span><span class="crayon-sy">}</span><span class="crayon-h"> </span><span class="crayon-c">// intialize a matrix </span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-22">&nbsp;</div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-23"><span class="crayon-h">	</span><span class="crayon-t">float</span><span class="crayon-o">&amp;</span><span class="crayon-h"> </span><span class="crayon-v">Matrix3x3</span><span class="crayon-o">::</span><span class="crayon-t">operator</span><span class="crayon-sy">[</span><span class="crayon-sy">]</span><span class="crayon-sy">(</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">index</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-24"><span class="crayon-h">	</span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-25"><span class="crayon-h">		</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">m_matrix</span><span class="crayon-sy">[</span><span class="crayon-v">index</span><span class="crayon-sy">[</span><span class="crayon-cn">0</span><span class="crayon-sy">]</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-v">index</span><span class="crayon-sy">[</span><span class="crayon-cn">1</span><span class="crayon-sy">]</span><span class="crayon-sy">]</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-26"><span class="crayon-h">	</span><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-27">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdb0247847268-28">&nbsp;</div><div class="crayon-line" id="crayon-555d7882dcdb0247847268-29"><span class="crayon-sy">}</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0064 seconds] -->
<p></p>
<p>main.cpp </p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7882dcdc1760720094" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7882dcdc1760720094-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdc1760720094-2">2</div><div class="crayon-num" data-line="crayon-555d7882dcdc1760720094-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdc1760720094-4">4</div><div class="crayon-num" data-line="crayon-555d7882dcdc1760720094-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdc1760720094-6">6</div><div class="crayon-num" data-line="crayon-555d7882dcdc1760720094-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdc1760720094-8">8</div><div class="crayon-num" data-line="crayon-555d7882dcdc1760720094-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdc1760720094-10">10</div><div class="crayon-num" data-line="crayon-555d7882dcdc1760720094-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdc1760720094-12">12</div><div class="crayon-num" data-line="crayon-555d7882dcdc1760720094-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdc1760720094-14">14</div><div class="crayon-num" data-line="crayon-555d7882dcdc1760720094-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7882dcdc1760720094-16">16</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7882dcdc1760720094-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdc1760720094-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882dcdc1760720094-3"><span class="crayon-h">	</span><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-t">namespace</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-sy">;</span><span class="crayon-h"> </span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdc1760720094-4">&nbsp;</div><div class="crayon-line" id="crayon-555d7882dcdc1760720094-5"><span class="crayon-h">	</span><span class="crayon-t">float</span><span class="crayon-h"> </span><span class="crayon-v">Values</span><span class="crayon-sy">[</span><span class="crayon-cn">3</span><span class="crayon-sy">]</span><span class="crayon-sy">[</span><span class="crayon-cn">3</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdc1760720094-6"><span class="crayon-h">	</span><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7882dcdc1760720094-7"><span class="crayon-h">		</span><span class="crayon-sy">{</span><span class="crayon-cn">1.0</span><span class="crayon-sy">,</span><span class="crayon-cn">2.0</span><span class="crayon-sy">,</span><span class="crayon-cn">3.0</span><span class="crayon-sy">}</span><span class="crayon-sy">,</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdc1760720094-8"><span class="crayon-h">		</span><span class="crayon-sy">{</span><span class="crayon-cn">4.0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">5.5051</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">6.0</span><span class="crayon-sy">}</span><span class="crayon-sy">,</span></div><div class="crayon-line" id="crayon-555d7882dcdc1760720094-9"><span class="crayon-h">		</span><span class="crayon-sy">{</span><span class="crayon-cn">7.0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">8.0</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">9.0</span><span class="crayon-sy">}</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdc1760720094-10"><span class="crayon-h">	</span><span class="crayon-sy">}</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dcdc1760720094-11">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdc1760720094-12"><span class="crayon-h">	</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">Indexer</span><span class="crayon-sy">[</span><span class="crayon-cn">2</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-sy">{</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-cn">1</span><span class="crayon-h"> </span><span class="crayon-sy">}</span><span class="crayon-sy">;</span><span class="crayon-c">// the new overloaded [] takes an 1x2 array with this declaration form!</span></div><div class="crayon-line" id="crayon-555d7882dcdc1760720094-13"><span class="crayon-h">	</span><span class="crayon-e">Matrix3x3 </span><span class="crayon-e">cAmatrix</span><span class="crayon-sy">(</span><span class="crayon-v">Values</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdc1760720094-14"><span class="crayon-h">	</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">cAmatrix</span><span class="crayon-sy">[</span><span class="crayon-v">Indexer</span><span class="crayon-sy">]</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7882dcdc1760720094-15"><span class="crayon-h">	</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7882dcdc1760720094-16"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0029 seconds] -->
<p></p>
		</div>
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-251881">
		<div id="div-comment-251881" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/87d25f970c178de6ce27ebf1d1001904?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/87d25f970c178de6ce27ebf1d1001904?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Janez</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/98-overloading-the-subscript-operator/#comment-251881">
		March 20, 2015 at 1:06 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/98-overloading-the-subscript-operator/?replytocom=251881#respond' onclick='return addComment.moveForm( "comment-251881", "251881", "respond", "146" )' aria-label='Reply to Janez'> &middot; Reply</a></span>		 
		</div>
		<p>Would it be possible to exploit return by pointer to a private member of a class? Since we can&#8217;t access private members directly, we don&#8217;t know what is their address. But by returning a pointer to them, this would no longer hold true. Any problems that might come with that?</p>
		</div>
</li><!-- #comment-## -->
	
	</ul>
	<!-- / Comment List -->

	



						<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Comment <small><a rel="nofollow" id="cancel-comment-reply-link" href="/cpp-tutorial/98-overloading-the-subscript-operator/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://www.learncpp.com/blog/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																										<p><input class="text author" id="author" name="author" type="text" value="" size="30" tabindex="1" />&nbsp;&nbsp;<label for="author"><strong>Name </strong> (required)</label></p>
<p><input class="text email" id="email" name="email" type="text" value="" size="30"  tabindex="2" />&nbsp;&nbsp;<label for="email"><strong>Email</strong> (will not be published) (required)</label></p>
<p><input class="text url" id="url" name="url" type="text" value="" size="30"  tabindex="3" />&nbsp;&nbsp;<label for="url">Website</label></p>
<p class="aiowps-captcha"><label>Please enter an answer in digits:</label><div class="aiowps-captcha-equation"><strong>4 &#43; 14 = <input type="hidden" name="aiowps-captcha-string-info" id="aiowps-captcha-string-info" value="MTQzMjE4OTA1OXR5bTdtZjVxZ3o3ZGJwYWozMW04MTg=" /><input type="hidden" name="aiowps-captcha-temp-string" id="aiowps-captcha-temp-string" value="1432189059" /><input type="text" size="2" length="2" id="aiowps-captcha-answer" name="aiowps-captcha-answer" value="" /></strong></div></p>												<p><textarea name="comment" id="comment" rows="10" cols="10" tabindex="4"></textarea></p>						<div class="useCode">Put C++ code inside [code][/code] tags to use the syntax highlighter</div>
						<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='146' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="369ffd3afb" /></p>		<p class="antispam-group antispam-group-q" style="clear: both;">
			<label>Current ye@r <span class="required">*</span></label>
			<input type="hidden" name="antspm-a" class="antispam-control antispam-control-a" value="2015" />
			<input type="text" name="antspm-q" class="antispam-control antispam-control-q" value="3.5" />
		</p>
		<p class="antispam-group antispam-group-e" style="display: none;">
			<label>Leave this field empty</label>
			<input type="text" name="antspm-e-email-url-website" class="antispam-control antispam-control-e" value="" />
		</p>
<p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="176"/></p>					</form>
							</div><!-- #respond -->
			<div class='code-block code-block-7' style='margin:8px 0px;'><div class="cf_monitor">
<div id="Content Below Comment">
    <script type="text/javascript">
    var width = 0;
    if (document.getElementById('middle'))
        width = document.getElementById('middle').clientWidth;
    else
        width = document.innerWidth;

    if (width >= 768)
    {
        try {
            window._mNHandle.queue.push(function () {
		        window._mNDetails.loadTag("Content Below Comment", "728x90", "287758258");
		        });
		    }
        catch (error) {}
    }
	</script>
</div>
</div></div>		
    

</td>
<!-- / Main Column -->

<!-- Right Inner Sidebar -->

<!-- Right Sidebar -->
<td id="right">

	<div id="text-7" class="widget widget_text">			<div class="textwidget"><div class="cf_monitor">
<!-- Post - Right Sidebar - Wide Sky -->
<script type="text/javascript">
    google_ad_client = "ca-pub-0588844875925051";
    google_ad_slot = "0955932809";
    google_ad_width = 160;
    google_ad_height = 600;
</script>
<!-- Post - Right Sidebar - Wide Sky -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
		</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->


</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
		<!-- Full Width Footer -->
		<div id="footer" class="full-width">
    LearnCpp.com -- Teaching you how to program in C++ since May 25, 2007.&nbsp;&nbsp;Copyright &copy; 2015 <a href="http://www.learncpp.com/">Learn C++</a> - All Rights Reserved<br />Powered by <a href="http://wordpress.org/">WordPress</a> &amp; <a href="http://forum.bytesforall.com/">Atahualpa</a>    
    
    
	<script type="text/javascript">
		window.WPCOM_sharing_counts = {"http:\/\/www.learncpp.com\/cpp-tutorial\/98-overloading-the-subscript-operator\/":146};
		window.WPCOM_jetpack = true;
				window.WPCOM_site_ID = 3928254;
			</script>
	<div id="sharing_email" style="display: none;">
		<form action="/cpp-tutorial/98-overloading-the-subscript-operator/" method="post">
			<label for="target_email">Send to Email Address</label>
			<input type="email" name="target_email" id="target_email" value="" />

			
				<label for="source_name">Your Name</label>
				<input type="text" name="source_name" id="source_name" value="" />

				<label for="source_email">Your Email Address</label>
				<input type="email" name="source_email" id="source_email" value="" />

						<input type="text" id="jetpack-source_f_name" name="source_f_name" class="input" value="" size="25" autocomplete="off" />
			<script> document.getElementById('jetpack-source_f_name').value = ''; </script>
			
			<img style="float: right; display: none" class="loading" src="http://www.learncpp.com/blog/wp-content/plugins/jetpack/modules/sharedaddy/images/loading.gif" alt="loading" width="16" height="16" />
			<input type="submit" value="Send Email" class="sharing_send" />
			<a rel="nofollow" href="#cancel" class="sharing_cancel">Cancel</a>

			<div class="errors errors-1" style="display: none;">
				Post was not sent - check your email addresses!			</div>

			<div class="errors errors-2" style="display: none;">
				Email check failed, please try again			</div>

			<div class="errors errors-3" style="display: none;">
				Sorry, your blog cannot share posts by email.			</div>
		</form>
	</div>
		<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-google-plus-1' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomgoogle-plus-1', 'menubar=1,resizable=1,width=480,height=550' );
				return false;
			});
		});
		</script>
							<script type="text/javascript">
			jQuery(document).on('ready', function(){
				jQuery('body').on('click', 'a.share-pinterest', function(e){
					e.preventDefault();

					// Load Pinterest Bookmarklet code
					var s = document.createElement("script");
					s.type = "text/javascript";
					s.src = window.location.protocol + "//assets.pinterest.com/js/pinmarklet.js?r=" + ( Math.random() * 99999999 );
					var x = document.getElementsByTagName("script")[0];
					x.parentNode.insertBefore(s, x);

					// Trigger Stats
					var s = document.createElement("script");
					s.type = "text/javascript";
					s.src = this + ( this.toString().indexOf( '?' ) ? '&' : '?' ) + 'js_only=1';
					var x = document.getElementsByTagName("script")[0];
					x.parentNode.insertBefore(s, x);
				});
			});
			</script>
		<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/akismet/_inc/form.js?ver=3.1.1'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-includes/js/comment-reply.min.js?ver=4.2.2'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/anti-spam/js/anti-spam-3.5.js'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201521'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var sharing_js_options = {"lang":"en","counts":"1"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/jetpack/modules/sharedaddy/sharing.js?ver=3.5.3'></script>
<script type='text/javascript' src='http://stats.wp.com/e-201521.js' async defer></script>
<script type='text/javascript'>
	_stq = window._stq || [];
	_stq.push([ 'view', {v:'ext',j:'1:3.5.3',blog:'3928254',post:'146',tz:'-8',srv:'www.learncpp.com'} ]);
	_stq.push([ 'clickTrackerInit', '3928254', '146' ]);
</script>
		</div>
		<!-- / Full Width Footer -->

</body>
</html>
<!-- Dynamic page generated in 0.798 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2015-05-20 22:17:39 -->

<!-- Compression = gzip -->
<!-- super cache -->

