<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
      <title>Java Regex - Tutorial</title>
      <script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><link rel="stylesheet" type="text/css" href="http://www.vogella.com/css/A.articles.css.pagespeed.cf.R8TsdYc8Ks.css">
      <meta name="generator" content="DocBook XSL Stylesheets V1.77.1">
      <meta name="description" content="Java and Regular Expressions This tutorial introduces the usage of regular expressions and describes their implementation in Java. It also provides several Java regular expression examples.">
      <link rel="shortcut icon" href="http://www.vogella.com/favicon.ico">
      <meta name="viewport" content="width=device-width, initial-scale=1">
   </head>
   <body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
      
      
      <!-- Google analytics (Jennifer) -->
      
      <script type="text/javascript">var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-3967758-1']);_gaq.push(['_setDomainName','vogella.com']);_gaq.push(['_setAllowLinker',true]);_gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga,s);})();</script>
      
      
      
      <!-- Load jQuery -->
      <script type="text/javascript" src="http://www.vogella.com/javascript/jquery/jquery.js.pagespeed.jm.LynoS8h5RR.js"></script>
      
      <!-- jQuery Hide Buttons -->
      <script type="text/javascript">//<![CDATA[
var fixed=false;$(document).scroll(function(){if($(this).scrollTop()>955){if(!fixed){fixed=true;$('.bottom_left').css({display:'block'});$('.bottom_right').css({display:'block'});}}else{if(fixed){fixed=false;$('.bottom_left').css({display:'none'});$('.bottom_right').css({display:'none'});}}});
//]]></script>
      
      
      <!-- Lake Quincy Ads - old way now replaced with Lake Quincy Ads Responsive
<script type='text/javascript'>
	function _dmBootstrap(file) {
		var _dma = document.createElement('script');
		_dma.type = 'text/javascript';
		_dma.async = true;
		_dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
	}
	function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js');}
	(function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000);})();
</script>-->
      
      
      <!-- Lake Quincy Ads Responsive -->  
      <script type="text/javascript">var googletag=googletag||{};googletag.cmd=googletag.cmd||[];(function(){var gads=document.createElement('script');gads.async=true;gads.type='text/javascript';var useSSL='https:'==document.location.protocol;gads.src=(useSSL?'https:':'http:')+'//www.googletagservices.com/tag/js/gpt.js';var node=document.getElementsByTagName('script')[0];node.parentNode.insertBefore(gads,node);})();</script>
      
      <script type="text/javascript">googletag.cmd.push(function(){var mapping=googletag.sizeMapping().addSize([320,700],[300,250]).addSize([750,200],[300,250]).addSize([1170,200],[728,90]).build();googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/right',[160,600],'ad-left').addService(googletag.pubads()).setTargeting('left');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/beforeTOC',[[300,250],[728,90]],'ad-beforeTOC').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('beforeTOC');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/inBetween01',[[300,250],[728,90]],'ad-inBetween01').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('inBetween01');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/inBetween02',[[300,250],[728,90]],'ad-inBetween02').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('inBetween02');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/inBetween03',[[300,250],[728,90]],'ad-inBetween03').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('inBetween03');googletag.pubads().enableSingleRequest();googletag.enableServices();});</script>
      
      <div id="headerpart">
         
         	
         <div id="logo">
            		<a title="vogella.com" href="http://www.vogella.com">
               			<img src="http://www.vogella.com/img/logo/xindex_logo.png.pagespeed.ic.W70tcDQqll.png" alt="vogella.com"> 
               		</a>
            	
         </div> 
         <!-- logo -->
         	
         	
         <div id="topnav">
            		
            <ul id="home" class="topnav">
               			
               <li id="home-icon"><a href="http://www.vogella.com/"></a></li>
               			
               <li class="currentpage"> <a href="http://www.vogella.com/tutorials/">Tutorials</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/tutorials/android.html">Android Programming</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/eclipseide.html">Eclipse IDE</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/eclipse.html">Eclipse RCP/Plug-ins</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/versioncontrol.html">Version Control</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/web.html">Web</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/java.html">Java</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/technology.html">Technology</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/google.html">Google</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/algorithms.html">Algorithms</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/designpattern.html">Design Pattern</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               			
               <li><a href="http://www.vogella.com/training/">Services</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/training/android/index.html">Android Development Training</a>
                        						
                        <ul>
                           							
                           <li><a href="http://www.vogella.com/training/android/androidprofessional.html">Android Professional</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/android/androidtesting.html">Android Testing and Appl. Optimization</a></li>
                           						
                        </ul>
                        					
                     </li>
                     					
                     <li><a href="http://www.vogella.com/training/eclipse/index.html">Eclipse Development Training</a>
                        						
                        <ul>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsercp.html">Eclipse RCP</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipseide.html">Eclipse IDE Expert</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsercpmigration.html">Eclipse RCP Migration</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsecontribution.html">	Contributing to Eclipse</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipseplugin.html">Eclipse IDE Plug-in Development</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/tycho.html">Maven/Tycho</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/rcpjavaeespring.html">Eclipse RCP with Java EE and Spring</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipseoxygen.html">oXygen in Eclipse</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsenattable.html">NatTable</a></li>
                           						
                        </ul>
                        					
                     </li>
                     					
                     <li><a href="http://www.vogella.com/training/git.html">Git Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/groovy.html">Groovy Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/gradle.html">Gradle Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/java.html">Java Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/spring.html">Spring Workshop</a></li>
                     					
                     <li><a href="http://www.vogella.com/consulting/">Expert Consulting</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/products/">Products</a>
                  				
                  <ul>
                     					
                     <li><a href="http://saneclipse.vogella.com">saneclipse</a></li>
                     					
                     <li><a href="http://codemodify.vogella.com">CodeModify</a></li>
                     					
                     <li><a href="http://preferencespy.vogella.com">PreferenceSpy</a></li>
                     					
                     <!--<li><a href="http://e4tools.vogella.com">e4 tools</a></li>
					<li><a href="http://e4perspectiveswitcher.vogella.com">e4 perspectiveSwitcher</a></li>-->
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/books/">Books</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/books/eclipsecontribution.html">Contributing to the Eclipse Project</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/eclipsercp.html">Eclipse RCP</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/eclipseide.html">Eclipse IDE</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/git.html">Git</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/android.html">Android SQlite and ContentProvider</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/company/">Company</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/aboutvogella.html">About us</a></li>
                     					
                     <li><a href="http://www.vogella.com/people/index.html">People at vogella</a></li>
                     					
                     <li><a href="http://www.vogella.com/customers.html" onclick="_gaq.push(['_trackEvent', 'Customers', 'clicked', 'Header']);">Reference Customers</a></li>
                     					
                     <li><a href="http://blog.vogella.com/">Blog</a></li>
                     					
                     <li><a href="http://www.vogella.com/jobs/">Jobs</a></li>
                     					
                     <li><a href="http://www.vogella.com/faq.html">FAQ</a></li>
                     					
                     <li><a href="http://www.vogella.com/legal.html">Legal</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/support.html">Donate</a></li>
               			
               <li><a href="http://www.vogella.com/contact.html">Contact us</a></li>
               		
            </ul>
            	
         </div>
         <!-- topnav -->
         	
         
         	
         <div id="searchfixed">
            		
            <form action="http://www.vogella.com/search.html" id="cse-search-box">
               			
               <div id="searchwrapper">
                  
                  				<input type="hidden" name="cx" value="partner-pub-3851443674951530:3991491935">
                  				<input type="hidden" name="cof" value="FORID:10">
                  				<input type="hidden" name="ie" value="UTF-8">
                  				<input type="text" placeholder="Search" id="search_field" name="q" size="55">
                  				<input type="image" src="http://www.vogella.com/img/icons/xsrch.png.pagespeed.ic.BP8TtuQRzJ.png" id="search_button" name="sa" alt="Search">
                  			
               </div>
               		
            </form>
            	
         </div> 
         <!-- searchfixed -->
         
         
      </div> 
      <!-- headerpart -->
      
      
      <div id="leftcol">
         
         	<br>
         	<br>
         	
         	<a href="http://www.vogella.com/support.html">
            		<img src="http://www.vogella.com/img/common/140x150xvogella-donate.png.pagespeed.ic.gMuY8kQC6X.png" width="140" height="150" alt="Support free tutorials" title="Support free tutorials" onclick="_gaq.push(['_trackEvent', 'Donations', 'clicked', 'Top tutorial']);"></a>
         
         	<br>
         	<br>
         
         	<script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
         	
         <!-- LeftColumn -->
         	<ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-3851443674951530" data-ad-slot="6294971031"></ins>
         	<script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
         
         	<p></p>
         	
         	<br>
         	<br>
         
         	
         <!-- Nonresponsive Lake Quincy 160x600 Wide Skycraper code
	<div data-type="ad" data-publisher="lqm.javaeclipseandroid.site" data-zone="right" data-format="160x600"></div>-->
         	
         	
         <!-- Responsive Lake Quincy Ads -->
         	
         <div id="ad-left">
            		<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-left');});</script>
            	</div>
         
      </div> 
      <!-- leftcolumn -->
      
      
      <div id="rightcol">
         
         	
         <!-- vogellas own advertising for training and books --> 	
         	
         <p class="training-bg">
            		<a class="image-z" href="http://www.vogella.com/training/" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'whole Box']);">
               			<img src="http://www.vogella.com/img/training/200x364xvogellatraining_ad.png.pagespeed.ic.KQGlbyMRAP.png" height="364" width="200" alt="vogella training">
               		</a>
            		<a class="btn-training button1" href="http://www.vogella.com/training/" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'training']);">Training</a>
            		<a class="btn-training button2" href="http://www.vogella.com/books/index.html" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'books']);">Books</a>
            	
         </p> 
         	
         	
         <div class="bottom_right">
            		
            <div class="social_media">
               			<a href="http://www.twitter.com/vogellacompany">
                  				
                  <h1>FOLLOW<br>ME ON
                  </h1> 
                  				<img src="http://www.vogella.com/img/tutoriallinks/xtwitter.png.pagespeed.ic.5z4YhYIkb2.png" alt="Follow me on twitter">
                  			</a>
               		
            </div>
            <!-- social_media -->
            
            		
            <div class="social_media">
               			<a rel="me" href="https://profiles.google.com/104044918586174763681">
                  				
                  <h1>FOLLOW<br>ME ON
                  </h1> 
                  				<img src="http://www.vogella.com/img/tutoriallinks/xgoogle_plus.png.pagespeed.ic.d6W0KZShGF.png" alt="Follow me on Google+">
                  			</a>
               		
            </div>
            <!-- social_media -->
            	
         </div> 
         <!-- bottom_right -->
         	
         	
         <div class="bottom_left">
            	
            <div class="services">
               		<a href="http://www.vogella.com/training/index.html">
                  	<img src="http://www.vogella.com/img/tutoriallinks/xtraining.png.pagespeed.ic.xjFDFI8z_E.png" alt="Get training" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'Fix buttom left training']);">
                  	
                  <h1>GET TRAINING</h1>
                  	</a>
               
            </div>
            <!-- services -->
            	
            <div class="services">
               	<a href="http://www.vogella.com/books/index.html">
                  	<img src="http://www.vogella.com/img/tutoriallinks/books.png.pagespeed.ce.iDpNUUudib.png" alt="Purchase books" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'Fix buttom left books']);">
                  	
                  <h1>PURCHASE BOOKS</h1>
                  	</a>
               
            </div>
            <!-- services -->
            	
            <div class="services">	
               	<a href="http://www.vogella.com/support.html">
                  	<img src="http://www.vogella.com/img/tutoriallinks/xdonate.png.pagespeed.ic.DDVinfleA6.png" alt="Support free tutorials" onclick="_gaq.push(['_trackEvent', 'Donations', 'clicked', 'Fix buttom left']);">
                  	
                  <h1>SUPPORT FREE TUTORIAL</h1>
                  	</a>
               
               
            </div> 
            <!-- services -->       
            
         </div> 
         <!-- bottom_left -->
         
         
      </div> 
      <!--rightcol-->
      
      
      <div class="article">
         <div class="titlepage">
            <div>
               <div>
                  <h2 class="title"><a name="d441071e1"></a>Java Regex - Tutorial
                  </h2>
               </div>
               <div>
                  <div class="author">
                     <h3 class="author"><span class="firstname">Lars</span> <span class="surname">Vogel</span></h3>
                  </div>
               </div>
               <div>
                  <p class="releaseinfo">
                     
                  </p>
                  <p>Version 2.6</p>
                  <p class="releaseinfo">
                     
                  </p>
               </div>
               <div>
                  <p class="copyright">Copyright ? 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014 vogella GmbH</p>
               </div>
               <div>
                  <p class="pubdate">01.12.2014</p>
               </div>
               <div>
                  <div class="abstract"><a name="abstract"></a><p class="title"><b>Java and Regular Expressions</b></p>
                     <p>This tutorial introduces the usage of regular
                        expressions and
                        describes their implementation
                        in Java. It also provides several Java
                        regular expression
                        examples.
                        
                     </p>
                  </div>
               </div>
            </div>
            <div>
               <div xmlns:fo="http://www.w3.org/1999/XSL/Format" id="ad-beforeTOC"><script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-beforeTOC');});</script></div>
            </div>
            <hr>
         </div>
         <div class="toc">
            <p><b>Table of Contents</b></p>
            <dl>
               <dt><span class="section"><a href="#introduction">1. Regular Expressions</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#introduction_regex">1.1. What are regular expressions?</a></span></dt>
                     <dt><span class="section"><a href="#introduction_regexexamples">1.2. Regex examples</a></span></dt>
                     <dt><span class="section"><a href="#introduction_languages">1.3. Support for regular expressions in programming languages
                              </a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#prerequisites">2. Prerequisites</a></span></dt>
               <dt><span class="section"><a href="#regex">3. Rules of writing regular expressions</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#regex_starter">3.1. Common matching symbols</a></span></dt>
                     <dt><span class="section"><a href="#regex_metacharacters">3.2. Meta characters</a></span></dt>
                     <dt><span class="section"><a href="#regex_quantifier">3.3. Quantifier</a></span></dt>
                     <dt><span class="section"><a href="#regex_grouping">3.4. Grouping and Backreference</a></span></dt>
                     <dt><span class="section"><a href="#regex_negative">3.5. Negative Lookahead</a></span></dt>
                     <dt><span class="section"><a href="#regex_backslashes">3.6. Backslashes in Java</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#string">4. Using Regular Expressions with String.matches()</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#string_overview">4.1. Overview</a></span></dt>
                     <dt><span class="section"><a href="#string_examples">4.2. Examples</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#regexjava">5. Pattern and Matcher</a></span></dt>
               <dt><span class="section"><a href="#examples">6. Java Regex Examples</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#examples_or">6.1. Or</a></span></dt>
                     <dt><span class="section"><a href="#examples_phone">6.2. Phone number</a></span></dt>
                     <dt><span class="section"><a href="#examples_number">6.3. Check for a certain number range</a></span></dt>
                     <dt><span class="section"><a href="#examples_linkchecker">6.4. Building a link checker</a></span></dt>
                     <dt><span class="section"><a href="#examples_duplicated words">6.5. Finding duplicated words</a></span></dt>
                     <dt><span class="section"><a href="#examples_startwithemptyline">6.6. Finding elements which start in a new line</a></span></dt>
                     <dt><span class="section"><a href="#examples_nonjavadoc">6.7. Finding (Non-Javadoc) statements</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#regularexpressionseclipse">7. Processing regular expressions in Eclipse</a></span></dt>
               <dt><span class="section"><a href="#supportandlicense">8. About this website</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#thankyou">8.1. Donate to support free tutorials</a></span></dt>
                     <dt><span class="section"><a href="#questions">8.2. Questions and discussion</a></span></dt>
                     <dt><span class="section"><a href="#thankyou">8.3. License for this tutorial and its code</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#resources">9. Links and Literature</a></span></dt>
            </dl>
         </div>
         <script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
         
         <!-- Responsive - After Table of Content -->
         <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-3851443674951530" data-ad-slot="4470606330" data-ad-format="auto"></ins>
         <script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="introduction"></a>1.&nbsp;Regular Expressions
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="introduction_regex"></a>1.1.&nbsp;What are regular expressions?
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A
                  <em class="wordasword">regular expression</em>
                  defines a search pattern
                  for strings. The
                  abbreviation for
                  regular
                  expression
                  is
                  <em class="wordasword">regex</em>. The search pattern can be anything from a
                  simple
                  character, a fixed
                  string or a complex expression containing
                  special characters
                  describing the pattern. The
                  pattern
                  defined by the
                  regex
                  may match one or
                  several times or not at all for a
                  given
                  string.
                  
               </p>
               <p>
                  Regular expressions can be used
                  to search, edit and
                  manipulate
                  text.
                  
               </p>
               <p>
                  The process of analyzing or modifying a text with a
                  regex is called:
                  <em class="wordasword">The regular expression is applied to the text (string)
                     </em>.
                  The pattern defined by the
                  regex
                  is applied on the
                  text
                  from left to
                  right. Once a source character
                  has
                  been used in a
                  match,
                  it cannot be
                  reused. For example, the regex
                  <code class="code">aba</code>
                  will match
                  <em class="wordasword">ababababa</em>
                  only two times (aba_aba__).
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="introduction_regexexamples"></a>1.2.&nbsp;Regex examples
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A simple example for a regular expression is a (literal)
                  string. For
                  example, the
                  <em class="wordasword">Hello World</em>
                  regex will match the
                  "Hello World" string.
                  <em class="parameter"><code>.</code></em>
                  (dot) is another example for a regular expression. A dot
                  matches any
                  single character; it would match, for example,
                  "a" or
                  "z"
                  or
                  "1".
                  
               </p>
               <p>
                  The following tables lists several example regular expressions and
                  describes which pattern they would match.
                  
                  
               </p>
               <div class="table"><a name="d441071e90"></a><p class="title"><b>Table&nbsp;1.&nbsp;Regex example</b></p>
                  <div class="table-contents">
                     <table summary="Regex example" border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Regex</th>
                              <th align="left">Matches</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">this is text</td>
                              <td align="left">Matches exactly "this is text"</td>
                           </tr>
                           <tr>
                              <td align="left">this\s+is\s+text</td>
                              <td align="left">Matches the word "this" followed by one or more whitespace
                                 characters
                                 followed by the word "is" followed by one or more
                                 whitespace
                                 characters
                                 followed by the word "text".
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">^\d+(\.\d+)?</td>
                              <td align="left">
                                 ^ defines that the patter must start at beginning of a new
                                 line.
                                 \d+ matches one or several digits. The ? makes the
                                 statement in
                                 brackets optional. \. matches ".", parentheses are
                                 used for
                                 grouping.
                                 Matches for example "5", "1.5" and "2.21".
                                 
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="introduction_languages"></a>1.3.&nbsp;Support for regular expressions in programming languages
                           
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  
               </p>
               <p> Regular expressions are supported by most programming
                  languages, e.g., Java, Perl, Groovy, etc.
                  Unfortunately
                  each language
                  supports
                  regular expressions slightly
                  different.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="prerequisites"></a>2.&nbsp;Prerequisites
                     </h2>
                  </div>
               </div>
            </div>
            <p>The following tutorial assumes that you have basic knowledge of
               the Java programming language.
            </p>
            <p>
               Some of the following examples use JUnit to validate the result. You
               should be
               able to adjust them in case if you do not want to use JUnit.
               To learn
               about JUnit please see
               <a class="ulink" href="http://www.vogella.com/tutorials/JUnit/article.html" target="_top">JUnit Tutorial</a>.
               
            </p>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="regex"></a>3.&nbsp;Rules of writing regular expressions
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               The following description is an overview of available meta
               characters
               which can
               be used in regular expressions. This
               chapter is
               supposed to
               be
               a
               references for the different
               regex
               elements.
               
            </p>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="regex_starter"></a>3.1.&nbsp;Common matching symbols
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  
               </p>
               <div class="table"><a name="d441071e146"></a><p class="title"><b>Table&nbsp;2.&nbsp;</b></p>
                  <div class="table-contents">
                     <table border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Regular Expression</th>
                              <th align="left">Description</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">
                                 <code class="code">.</code>
                                 
                              </td>
                              <td align="left">Matches any character</td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">^regex</code>
                                 
                              </td>
                              <td align="left">Finds regex that must match at the beginning of the line.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">regex$</code>
                                 
                              </td>
                              <td align="left">Finds regex that must match at the end of the line.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">[abc]</code>
                                 
                              </td>
                              <td align="left">Set definition, can match the letter a or b or c.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">[abc][vz]</code>
                                 
                              </td>
                              <td align="left">Set definition, can match a or b or c followed by
                                 either v
                                 or z.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">[^abc]</code>
                                 
                              </td>
                              <td align="left">When a caret appears as the first character inside square
                                 brackets,
                                 it
                                 negates the pattern. This ccontent/an match any
                                 character
                                 except
                                 a or b
                                 or c.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">[a-d1-7]</code>
                                 
                              </td>
                              <td align="left">Ranges: matches a letter between a and d and figures from
                                 1
                                 to 7,
                                 but not d1.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">X|Z</code>
                                 
                              </td>
                              <td align="left">Finds X or Z.</td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">XZ</code>
                                 
                              </td>
                              <td align="left">Finds X directly followed by Z.</td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">$</code>
                                 
                              </td>
                              <td align="left">Checks if a line end follows.</td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="regex_metacharacters"></a>3.2.&nbsp;Meta characters
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The following meta characters have a pre-defined meaning and
                  make
                  certain common patterns easier to use, e.g.,
                  <code class="code">\d</code>
                  instead of
                  <code class="code">[0..9]</code>.
                  
               </p>
               <p>
                  
               </p>
               <div class="table"><a name="d441071e251"></a><p class="title"><b>Table&nbsp;3.&nbsp;</b></p>
                  <div class="table-contents">
                     <table border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Regular Expression</th>
                              <th align="left">Description</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">
                                 <code class="code">\d</code>
                                 
                              </td>
                              <td align="left">
                                 Any digit, short for
                                 <code class="code">[0-9]</code>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">\D</code>
                                 
                              </td>
                              <td align="left">
                                 A non-digit, short for
                                 <code class="code">[^0-9]</code>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">\s</code>
                                 
                              </td>
                              <td align="left">
                                 A whitespace character, short for
                                 <code class="code">[ \t\n\x0b\r\f]</code>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">\S</code>
                                 
                              </td>
                              <td align="left">
                                 A non-whitespace character, short for
                                 <code class="code">[^\s]</code>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">\w</code>
                                 
                              </td>
                              <td align="left">
                                 A word character, short for
                                 <code class="code">[a-zA-Z_0-9]</code>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">\W</code>
                                 
                              </td>
                              <td align="left">
                                 A non-word character
                                 <code class="code">[^\w]</code>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">\S+</code>
                                 
                              </td>
                              <td align="left">Several non-whitespace characters</td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">\b</code>
                                 
                              </td>
                              <td align="left">
                                 Matches a word boundary where a word character is
                                 <code class="code">[a-zA-Z0-9_]</code>.
                                 
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
               <div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Tip</h3>
                  <p>
                     These meta characters have the same first letter as
                     their
                     representation, e.g., digit,
                     space, word, and boundary.
                     Uppercase
                     symbols define the opposite.
                     
                  </p>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="regex_quantifier"></a>3.3.&nbsp;Quantifier
                        </h3>
                     </div>
                  </div>
               </div>
               <p>A quantifier defines how often an element can occur. The symbols
                  ?, *, + and {} define the quantity of the regular
                  expressions
                  
               </p>
               <p>
                  
               </p>
               <div class="table"><a name="d441071e358"></a><p class="title"><b>Table&nbsp;4.&nbsp;</b></p>
                  <div class="table-contents">
                     <table border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                           <col align="left" class="c3">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Regular Expression</th>
                              <th align="left">Description</th>
                              <th align="left">Examples</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">
                                 <code class="code">*</code>
                                 
                              </td>
                              <td align="left">
                                 Occurs zero or more times, is short for
                                 <code class="code">{0,}</code>
                                 
                              </td>
                              <td align="left">
                                 <code class="code">X*</code>
                                 finds no or several letter X,
                                 <br>
                                 <code class="code">.*</code>
                                 finds any character
                                 sequence
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">+</code>
                                 
                              </td>
                              <td align="left">
                                 Occurs one or more times, is short for
                                 <code class="code">{1,}</code>
                                 
                              </td>
                              <td align="left">
                                 <code class="code">X+</code>
                                 - Finds one or several letter X
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">?</code>
                                 
                              </td>
                              <td align="left">
                                 Occurs no or one times,
                                 <code class="code">?</code>
                                 is short for
                                 <code class="code">{0,1}</code>.
                                 
                              </td>
                              <td align="left">
                                 <code class="code">X?</code>
                                 finds no or exactly one letter X
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">{X}</code>
                                 
                              </td>
                              <td align="left">
                                 Occurs X number of times,
                                 <code class="code">{}</code>
                                 describes the order of the
                                 preceding liberal
                                 
                              </td>
                              <td align="left">
                                 <code class="code">\d{3}</code>
                                 searches for three digits,
                                 <code class="code">.{10}</code>
                                 for any character sequence of
                                 length 10.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">{X,Y}</code>
                                 
                              </td>
                              <td align="left">Occurs between X and Y times,
                                 
                              </td>
                              <td align="left">
                                 <code class="code">\d{1,4}</code>
                                 means
                                 <code class="code">\d</code>
                                 must occur at least once and at a
                                 maximum of
                                 four.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">*?</code>
                                 
                              </td>
                              <td align="left">
                                 <code class="code">?</code>
                                 after a quantifier makes it a
                                 <em class="wordasword">reluctant quantifier</em>.
                                 It
                                 tries to find the smallest match. This makes the regular
                                 expression stop at the first match.
                                 
                              </td>
                              <td align="left">&nbsp;</td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="regex_grouping"></a>3.4.&nbsp;Grouping and Backreference
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  You can group parts of your regular expression. In your pattern
                  you
                  group
                  elements with round brackets, e.g.,
                  <code class="code">()</code>.
                  This allows you to
                  assign a repetition operator to a complete group.
                  
               </p>
               <p>
                  In addition these groups also create a backreference to the part of
                  the regular expression. This captures the group. A backreference
                  stores the part of the
                  <code class="code">String</code>
                  which matched the group. This allows you to use this part
                  in the
                  replacement.
                  
               </p>
               <p>
                  Via the
                  <code class="code">$</code>
                  you can
                  refer to a
                  group.
                  <code class="code">$1</code>
                  is the first
                  group,
                  <code class="code">$2</code>
                  the
                  second,
                  etc.
                  
               </p>
               <p> Let's, for example, assume you want to replace all whitespace
                  between a letter followed by a point or a comma. This would involve
                  that the
                  point or the comma is part of the pattern. Still it should be
                  included in the
                  result.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><em class="hl-comment" style="color: #080">// Removes whitespace between a word character and . or ,</em>
String pattern = <span class="hl-string" style="color:blue">"(\\w)(\\s+)([\\.,])"</span>;
System.out.println(EXAMPLE_TEST.replaceAll(pattern, <span class="hl-string" style="color:blue">"$1$3"</span>)); </pre><p>
                  
               </p>
               <p>This example extracts the text between a title tag.</p>
               <p>
                  
               </p><pre class="programlisting"><em class="hl-comment" style="color: #080">// Extract the text between the two title elements</em>
pattern = <span class="hl-string" style="color:blue">"(?i)(&lt;title.*?&gt;)(.+?)(&lt;/title&gt;)"</span>;
String updated = EXAMPLE_TEST.replaceAll(pattern, <span class="hl-string" style="color:blue">"$2"</span>); </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="regex_negative"></a>3.5.&nbsp;Negative Lookahead
                        </h3>
                     </div>
                  </div>
               </div>
               <p>Negative Lookahead provides the possibility to exclude a
                  pattern.
                  With this you can say that a string should not be followed by
                  another
                  string.
                  
               </p>
               <p>
                  Negative Lookaheads are defined via
                  <code class="code">(?!pattern)</code>. For example, the following will match "a" if "a" is not followed by
                  "b".
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">a(?!b) </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="regex_backslashes"></a>3.6.&nbsp;Backslashes in Java
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The backslash
                  <code class="code">\</code>
                  is an escape character
                  in Java
                  Strings. That means
                  backslash has a
                  predefined meaning in Java. You have to use double backslash
                  <code class="code">\\</code>
                  to
                  define a single
                  backslash.
                  If you want to define
                  <code class="code">\w</code>, then you must
                  be
                  using
                  <code class="code">\\w</code>
                  in
                  your regex.
                  If you want to use
                  backslash as a
                  literal,
                  you have to type
                  <code class="code">\\\\</code>
                  as
                  <code class="code">\</code>
                  is also an escape
                  character in
                  regular
                  expressions.
                  
               </p>
            </div>
         </div>
         <!-- Non responsive Lake Quincy Ads
<div data-type="ad" data-publisher="lqm.javaeclipseandroid.site" data-zone="inBetween01" data-format="728x90">
</div> -->
         <!-- Responsive Lake Quincy Ads -->
         <div id="ad-inBetween01">
            	<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-inBetween01');});</script>
            </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="string"></a>4.&nbsp;Using Regular Expressions with String.matches()
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="string_overview"></a>4.1.&nbsp;Overview
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  <code class="code">Strings</code>
                  in Java have built-in support for regular expressions.
                  <code class="code">Strings</code>
                  have four built-in methods for regular expressions, i.e., the
                  <code class="code">matches()</code>,
                  <code class="code">split())</code>,
                  <code class="code">replaceFirst()</code>
                  and
                  <code class="code">replaceAll()</code>
                  methods. The
                  <code class="code">replace()</code>
                  method does NOT support regular expressions.
                  
               </p>
               <p>
                  These methods are not optimized for performance. We will later
                  use classes which are optimized for performance.
                  
               </p>
               <p>
                  
               </p>
               <div class="table"><a name="d441071e591"></a><p class="title"><b>Table&nbsp;5.&nbsp;</b></p>
                  <div class="table-contents">
                     <table border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Method</th>
                              <th align="left">Description</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">
                                 <code class="code">s.matches("regex")</code>
                                 
                              </td>
                              <td align="left">
                                 Evaluates if
                                 <code class="code">"regex"</code>
                                 matches
                                 <code class="code">s</code>. Returns only
                                 <code class="code">true</code>
                                 if the
                                 WHOLE
                                 string can be matched.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">s.split("regex")</code>
                                 
                              </td>
                              <td align="left">
                                 Creates an array with substrings of
                                 <code class="code">s</code>
                                 divided at
                                 occurrence of
                                 <code class="code">"regex"</code>.
                                 <code class="code">"regex"</code>
                                 is not included in the result.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">s.replaceFirst("regex"), "replacement"</code>
                                 
                              </td>
                              <td align="left">
                                 Replaces first occurance of
                                 <code class="code">"regex"</code>
                                 with
                                 <code class="code">"replacement</code>.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">s.replaceAll("regex"), "replacement"</code>
                                 
                              </td>
                              <td align="left">
                                 Replaces all occurances of
                                 <code class="code">"regex"</code>
                                 with
                                 <code class="code">"replacement</code>.
                                 
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
               <p>
                  Create for the following example the Java project
                  <code class="code">de.vogella.regex.test</code>.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.regex.test;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> RegexTestStrings {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">final</span> String EXAMPLE_TEST = <span class="hl-string" style="color:blue">"This is my small example "</span>
      + <span class="hl-string" style="color:blue">"string which I'm going to "</span> + <span class="hl-string" style="color:blue">"use for pattern matching."</span>;

  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    System.out.println(EXAMPLE_TEST.matches(<span class="hl-string" style="color:blue">"\\w.*"</span>));
    String[] splitString = (EXAMPLE_TEST.split(<span class="hl-string" style="color:blue">"\\s+"</span>));
    System.out.println(splitString.length);<em class="hl-comment" style="color: #080">// should be 14</em>
    <span class="hl-keyword">for</span> (String string : splitString) {
      System.out.println(string);
    }
    <em class="hl-comment" style="color: #080">// replace all whitespace with tabs</em>
    System.out.println(EXAMPLE_TEST.replaceAll(<span class="hl-string" style="color:blue">"\\s+"</span>, <span class="hl-string" style="color:blue">"\t"</span>));
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="string_examples"></a>4.2.&nbsp;Examples
                        </h3>
                     </div>
                  </div>
               </div>
               <p> The following class gives several examples for the usage of
                  regular expressions with strings. See the comment for the purpose.
                  
               </p>
               <p>
                  If you want to test these examples, create for
                  the Java project
                  <code class="code">de.vogella.regex.string</code>.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.regex.string;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> StringMatcher {
  <em class="hl-comment" style="color: #080">// returns true if the string matches exactly "true"</em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> isTrue(String s){
    <span class="hl-keyword">return</span> s.matches(<span class="hl-string" style="color:blue">"true"</span>);
  }
  <em class="hl-comment" style="color: #080">// returns true if the string matches exactly "true" or "True"</em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> isTrueVersion2(String s){
    <span class="hl-keyword">return</span> s.matches(<span class="hl-string" style="color:blue">"[tT]rue"</span>);
  }

  <em class="hl-comment" style="color: #080">// returns true if the string matches exactly "true" or "True"</em>
  <em class="hl-comment" style="color: #080">// or "yes" or "Yes"</em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> isTrueOrYes(String s){
    <span class="hl-keyword">return</span> s.matches(<span class="hl-string" style="color:blue">"[tT]rue|[yY]es"</span>);
  }

  <em class="hl-comment" style="color: #080">// returns true if the string contains exactly "true"</em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> containsTrue(String s){
    <span class="hl-keyword">return</span> s.matches(<span class="hl-string" style="color:blue">".*true.*"</span>);
  }
  

  <em class="hl-comment" style="color: #080">// returns true if the string contains of three letters</em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> isThreeLetters(String s){
    <span class="hl-keyword">return</span> s.matches(<span class="hl-string" style="color:blue">"[a-zA-Z]{3}"</span>);
    <em class="hl-comment" style="color: #080">// simpler from for</em>
<em class="hl-comment" style="color: #080">//    return s.matches("[a-Z][a-Z][a-Z]");</em>
  }



  <em class="hl-comment" style="color: #080">// returns true if the string does not have a number at the beginning</em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> isNoNumberAtBeginning(String s){
    <span class="hl-keyword">return</span> s.matches(<span class="hl-string" style="color:blue">"^[^\\d].*"</span>);
  }
  <em class="hl-comment" style="color: #080">// returns true if the string contains a arbitrary number of characters except b</em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> isIntersection(String s){
    <span class="hl-keyword">return</span> s.matches(<span class="hl-string" style="color:blue">"([\\w&amp;&amp;[^b]])*"</span>);
  }
  <em class="hl-comment" style="color: #080">// returns true if the string contains a number less then 300</em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">boolean</span> isLessThenThreeHundred(String s){
    <span class="hl-keyword">return</span> s.matches(<span class="hl-string" style="color:blue">"[^0-9]*[12]?[0-9]{1,2}[^0-9]*"</span>);
  }

} </pre><p>
                  
               </p>
               <p> And a small JUnit Test to validates the examples.</p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.regex.string;

<span class="hl-keyword">import</span> org.junit.Before;
<span class="hl-keyword">import</span> org.junit.Test;

<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertFalse;
<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertTrue;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> StringMatcherTest {
  <span class="hl-keyword">private</span> StringMatcher m;

  <em><span class="hl-annotation" style="color: gray">@Before</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setup(){
    m = <span class="hl-keyword">new</span> StringMatcher();
  }

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testIsTrue() {
    assertTrue(m.isTrue(<span class="hl-string" style="color:blue">"true"</span>));
    assertFalse(m.isTrue(<span class="hl-string" style="color:blue">"true2"</span>));
    assertFalse(m.isTrue(<span class="hl-string" style="color:blue">"True"</span>));
  }

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testIsTrueVersion2() {
    assertTrue(m.isTrueVersion2(<span class="hl-string" style="color:blue">"true"</span>));
    assertFalse(m.isTrueVersion2(<span class="hl-string" style="color:blue">"true2"</span>));
    assertTrue(m.isTrueVersion2(<span class="hl-string" style="color:blue">"True"</span>));;
  }

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testIsTrueOrYes() {
    assertTrue(m.isTrueOrYes(<span class="hl-string" style="color:blue">"true"</span>));
    assertTrue(m.isTrueOrYes(<span class="hl-string" style="color:blue">"yes"</span>));
    assertTrue(m.isTrueOrYes(<span class="hl-string" style="color:blue">"Yes"</span>));
    assertFalse(m.isTrueOrYes(<span class="hl-string" style="color:blue">"no"</span>));
  }

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testContainsTrue() {
    assertTrue(m.containsTrue(<span class="hl-string" style="color:blue">"thetruewithin"</span>));
  }

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testIsThreeLetters() {
    assertTrue(m.isThreeLetters(<span class="hl-string" style="color:blue">"abc"</span>));
    assertFalse(m.isThreeLetters(<span class="hl-string" style="color:blue">"abcd"</span>));
  }

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testisNoNumberAtBeginning() {
    assertTrue(m.isNoNumberAtBeginning(<span class="hl-string" style="color:blue">"abc"</span>));
    assertFalse(m.isNoNumberAtBeginning(<span class="hl-string" style="color:blue">"1abcd"</span>));
    assertTrue(m.isNoNumberAtBeginning(<span class="hl-string" style="color:blue">"a1bcd"</span>));
    assertTrue(m.isNoNumberAtBeginning(<span class="hl-string" style="color:blue">"asdfdsf"</span>));
  }

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testisIntersection() {
    assertTrue(m.isIntersection(<span class="hl-string" style="color:blue">"1"</span>));
    assertFalse(m.isIntersection(<span class="hl-string" style="color:blue">"abcksdfkdskfsdfdsf"</span>));
    assertTrue(m.isIntersection(<span class="hl-string" style="color:blue">"skdskfjsmcnxmvjwque484242"</span>));
  }

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testLessThenThreeHundred() {
    assertTrue(m.isLessThenThreeHundred(<span class="hl-string" style="color:blue">"288"</span>));
    assertFalse(m.isLessThenThreeHundred(<span class="hl-string" style="color:blue">"3288"</span>));
    assertFalse(m.isLessThenThreeHundred(<span class="hl-string" style="color:blue">"328 8"</span>));
    assertTrue(m.isLessThenThreeHundred(<span class="hl-string" style="color:blue">"1"</span>));
    assertTrue(m.isLessThenThreeHundred(<span class="hl-string" style="color:blue">"99"</span>));
    assertFalse(m.isLessThenThreeHundred(<span class="hl-string" style="color:blue">"300"</span>));
  }

} </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="regexjava"></a>5.&nbsp;Pattern and Matcher
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               For advanced regular expressions the
               <code class="code">java.util.regex.Pattern</code>
               and
               <code class="code">java.util.regex.Matcher</code>
               classes
               are used.
               
            </p>
            <p>
               You first create a
               <code class="code">Pattern</code>
               object which defines the regular expression. This
               <code class="code">Pattern</code>
               object allows you to create a
               <code class="code">Matcher</code>
               object for a given string. This
               <code class="code">Matcher</code>
               object then allows you to do regex operations on a
               <code class="code">String</code>.
               
            </p>
            <p>
               
            </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.regex.test;

<span class="hl-keyword">import</span> java.util.regex.Matcher;
<span class="hl-keyword">import</span> java.util.regex.Pattern;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> RegexTestPatternMatcher {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">final</span> String EXAMPLE_TEST = <span class="hl-string" style="color:blue">"This is my small example string which I'm going to use for pattern matching."</span>;

  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    Pattern pattern = Pattern.compile(<span class="hl-string" style="color:blue">"\\w+"</span>);
    <em class="hl-comment" style="color: #080">// in case you would like to ignore case sensitivity,</em>
    <em class="hl-comment" style="color: #080">// you could use this statement:</em>
    <em class="hl-comment" style="color: #080">// Pattern pattern = Pattern.compile("\\s+", Pattern.CASE_INSENSITIVE);</em>
    Matcher matcher = pattern.matcher(EXAMPLE_TEST);
    <em class="hl-comment" style="color: #080">// check all occurance</em>
    <span class="hl-keyword">while</span> (matcher.find()) {
      System.out.print(<span class="hl-string" style="color:blue">"Start index: "</span> + matcher.start());
      System.out.print(<span class="hl-string" style="color:blue">" End index: "</span> + matcher.end() + <span class="hl-string" style="color:blue">" "</span>);
      System.out.println(matcher.group());
    }
    <em class="hl-comment" style="color: #080">// now create a new pattern and matcher to replace whitespace with tabs</em>
    Pattern replace = Pattern.compile(<span class="hl-string" style="color:blue">"\\s+"</span>);
    Matcher matcher2 = replace.matcher(EXAMPLE_TEST);
    System.out.println(matcher2.replaceAll(<span class="hl-string" style="color:blue">"\t"</span>));
  }
} </pre><p>
               
            </p>
         </div> 
         
         <!-- Responsive Lake Quincy Ads -->
         
         <div id="ad-inBetween02">
            	<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-inBetween02');});</script>
            </div>
         
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="examples"></a>6.&nbsp;Java Regex Examples
                     </h2>
                  </div>
               </div>
            </div>
            <p>The following lists typical examples for the usage of regular
               expressions. I hope you find similarities to your real-world problems.
               
            </p>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="examples_or"></a>6.1.&nbsp;Or
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Task: Write a regular expression which matches a text line
                  if
                  this
                  text line contains either the word "Joe" or the word
                  "Jim" or
                  both.
                  
               </p>
               <p>
                  Create a project
                  <code class="code">de.vogella.regex.eitheror</code>
                  and the following class.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.regex.eitheror;

<span class="hl-keyword">import</span> org.junit.Test;

<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertFalse;
<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertTrue;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> EitherOrCheck {
  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testSimpleTrue() {
    String s = <span class="hl-string" style="color:blue">"humbapumpa jim"</span>;
    assertTrue(s.matches(<span class="hl-string" style="color:blue">".*(jim|joe).*"</span>));
    s = <span class="hl-string" style="color:blue">"humbapumpa jom"</span>;
    assertFalse(s.matches(<span class="hl-string" style="color:blue">".*(jim|joe).*"</span>));
    s = <span class="hl-string" style="color:blue">"humbaPumpa joe"</span>;
    assertTrue(s.matches(<span class="hl-string" style="color:blue">".*(jim|joe).*"</span>));
    s = <span class="hl-string" style="color:blue">"humbapumpa joe jim"</span>;
    assertTrue(s.matches(<span class="hl-string" style="color:blue">".*(jim|joe).*"</span>));
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="examples_phone"></a>6.2.&nbsp;Phone number
                        </h3>
                     </div>
                  </div>
               </div>
               <p>Task: Write a regular expression which matches any phone
                  number.
                  
               </p>
               <p>
                  A
                  phone number in this example consists either out of 7 numbers
                  in a
                  row or out of 3 number, a (white)space or a dash and then 4
                  numbers.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.regex.phonenumber;

<span class="hl-keyword">import</span> org.junit.Test;

<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertFalse;
<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertTrue;


<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> CheckPhone {
  
  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testSimpleTrue() {
    String pattern = <span class="hl-string" style="color:blue">"\\d\\d\\d([,\\s])?\\d\\d\\d\\d"</span>;
    String s= <span class="hl-string" style="color:blue">"1233323322"</span>;
    assertFalse(s.matches(pattern));
    s = <span class="hl-string" style="color:blue">"1233323"</span>;
    assertTrue(s.matches(pattern));
    s = <span class="hl-string" style="color:blue">"123 3323"</span>;
    assertTrue(s.matches(pattern));
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="examples_number"></a>6.3.&nbsp;Check for a certain number range
                        </h3>
                     </div>
                  </div>
               </div>
               <p> The following example will check if a text contains a number
                  with 3 digits.
                  
               </p>
               <p>
                  Create the Java project
                  <code class="code">de.vogella.regex.numbermatch</code>
                  and
                  the
                  following class.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.regex.numbermatch;
<span class="hl-keyword">import</span> java.util.regex.Matcher;
<span class="hl-keyword">import</span> java.util.regex.Pattern;

<span class="hl-keyword">import</span> org.junit.Test;

<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertFalse;
<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertTrue;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> CheckNumber {

  
  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testSimpleTrue() {
    String s= <span class="hl-string" style="color:blue">"1233"</span>;
    assertTrue(test(s));
    s= <span class="hl-string" style="color:blue">"0"</span>;
    assertFalse(test(s));
    s = <span class="hl-string" style="color:blue">"29 Kasdkf 2300 Kdsdf"</span>;
    assertTrue(test(s));
    s = <span class="hl-string" style="color:blue">"99900234"</span>;
    assertTrue(test(s));
  }
  

  
  
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">boolean</span> test (String s){
    Pattern pattern = Pattern.compile(<span class="hl-string" style="color:blue">"\\d{3}"</span>);
    Matcher matcher = pattern.matcher(s);
    <span class="hl-keyword">if</span> (matcher.find()){
      <span class="hl-keyword">return</span> true; 
    } 
    <span class="hl-keyword">return</span> false; 
  }

} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="examples_linkchecker"></a>6.4.&nbsp;Building a link checker
                        </h3>
                     </div>
                  </div>
               </div>
               <p> The following example allows you to extract all valid
                  links from
                  a
                  webpage. It does not consider links which start with
                  "javascript:" or
                  "mailto:".
                  
               </p>
               <p>
                  Create a Java project called
                  <em class="wordasword">de.vogella.regex.weblinks</em>
                  and the following class:
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.regex.weblinks;

<span class="hl-keyword">import</span> java.io.BufferedReader;
<span class="hl-keyword">import</span> java.io.IOException;
<span class="hl-keyword">import</span> java.io.InputStreamReader;
<span class="hl-keyword">import</span> java.net.MalformedURLException;
<span class="hl-keyword">import</span> java.net.URL;
<span class="hl-keyword">import</span> java.util.ArrayList;
<span class="hl-keyword">import</span> java.util.List;
<span class="hl-keyword">import</span> java.util.regex.Matcher;
<span class="hl-keyword">import</span> java.util.regex.Pattern;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> LinkGetter {
  <span class="hl-keyword">private</span> Pattern htmltag;
  <span class="hl-keyword">private</span> Pattern link;

  <span class="hl-keyword">public</span> LinkGetter() {
    htmltag = Pattern.compile(<span class="hl-string" style="color:blue">"&lt;a\\b[^&gt;]*href=\"[^&gt;]*&gt;(.*?)&lt;/a&gt;"</span>);
    link = Pattern.compile(<span class="hl-string" style="color:blue">"href=\"[^&gt;]*\"&gt;"</span>);
  }

  <span class="hl-keyword">public</span> List&lt;String&gt; getLinks(String url) {
    List&lt;String&gt; links = <span class="hl-keyword">new</span> ArrayList&lt;String&gt;();
    <span class="hl-keyword">try</span> {
      BufferedReader bufferedReader = <span class="hl-keyword">new</span> BufferedReader(<span class="hl-keyword">new</span> InputStreamReader(<span class="hl-keyword">new</span> URL(url).openStream()));
      String s;
      StringBuilder builder = <span class="hl-keyword">new</span> StringBuilder();
      <span class="hl-keyword">while</span> ((s = bufferedReader.readLine()) != null) {
        builder.append(s);
      }

      Matcher tagmatch = htmltag.matcher(builder.toString());
      <span class="hl-keyword">while</span> (tagmatch.find()) {
        Matcher matcher = link.matcher(tagmatch.group());
        matcher.find();
        String link = matcher.group().replaceFirst(<span class="hl-string" style="color:blue">"href=\""</span>, <span class="hl-string" style="color:blue">""</span>)
            .replaceFirst(<span class="hl-string" style="color:blue">"\"&gt;"</span>, <span class="hl-string" style="color:blue">""</span>)
            .replaceFirst(<span class="hl-string" style="color:blue">"\"[\\s]?target=\"[a-zA-Z_0-9]*"</span>, <span class="hl-string" style="color:blue">""</span>);
        <span class="hl-keyword">if</span> (valid(link)) {
          links.add(makeAbsolute(url, link));
        }
      }
    } <span class="hl-keyword">catch</span> (MalformedURLException e) {
      e.printStackTrace();
    } <span class="hl-keyword">catch</span> (IOException e) {
      e.printStackTrace();
    }
    <span class="hl-keyword">return</span> links;
  }

  <span class="hl-keyword">private</span> <span class="hl-keyword">boolean</span> valid(String s) {
    <span class="hl-keyword">if</span> (s.matches(<span class="hl-string" style="color:blue">"javascript:.*|mailto:.*"</span>)) {
      <span class="hl-keyword">return</span> false;
    }
    <span class="hl-keyword">return</span> true;
  }

  <span class="hl-keyword">private</span> String makeAbsolute(String url, String link) {
    <span class="hl-keyword">if</span> (link.matches(<span class="hl-string" style="color:blue">"http://.*"</span>)) {
      <span class="hl-keyword">return</span> link;
    }
    <span class="hl-keyword">if</span> (link.matches(<span class="hl-string" style="color:blue">"/.*"</span>) &amp;&amp; url.matches(<span class="hl-string" style="color:blue">".*$[^/]"</span>)) {
      <span class="hl-keyword">return</span> url + <span class="hl-string" style="color:blue">"/"</span> + link;
    }
    <span class="hl-keyword">if</span> (link.matches(<span class="hl-string" style="color:blue">"[^/].*"</span>) &amp;&amp; url.matches(<span class="hl-string" style="color:blue">".*[^/]"</span>)) {
      <span class="hl-keyword">return</span> url + <span class="hl-string" style="color:blue">"/"</span> + link;
    }
    <span class="hl-keyword">if</span> (link.matches(<span class="hl-string" style="color:blue">"/.*"</span>) &amp;&amp; url.matches(<span class="hl-string" style="color:blue">".*[/]"</span>)) {
      <span class="hl-keyword">return</span> url + link;
    }
    <span class="hl-keyword">if</span> (link.matches(<span class="hl-string" style="color:blue">"/.*"</span>) &amp;&amp; url.matches(<span class="hl-string" style="color:blue">".*[^/]"</span>)) {
      <span class="hl-keyword">return</span> url + link;
    }
    <span class="hl-keyword">throw</span> <span class="hl-keyword">new</span> RuntimeException(<span class="hl-string" style="color:blue">"Cannot make the link absolute. Url: "</span> + url
        + <span class="hl-string" style="color:blue">" Link "</span> + link);
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="examples_duplicated words"></a>6.5.&nbsp;Finding duplicated words
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The following regular expression
                  matches duplicated words.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">\b(\w+)\s+\1\b </pre><p>
                  
               </p>
               <p>
                  <code class="code">\b</code>
                  is a word boundary and
                  <code class="code">\1</code>
                  references to the captured match
                  of
                  the
                  first group, i.e., the first
                  word.
                  
               </p>
               <p>
                  The
                  <code class="code">(?!-in)\b(\w+) \1\b</code>
                  finds duplicate words if they do not start with "-in".
                  
               </p>
               <div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Tip</h3>
                  <p>
                     Add
                     <code class="code">(?s)</code>
                     to search across multiple lines.
                     
                  </p>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="examples_startwithemptyline"></a>6.6.&nbsp;Finding elements which start in a new line
                        </h3>
                     </div>
                  </div>
               </div>
               <p>The following regular expression allows you to find the "title"
                  word, in case it starts in a new line, potentially with leading
                  spaces.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">(\n\s*)title </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="examples_nonjavadoc"></a>6.7.&nbsp;Finding (Non-Javadoc) statements
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Sometimes (Non-Javadoc) are used in Java source code to indicate that
                  the method overrides a super method. As of Java 1.6 this can be done
                  via the
                  <code class="code">@Override</code>
                  annotation and it is possible to remove these statements from your
                  code. The following regular expression can be used to identify these
                  statements.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">(?s) /\* \(non-Javadoc\).*?\*/ </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="regularexpressionseclipse"></a>7.&nbsp;Processing regular expressions in Eclipse
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               The Eclipse IDE allows to perform search and replace across a set
               of
               files using regular expressions. In Eclipse use the
               <span class="keycap"><strong>Ctrl</strong></span>+<span class="keycap"><strong>H</strong></span>
               shortcut to open the
               <span class="guilabel">Search</span>
               dialog.
               
            </p>
            <p>
               Select the
               <span class="guilabel">File Search</span>
               tab and
               check the
               <span class="guilabel">Regular expression</span>
               flag before entering your regular expression. You can also specify the
               file type and the scope for the search and replace operation.
               
            </p>
            <p>The
               following screenshots demonstrate how to search for the &lt;/ulink&gt;
               XML tag with leading whitespace and how to remove the whitespace.
               
            </p>
            <p>
               
            </p>
            <div class="mediaobject"><img src="images/xregularexpressioneclipse10.png.pagespeed.ic.8ZlpRvCx_I.png" alt="Search and replace in Eclipse part 1"></div>
            <p>
               
            </p>
            <p>
               
            </p>
            <div class="mediaobject"><img src="images/xregularexpressioneclipse20.png.pagespeed.ic.8LFc6cWFkQ.png" alt="Search and replace in Eclipse part 2"></div>
            <p>
               
            </p>
            <p>
               The resulting dialog allows you to review the changes and remove
               elements which should not be replaced. If you press
               the
               <span class="guibutton">OK</span>
               button, the changes are applied.
               
            </p>
            <p>
               
            </p>
            <div class="mediaobject"><img src="images/xregularexpressioneclipse30.png.pagespeed.ic.y1fo7eY7Dx.png" alt="Search and replace in Eclipse part 3"></div>
            <p>
               
            </p>
         </div> 
         <script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
         
         <!-- Article - Before Support 336 x 280 -->
         <ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3851443674951530" data-ad-slot="3645921933"></ins>
         <script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="supportandlicense"></a>8.&nbsp;About this website
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="thankyou"></a>8.1.&nbsp;Donate to support free tutorials
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  
                  	
               </p>
               <p>
                  		Please consider a contribution
                  	<a href="http://www.vogella.com/support.html">
                     			<img src="http://www.vogella.com/img/common/40x50xvogella-donate.png.pagespeed.ic.gMuY8kQC6X.png" width="40" height="50" alt="Support free tutorials" title="Support free tutorials" onclick="_gaq.push(['_trackEvent', 'Donations', 'clicked', 'Buttom tutorial in thank you']);"></a>
                  			if this article helped you. It will help to maintain our content and our Open Source activities.
                  	
               </p>
               <p>
                  
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="questions"></a>8.2.&nbsp;Questions and discussion
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Writing and updating these tutorials is a lot of work.
                  If this
                  free community service was helpful,
                  you can support the cause by
                  giving
                  a tip
                  as well as reporting typos and factual errors.
                  
               </p>
               <p>
                  If you find errors in this tutorial, please notify me
                  (see the
                  <a class="ulink" href="#top" target="_top">top of the page</a>).
                  Please note that due to the high volume of feedback I
                  receive, I
                  cannot answer questions to your implementation. Ensure you
                  have read
                  the
                  <a class="ulink" href="http://www.vogella.com/faq.html" target="_top">vogella FAQ</a>
                  as
                  I don't respond to questions already answered there.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="thankyou"></a>8.3.&nbsp;License for this tutorial and its code
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  This tutorial is Open Content under the
                  <a class="ulink" href="http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en" target="_top">
                     CC BY-NC-SA 3.0 DE
                     </a>
                  license. Source code in this tutorial is distributed under the
                  <a class="ulink" href="https://www.eclipse.org/legal/epl-v10.html" target="_top">Eclipse Public License</a>.
                  See the
                  <a class="ulink" href="http://www.vogella.com/license.html" target="_top">vogella License</a>
                  page
                  for details on the terms of reuse.
                  
               </p>
            </div>
         </div>
         
         
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="resources"></a>9.&nbsp;Links and Literature
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               <a class="ulink" href="http://www.regular-expressions.info/java.html" target="_top">Regular-Expressions.info on Using Regular Expressions in Java</a>
               
            </p>
            <p>
               <a class="ulink" href="http://docs.oracle.com/javase/tutorial/essential/regex/" target="_top">The Java Tutorials: Lesson: Regular Expressions</a>
               
            </p>
         </div><img src="http://vg04.met.vgwort.de/na/171105a7592248c7a15a43aea5162db2" width="1" height="1" alt=""></div>
      
      
      
   <script pagespeed_no_defer="">//<![CDATA[
(function(){window.pagespeed=window.pagespeed||{};var f=window.pagespeed,h=function(e,a,c,b){this.c=e;this.a=a;this.b=c;this.d=b};f.beaconUrl="";
var k=function(e){var a=e.c,c=window.mod_pagespeed_start,b=Number(new Date)-c,a=a+(-1==a.indexOf("?")?"?":"&"),a=a+"ets="+("load"==e.a?"load:":"unload:"),a=a+b;if("beforeunload"!=e.a||!window.mod_pagespeed_loaded){a+="&r"+e.a+"=";if(window.performance){var b=window.performance.timing,d=b.navigationStart,g=b.requestStart,a=a+(b[e.a+"EventStart"]-d),a=a+("&nav="+(b.fetchStart-d)),a=a+("&dns="+(b.domainLookupEnd-b.domainLookupStart)),a=a+("&connect="+(b.connectEnd-b.connectStart)),a=a+("&req_start="+
(g-d)),a=a+("&ttfb="+(b.responseStart-g)),a=a+("&dwld="+(b.responseEnd-b.responseStart)),a=a+("&dom_c="+(b.domContentLoadedEventStart-d));window.performance.navigation&&(a+="&nt="+window.performance.navigation.type);d=-1;b.msFirstPaint?d=b.msFirstPaint:window.chrome&&window.chrome.loadTimes&&(d=Math.floor(1E3*window.chrome.loadTimes().firstPaintTime));d=d-g;0<=d&&(a+="&fp="+d)}else a+=b;f.getResourceTimingData&&window.parent==window&&(a+=f.getResourceTimingData());a+=window.parent!=window?"&ifr=1":
"&ifr=0";"load"==e.a&&(window.mod_pagespeed_loaded=!0,(b=window.mod_pagespeed_num_resources_prefetched)&&(a+="&nrp="+b),(b=window.mod_pagespeed_prefetch_start)&&(a+="&htmlAt="+(c-b)));f.panelLoader&&(c=f.panelLoader.getCsiTimingsString(),""!=c&&(a+="&b_csi="+c));f.criticalCss&&(c=f.criticalCss,a+="&ccis="+c.total_critical_inlined_size+"&cces="+c.total_original_external_size+"&ccos="+c.total_overhead_size+"&ccrl="+c.num_replaced_links+"&ccul="+c.num_unreplaced_links);""!=e.b&&(a+=e.b);document.referrer&&
(a+="&ref="+encodeURIComponent(document.referrer));a+="&url="+encodeURIComponent(e.d);f.beaconUrl=a;(new Image).src=a}};f.e=function(e,a,c,b){var d=new h(e,a,c,b);window.addEventListener?window.addEventListener(a,function(){k(d)},!1):window.attachEvent("on"+a,function(){k(d)})};f.addInstrumentationInit=f.e;})();

pagespeed.addInstrumentationInit('/mod_pagespeed_beacon', 'load', '', 'http://www.vogella.com/tutorials/JavaRegularExpressions/article.html');
//]]></script></body>
</html>

