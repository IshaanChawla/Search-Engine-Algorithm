<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
      <title>Unit Testing with JUnit - Tutorial</title>
      <script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><link rel="stylesheet" type="text/css" href="http://www.vogella.com/css/A.articles.css.pagespeed.cf.R8TsdYc8Ks.css">
      <meta name="generator" content="DocBook XSL Stylesheets V1.77.1">
      <meta name="description" content="JUnit This tutorial explains unit testing with JUnit 4.x. It explains the creation of JUnit tests and how to run them in Eclipse or via own code.">
      <link rel="shortcut icon" href="http://www.vogella.com/favicon.ico">
      <meta name="viewport" content="width=device-width, initial-scale=1">
   </head>
   <body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
      
      
      <!-- Google analytics (Jennifer) -->
      
      <script type="text/javascript">var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-3967758-1']);_gaq.push(['_setDomainName','vogella.com']);_gaq.push(['_setAllowLinker',true]);_gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga,s);})();</script>
      
      
      
      <!-- Load jQuery -->
      <script type="text/javascript" src="http://www.vogella.com/javascript/jquery/jquery.js.pagespeed.jm.LynoS8h5RR.js"></script>
      
      <!-- jQuery Hide Buttons -->
      <script type="text/javascript">//<![CDATA[
var fixed=false;$(document).scroll(function(){if($(this).scrollTop()>955){if(!fixed){fixed=true;$('.bottom_left').css({display:'block'});$('.bottom_right').css({display:'block'});}}else{if(fixed){fixed=false;$('.bottom_left').css({display:'none'});$('.bottom_right').css({display:'none'});}}});
//]]></script>
      
      
      <!-- Lake Quincy Ads - old way now replaced with Lake Quincy Ads Responsive
<script type='text/javascript'>
	function _dmBootstrap(file) {
		var _dma = document.createElement('script');
		_dma.type = 'text/javascript';
		_dma.async = true;
		_dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
	}
	function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js');}
	(function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000);})();
</script>-->
      
      
      <!-- Lake Quincy Ads Responsive -->  
      <script type="text/javascript">var googletag=googletag||{};googletag.cmd=googletag.cmd||[];(function(){var gads=document.createElement('script');gads.async=true;gads.type='text/javascript';var useSSL='https:'==document.location.protocol;gads.src=(useSSL?'https:':'http:')+'//www.googletagservices.com/tag/js/gpt.js';var node=document.getElementsByTagName('script')[0];node.parentNode.insertBefore(gads,node);})();</script>
      
      <script type="text/javascript">googletag.cmd.push(function(){var mapping=googletag.sizeMapping().addSize([320,700],[300,250]).addSize([750,200],[300,250]).addSize([1170,200],[728,90]).build();googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/right',[160,600],'ad-left').addService(googletag.pubads()).setTargeting('left');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/beforeTOC',[[300,250],[728,90]],'ad-beforeTOC').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('beforeTOC');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/inBetween01',[[300,250],[728,90]],'ad-inBetween01').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('inBetween01');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/inBetween02',[[300,250],[728,90]],'ad-inBetween02').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('inBetween02');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/inBetween03',[[300,250],[728,90]],'ad-inBetween03').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('inBetween03');googletag.pubads().enableSingleRequest();googletag.enableServices();});</script>
      
      <div id="headerpart">
         
         	
         <div id="logo">
            		<a title="vogella.com" href="http://www.vogella.com">
               			<img src="http://www.vogella.com/img/logo/xindex_logo.png.pagespeed.ic.W70tcDQqll.png" alt="vogella.com"> 
               		</a>
            	
         </div> 
         <!-- logo -->
         	
         	
         <div id="topnav">
            		
            <ul id="home" class="topnav">
               			
               <li id="home-icon"><a href="http://www.vogella.com/"></a></li>
               			
               <li class="currentpage"> <a href="http://www.vogella.com/tutorials/">Tutorials</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/tutorials/android.html">Android Programming</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/eclipseide.html">Eclipse IDE</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/eclipse.html">Eclipse RCP/Plug-ins</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/versioncontrol.html">Version Control</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/web.html">Web</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/java.html">Java</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/technology.html">Technology</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/google.html">Google</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/algorithms.html">Algorithms</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/designpattern.html">Design Pattern</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               			
               <li><a href="http://www.vogella.com/training/">Services</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/training/android/index.html">Android Development Training</a>
                        						
                        <ul>
                           							
                           <li><a href="http://www.vogella.com/training/android/androidprofessional.html">Android Professional</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/android/androidtesting.html">Android Testing and Appl. Optimization</a></li>
                           						
                        </ul>
                        					
                     </li>
                     					
                     <li><a href="http://www.vogella.com/training/eclipse/index.html">Eclipse Development Training</a>
                        						
                        <ul>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsercp.html">Eclipse RCP</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipseide.html">Eclipse IDE Expert</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsercpmigration.html">Eclipse RCP Migration</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsecontribution.html">	Contributing to Eclipse</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipseplugin.html">Eclipse IDE Plug-in Development</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/tycho.html">Maven/Tycho</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/rcpjavaeespring.html">Eclipse RCP with Java EE and Spring</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipseoxygen.html">oXygen in Eclipse</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsenattable.html">NatTable</a></li>
                           						
                        </ul>
                        					
                     </li>
                     					
                     <li><a href="http://www.vogella.com/training/git.html">Git Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/groovy.html">Groovy Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/gradle.html">Gradle Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/java.html">Java Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/spring.html">Spring Workshop</a></li>
                     					
                     <li><a href="http://www.vogella.com/consulting/">Expert Consulting</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/products/">Products</a>
                  				
                  <ul>
                     					
                     <li><a href="http://saneclipse.vogella.com">saneclipse</a></li>
                     					
                     <li><a href="http://codemodify.vogella.com">CodeModify</a></li>
                     					
                     <li><a href="http://preferencespy.vogella.com">PreferenceSpy</a></li>
                     					
                     <!--<li><a href="http://e4tools.vogella.com">e4 tools</a></li>
					<li><a href="http://e4perspectiveswitcher.vogella.com">e4 perspectiveSwitcher</a></li>-->
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/books/">Books</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/books/eclipsecontribution.html">Contributing to the Eclipse Project</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/eclipsercp.html">Eclipse RCP</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/eclipseide.html">Eclipse IDE</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/git.html">Git</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/android.html">Android SQlite and ContentProvider</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/company/">Company</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/aboutvogella.html">About us</a></li>
                     					
                     <li><a href="http://www.vogella.com/people/index.html">People at vogella</a></li>
                     					
                     <li><a href="http://www.vogella.com/customers.html" onclick="_gaq.push(['_trackEvent', 'Customers', 'clicked', 'Header']);">Reference Customers</a></li>
                     					
                     <li><a href="http://blog.vogella.com/">Blog</a></li>
                     					
                     <li><a href="http://www.vogella.com/jobs/">Jobs</a></li>
                     					
                     <li><a href="http://www.vogella.com/faq.html">FAQ</a></li>
                     					
                     <li><a href="http://www.vogella.com/legal.html">Legal</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/support.html">Donate</a></li>
               			
               <li><a href="http://www.vogella.com/contact.html">Contact us</a></li>
               		
            </ul>
            	
         </div>
         <!-- topnav -->
         	
         
         	
         <div id="searchfixed">
            		
            <form action="http://www.vogella.com/search.html" id="cse-search-box">
               			
               <div id="searchwrapper">
                  
                  				<input type="hidden" name="cx" value="partner-pub-3851443674951530:3991491935">
                  				<input type="hidden" name="cof" value="FORID:10">
                  				<input type="hidden" name="ie" value="UTF-8">
                  				<input type="text" placeholder="Search" id="search_field" name="q" size="55">
                  				<input type="image" src="http://www.vogella.com/img/icons/xsrch.png.pagespeed.ic.BP8TtuQRzJ.png" id="search_button" name="sa" alt="Search">
                  			
               </div>
               		
            </form>
            	
         </div> 
         <!-- searchfixed -->
         
         
      </div> 
      <!-- headerpart -->
      
      
      <div id="leftcol">
         
         	<br>
         	<br>
         	
         	<a href="http://www.vogella.com/support.html">
            		<img src="http://www.vogella.com/img/common/140x150xvogella-donate.png.pagespeed.ic.gMuY8kQC6X.png" width="140" height="150" alt="Support free tutorials" title="Support free tutorials" onclick="_gaq.push(['_trackEvent', 'Donations', 'clicked', 'Top tutorial']);"></a>
         
         	<br>
         	<br>
         
         	<script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
         	
         <!-- LeftColumn -->
         	<ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-3851443674951530" data-ad-slot="6294971031"></ins>
         	<script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
         
         	<p></p>
         	
         	<br>
         	<br>
         
         	
         <!-- Nonresponsive Lake Quincy 160x600 Wide Skycraper code
	<div data-type="ad" data-publisher="lqm.javaeclipseandroid.site" data-zone="right" data-format="160x600"></div>-->
         	
         	
         <!-- Responsive Lake Quincy Ads -->
         	
         <div id="ad-left">
            		<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-left');});</script>
            	</div>
         
      </div> 
      <!-- leftcolumn -->
      
      
      <div id="rightcol">
         
         	
         <!-- vogellas own advertising for training and books --> 	
         	
         <p class="training-bg">
            		<a class="image-z" href="http://www.vogella.com/training/" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'whole Box']);">
               			<img src="http://www.vogella.com/img/training/200x364xvogellatraining_ad.png.pagespeed.ic.KQGlbyMRAP.png" height="364" width="200" alt="vogella training">
               		</a>
            		<a class="btn-training button1" href="http://www.vogella.com/training/" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'training']);">Training</a>
            		<a class="btn-training button2" href="http://www.vogella.com/books/index.html" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'books']);">Books</a>
            	
         </p> 
         	
         	
         <div class="bottom_right">
            		
            <div class="social_media">
               			<a href="http://www.twitter.com/vogellacompany">
                  				
                  <h1>FOLLOW<br>ME ON
                  </h1> 
                  				<img src="http://www.vogella.com/img/tutoriallinks/xtwitter.png.pagespeed.ic.5z4YhYIkb2.png" alt="Follow me on twitter">
                  			</a>
               		
            </div>
            <!-- social_media -->
            
            		
            <div class="social_media">
               			<a rel="me" href="https://profiles.google.com/104044918586174763681">
                  				
                  <h1>FOLLOW<br>ME ON
                  </h1> 
                  				<img src="http://www.vogella.com/img/tutoriallinks/xgoogle_plus.png.pagespeed.ic.d6W0KZShGF.png" alt="Follow me on Google+">
                  			</a>
               		
            </div>
            <!-- social_media -->
            	
         </div> 
         <!-- bottom_right -->
         	
         	
         <div class="bottom_left">
            	
            <div class="services">
               		<a href="http://www.vogella.com/training/index.html">
                  	<img src="http://www.vogella.com/img/tutoriallinks/xtraining.png.pagespeed.ic.xjFDFI8z_E.png" alt="Get training" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'Fix buttom left training']);">
                  	
                  <h1>GET TRAINING</h1>
                  	</a>
               
            </div>
            <!-- services -->
            	
            <div class="services">
               	<a href="http://www.vogella.com/books/index.html">
                  	<img src="http://www.vogella.com/img/tutoriallinks/books.png.pagespeed.ce.iDpNUUudib.png" alt="Purchase books" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'Fix buttom left books']);">
                  	
                  <h1>PURCHASE BOOKS</h1>
                  	</a>
               
            </div>
            <!-- services -->
            	
            <div class="services">	
               	<a href="http://www.vogella.com/support.html">
                  	<img src="http://www.vogella.com/img/tutoriallinks/xdonate.png.pagespeed.ic.DDVinfleA6.png" alt="Support free tutorials" onclick="_gaq.push(['_trackEvent', 'Donations', 'clicked', 'Fix buttom left']);">
                  	
                  <h1>SUPPORT FREE TUTORIAL</h1>
                  	</a>
               
               
            </div> 
            <!-- services -->       
            
         </div> 
         <!-- bottom_left -->
         
         
      </div> 
      <!--rightcol-->
      
      
      <div class="article">
         <div class="titlepage">
            <div>
               <div>
                  <h2 class="title"><a name="d400319e1"></a>Unit Testing with JUnit - Tutorial
                  </h2>
               </div>
               <div>
                  <div class="author">
                     <h3 class="author"><span class="firstname">Lars</span> <span class="surname">Vogel</span></h3>
                  </div>
               </div>
               <div>
                  <p class="releaseinfo">
                     
                  </p>
                  <p>Version 2.6</p>
                  <p class="releaseinfo">
                     
                  </p>
               </div>
               <div>
                  <p class="copyright">Copyright ? 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 vogella GmbH</p>
               </div>
               <div>
                  <p class="pubdate">15.05.2015</p>
               </div>
               <div>
                  <div class="abstract"><a name="abstract"></a><p class="title"><b>JUnit</b></p>
                     <p>
                        This tutorial explains unit testing with JUnit
                        4.x. It explains
                        the creation of JUnit tests and how to run them in Eclipse or via
                        own code.
                        
                     </p>
                  </div>
               </div>
            </div>
            <div>
               <div xmlns:fo="http://www.w3.org/1999/XSL/Format" id="ad-beforeTOC"><script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-beforeTOC');});</script></div>
            </div>
            <hr>
         </div>
         <div class="toc">
            <p><b>Table of Contents</b></p>
            <dl>
               <dt><span class="section"><a href="#unitintegrationperformancetests">1. Unit tests, integration tests and performance tests</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#junit_intro">1.1. Unit tests and unit testing</a></span></dt>
                     <dt><span class="section"><a href="#junit_organization">1.2. Integration tests</a></span></dt>
                     <dt><span class="section"><a href="#junit_performancetests">1.3. Performance tests</a></span></dt>
                     <dt><span class="section"><a href="#whytesting">1.4. Building effective tests</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#testingterminology">2. Testing terminology</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#junit_testfixture">2.1. Test fixture</a></span></dt>
                     <dt><span class="section"><a href="#behaviorvsstatetesting">2.2. Behavior vs. state testing</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#testorganization">3. Test organization</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#junit_testorganization">3.1. Test organization for Java projects</a></span></dt>
                     <dt><span class="section"><a href="#junit_whattotest">3.2. What should you test?</a></span></dt>
                     <dt><span class="section"><a href="#junit_legacycode">3.3. Introducing tests in legacy code</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#unittesting">4. Testing frameworks for Java</a></span></dt>
               <dt><span class="section"><a href="#junittesting">5. Using JUnit</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#unittesting_junit">5.1. The JUnit framework</a></span></dt>
                     <dt><span class="section"><a href="#unittesting_junit_test">5.2. How to define a test in JUnit?</a></span></dt>
                     <dt><span class="section"><a href="#unittesting_junitexample">5.3. Example JUnit test</a></span></dt>
                     <dt><span class="section"><a href="#junit_namingconventions">5.4. JUnit naming conventions</a></span></dt>
                     <dt><span class="section"><a href="#junit_namingconventions_maven">5.5. JUnit naming conventions for Maven</a></span></dt>
                     <dt><span class="section"><a href="#junit_namingconventions_gradle">5.6. JUnit naming conventions for Gradle</a></span></dt>
                     <dt><span class="section"><a href="#juniteclipse_testsuite">5.7. JUnit test suites</a></span></dt>
                     <dt><span class="section"><a href="#juniteclipse_code">5.8. Run your test from the command line</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#junitannoationsandassertstatements">6. Basic JUnit code constructs</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#usingjunit_annotations">6.1. Available JUnit annotations</a></span></dt>
                     <dt><span class="section"><a href="#usingjunit_asserts">6.2. Assert statements</a></span></dt>
                     <dt><span class="section"><a href="#usingjunit_executionorder">6.3. Test execution order</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#installation">7. Installation of JUnit</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#installation_gradle">7.1. Using JUnit with Gradle</a></span></dt>
                     <dt><span class="section"><a href="#installation_eclipse">7.2. Using JUnit integrated into Eclipse</a></span></dt>
                     <dt><span class="section"><a href="#installation_junit">7.3. Downloading the JUnit library</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#eclipse">8. Eclipse support for JUnit</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#eclipse_creatingjunittest">8.1. Creating JUnit tests</a></span></dt>
                     <dt><span class="section"><a href="#eclipse_runningjunittest">8.2. Running JUnit tests</a></span></dt>
                     <dt><span class="section"><a href="#usingjunit_staticimports">8.3. JUnit static imports</a></span></dt>
                     <dt><span class="section"><a href="#usingjunit_testsuites">8.4. Wizard for creating test suites</a></span></dt>
                     <dt><span class="section"><a href="#usingjunit_execption">8.5. Testing exception</a></span></dt>
                     <dt><span class="section"><a href="#usingjunit_plugintest">8.6. JUnit Plug-in Test</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#juniteclipse_staticimports">9. Setting Eclipse up for using JUnits static imports</a></span></dt>
               <dt><span class="section"><a href="#juniteclipse">10. Exercise: Using JUnit</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#juniteclipse_prep">10.1. Project preparation</a></span></dt>
                     <dt><span class="section"><a href="#juniteclipse_class">10.2. Create a Java class</a></span></dt>
                     <dt><span class="section"><a href="#juniteclipse_test">10.3. Create a JUnit test</a></span></dt>
                     <dt><span class="section"><a href="#juniteclipse_eclipse">10.4. Run your test in Eclipse</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#junitadvanced">11. Advanced JUnit options</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#junitadvanced_parameterizedtests">11.1. Parameterized test</a></span></dt>
                     <dt><span class="section"><a href="#junitadvanced_rules">11.2. Rules</a></span></dt>
                     <dt><span class="section"><a href="#junitadvanced_categories">11.3. Categories</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#mockingframeworks">12. Mocking</a></span></dt>
               <dt><span class="section"><a href="#supportandlicense">13. About this website</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#thankyou">13.1. Donate to support free tutorials</a></span></dt>
                     <dt><span class="section"><a href="#questions">13.2. Questions and discussion</a></span></dt>
                     <dt><span class="section"><a href="#thankyou">13.3. License for this tutorial and its code</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#resources">14. Links and Literature</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#junit_links">14.1. JUnit Resources</a></span></dt>
                     <dt><span class="section"><a href="#resources_general">14.2. vogella Resources</a></span></dt>
                  </dl>
               </dd>
            </dl>
         </div>
         <div id="kindle">
            
            
            <p></p>
            <a href="http://www.vogella.com/books/eclipseide.html">
               	Get the book
               	<img src="http://www.vogella.com/img/books/mini/150x200xeclipseide_book.png.pagespeed.ic.XaCl4yrKoI.png" width="150" height="200" alt="Eclipse IDE book"> 	
               </a>
            
            
         </div>
         <script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
         
         <!-- Responsive - After Table of Content -->
         <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-3851443674951530" data-ad-slot="4470606330" data-ad-format="auto"></ins>
         <script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="unitintegrationperformancetests"></a>1.&nbsp;Unit tests, integration tests and performance tests
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_intro"></a>1.1.&nbsp;Unit tests and unit testing
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e59"></a><p>
                  A
                  <em class="wordasword">unit test</em>
                  is a piece of code written by a developer that
                  executes
                  a specific
                  functionality in the code to be tested and asserts a
                  certain behavior
                  or state.
                  
               </p>
               <p>
                  The percentage of code
                  which
                  is tested by unit tests is
                  typically called
                  <em class="wordasword">test coverage</em>.
                  
               </p>
               <p>
                  A unit test targets a small unit of code, e.g., a method or a
                  class,
                  (local
                  tests). External dependencies should be
                  removed for unit tests, e.g., by replacing the dependency with a test implementation or a (mock) object created by a
                  test framework.
                  
               </p>
               <p>Unit tests are not suitable for testing complex user interface or component inteaction. For this you should
                  develop integration tests.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_organization"></a>1.2.&nbsp;Integration tests
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e79"></a><a class="indexterm" name="d400319e82"></a><p>
                  An
                  <em class="wordasword">integration test</em>
                  has the target to test the behavior
                  of a component or the integration
                  between a set of components. The term
                  <em class="wordasword">functional test</em>
                  is sometimes used as synonym for integration test.
                  
               </p>
               <p>
                  This kind of tests allow you to translate your user stories
                  into
                  a test suite, i.e., the test would resemble an
                  expected user
                  interaction with the application.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_performancetests"></a>1.3.&nbsp;Performance tests
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e98"></a><p>
                  Performance tests are used to benchmark software
                  components repeatedly.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="whytesting"></a>1.4.&nbsp;Building effective tests
                        </h3>
                     </div>
                  </div>
               </div>
               <p>Software unit tests allow you to easily verify that the logic of individual units is correct.
                  
               </p>
               <p> Running unit tests
                  after every build or code change help to identify software regressions introduced by these
                  new changes.
                  Having a high test coverage of
                  your code allows you to continue
                  developing features without having to
                  perform lots of manual tests.
                  
               </p>
               <p>Integration tests check that the whole system works as intended, also reducing the need for intensive manual
                  tests and performance tests allow to ensure that the whole application also works under high load.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="testingterminology"></a>2.&nbsp;Testing terminology
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_testfixture"></a>2.1.&nbsp;Test fixture
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e118"></a><p>
                  The
                  <em class="wordasword">test fixture</em>
                  is a fixed state of the software under test used as a baseline for
                  running tests.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="behaviorvsstatetesting"></a>2.2.&nbsp;Behavior vs. state testing
                        </h3>
                     </div>
                  </div>
               </div>
               <p>A test is a behavior test (also called interaction test) if it
                  does
                  not
                  validate the result of a method
                  call, but
                  checks
                  if certain
                  methods
                  were called with the correct input
                  parameters.
                  
               </p>
               <p>State
                  testing is
                  about
                  validating the result, while
                  behavior testing
                  is about
                  testing the
                  behavior of the application
                  under test.
                  
               </p>
               <p>If you are testing algorithms or system functionality, you
                  want to test
                  in most cases state and not interactions.
                  A typical test
                  setup
                  uses mocks or stubs of related classes to abstract the
                  interactions with these other classes away
                  and tests state in the
                  object which is tested.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="testorganization"></a>3.&nbsp;Test organization
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_testorganization"></a>3.1.&nbsp;Test organization for Java projects
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Typical unit tests are created in a separate project or
                  separate
                  source folder to keep the test code separate from
                  the real code.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_whattotest"></a>3.2.&nbsp;What should you test?
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  What should be tested is a hot topic for discussion. Some
                  developers
                  believe every statement in your code should
                  be tested.
                  
               </p>
               <p>
                  In general it
                  is
                  safe to ignore trivial code as, for example,
                  getter and setter
                  methods
                  which simply assign values to
                  fields. Writing
                  tests for these
                  statements is time consuming and pointless, as you
                  would be testing
                  the Java virtual
                  machine. The JVM itself already has
                  test cases for
                  this and you are safe to assume that field assignment
                  works in Java
                  if you are developing end user applications.
                  
               </p>
               <p>
                  You should write software tests in any case for the critical and
                  complex parts of your application. A solid test
                  suite also protects
                  you against regression in existing code if you introduce new
                  features.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_legacycode"></a>3.3.&nbsp;Introducing tests in legacy code
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  If you start developing tests for an existing code base without
                  any tests, it is good practice to start writing
                  tests for the parts
                  of the application in which most errors happened in the past. This
                  way you can focus on the
                  critical parts of your application.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="unittesting"></a>4.&nbsp;Testing frameworks for Java
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               Where are several testing frameworks available for Java. The most
               popular ones are
               <a class="ulink" href="http://junit.org/" target="_top">JUnit</a>
               and
               <a class="ulink" href="http://testng.org/" target="_top">TestNG</a>.
               
            </p>
            <p>This description focuses at JUnit.</p>
         </div>
         <!-- Non responsive Lake Quincy Ads
<div data-type="ad" data-publisher="lqm.javaeclipseandroid.site" data-zone="inBetween01" data-format="728x90">
</div> -->
         <!-- Responsive Lake Quincy Ads -->
         <div id="ad-inBetween01">
            	<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-inBetween01');});</script>
            </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="junittesting"></a>5.&nbsp;Using JUnit
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="unittesting_junit"></a>5.1.&nbsp;The JUnit framework
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e177"></a><p>
                  <em class="wordasword">JUnit</em>
                  in version
                  4.x is a test framework
                  which uses annotations to identify
                  methods that
                  specify a test.
                  
               </p>
               <p>
                  The main websites for JUnit are the
                  <a class="ulink" href="http://junit.org/" target="_top">JUnit homepage</a>
                  and the
                  <a class="ulink" href="https://github.com/junit-team/junit" target="_top">GitHub project page</a>.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="unittesting_junit_test"></a>5.2.&nbsp;How to define a test in JUnit?
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A
                  JUnit
                  <em class="wordasword">test</em>
                  is a method
                  contained in a class which is only used for
                  testing. This
                  is
                  called a
                  <em class="wordasword">Test class</em>.
                  
               </p>
               <p>
                  To
                  write a test with the
                  JUnit 4.x framework you annotate a method with
                  the
                  <code class="code">@org.junit.Test</code>
                  <a class="indexterm" name="d400319e209"></a>
                  annotation.
                  
               </p>
               <p>
                  In this method you use a method provided by the JUnit framework
                  to check the
                  expected
                  result
                  of the code execution
                  versus the actual
                  result.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="unittesting_junitexample"></a>5.3.&nbsp;Example JUnit test
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e220"></a><p>
                  The following code shows a JUnit test method.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><em><span class="hl-annotation" style="color: gray">@Test</span></em>
<span class="hl-keyword">public</span> <span class="hl-keyword">void</span> multiplicationOfZeroIntegersShouldReturnZero() {

   <em class="hl-comment" style="color: #080">// MyClass is tested</em>
   MyClass tester = <span class="hl-keyword">new</span> MyClass();

   <em class="hl-comment" style="color: #080">// Tests</em>
   assertEquals(<span class="hl-string" style="color:blue">"10 x 0 must be 0"</span>, <span class="hl-number">0</span>, tester.multiply(<span class="hl-number">10</span>, <span class="hl-number">0</span>));
   assertEquals(<span class="hl-string" style="color:blue">"0 x 10 must be 0"</span>, <span class="hl-number">0</span>, tester.multiply(<span class="hl-number">0</span>, <span class="hl-number">10</span>));
   assertEquals(<span class="hl-string" style="color:blue">"0 x 0 must be 0"</span>, <span class="hl-number">0</span>, tester.multiply(<span class="hl-number">0</span>, <span class="hl-number">0</span>));
 } </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_namingconventions"></a>5.4.&nbsp;JUnit naming conventions
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e235"></a><p>There are several potential naming conventions for JUnit tests.
                  In widespread use is to use the name of the class
                  under test and to
                  add the "Test" suffix to the test class.
                  
               </p>
               <p>For the test method names it is frequently recommended to use the
                  word "should" in the test method name, as for
                  example
                  "ordersShouldBeCreated" or "menuShouldGetActive" as this gives a good
                  hint what should happen if the test
                  method is executed.
                  
               </p>
               <p>As a general rule, a test name should explain what the test does
                  so that it can be avoided to read the actual
                  implementation.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_namingconventions_maven"></a>5.5.&nbsp;JUnit naming conventions for Maven
                        </h3>
                     </div>
                  </div>
               </div>
               <p>If you are using the Maven build system, you should prefer the "Test" suffix over "Tests" as the Maven
                  build
                  system (via its surfire plug-in)
                  automatically includes such
                  classes in its test scope.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_namingconventions_gradle"></a>5.6.&nbsp;JUnit naming conventions for Gradle
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The Gradle test task scans by default all compiled classes. JUnit classes are identified by
                  
               </p>
               <div class="itemizedlist">
                  <ul class="itemizedlist" type="disc">
                     <li class="listitem">
                        <p>Class or a super class extends TestCase or GroovyTestCase</p>
                     </li>
                     <li class="listitem">
                        <p>Class or a super class is annotated with @RunWith</p>
                     </li>
                     <li class="listitem">
                        <p>Class or a super class contain a method annotated with @Test</p>
                     </li>
                  </ul>
               </div>
               <p>
                  
               </p>
               <p>
                  You can set the
                  <em class="parameter"><code>scanForTestClasses</code></em>
                  property to false, if you do not want automatic test class detection. In this case, if no additioanl include /
                  exclude patterns are specified, the default for included classes are **/*Tests.class&#8221;, &#8220;**/*Test.class&#8221; and the
                  default excluded classes are &#8220;**/Abstract*.class&#8221;.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="juniteclipse_testsuite"></a>5.7.&nbsp;JUnit test suites
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e273"></a><p>
                  If you have several test classes, you can combine them into a
                  <em class="wordasword">test suite</em>. Running a test suite will execute all
                  test classes in that suite in
                  the specified order.
                  
               </p>
               <p>
                  The following example code shows a test suite which defines that two
                  test classes (MyClassTest and MySecondClassTest)
                  should be executed.
                  If you want to add
                  another test class
                  you can add it to
                  <code class="code">@Suite.SuiteClasses</code>
                  statement.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.junit.first;

<span class="hl-keyword">import</span> org.junit.runner.RunWith;
<span class="hl-keyword">import</span> org.junit.runners.Suite;
<span class="hl-keyword">import</span> org.junit.runners.Suite.SuiteClasses;

<em><span class="hl-annotation" style="color: gray">@RunWith(Suite.class)</span></em>
<em><span class="hl-annotation" style="color: gray">@SuiteClasses({ MyClassTest.class, MySecondClassTest.class })</span></em>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> AllTests {

} </pre><p>
                  
               </p>
               <p>A test suite can also contain other test suites. </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="juniteclipse_code"></a>5.8.&nbsp;Run your test from the command line
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  You can also run your JUnit tests outside Eclipse via
                  standard
                  Java
                  code. Build
                  frameworks like Apache Maven or
                  Gradle in
                  combination
                  with a Continuous Integration Server (like Hudson or
                  Jenkins) are
                  typically used to execute tests
                  automatically on a regular
                  basis.
                  
               </p>
               <p>
                  
                  The
                  <code class="code">org.junit.runner.JUnitCore</code>
                  class
                  provides the
                  <code class="code">runClasses()</code>
                  method which
                  allows you to run one or
                  several tests classes. As a
                  return parameter
                  you receive an object of
                  the
                  type
                  <code class="code">org.junit.runner.Result</code>. This object
                  can be used to retrieve information about the tests.
                  
               </p>
               <p>
                  The following class demonstrates how to run the MyClassTest.
                  This class will execute your test class and
                  write
                  potential failures to
                  the console.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.junit.first;

<span class="hl-keyword">import</span> org.junit.runner.JUnitCore;
<span class="hl-keyword">import</span> org.junit.runner.Result;
<span class="hl-keyword">import</span> org.junit.runner.notification.Failure;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyTestRunner {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    Result result = JUnitCore.runClasses(MyClassTest.<span class="hl-keyword">class</span>);
    <span class="hl-keyword">for</span> (Failure failure : result.getFailures()) {
      System.out.println(failure.toString());
    }
  }
} </pre><p>
                  
               </p>
               <p>
                  This class can be executed like any other Java program on the
                  command line. You only need to add the
                  JUnit library
                  JAR file to the
                  classpath.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="junitannoationsandassertstatements"></a>6.&nbsp;Basic JUnit code constructs
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="usingjunit_annotations"></a>6.1.&nbsp;Available JUnit annotations
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e326"></a><a class="indexterm" name="d400319e331"></a><p>JUnit 4.x uses annotations to mark methods and to configure the
                  test run.
                  The following table gives an overview of the most important
                  available
                  annotations.
                  
               </p>
               <p>
                  
               </p>
               <div class="table"><a name="d400319e338"></a><p class="title"><b>Table&nbsp;1.&nbsp;Annotations</b></p>
                  <div class="table-contents">
                     <table summary="Annotations" border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Annotation</th>
                              <th align="left">Description</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">
                                 
                                 <p>
                                    @Test
                                    <br>
                                    public void method()
                                    
                                 </p>
                                 
                              </td>
                              <td align="left">
                                 The
                                 <code class="code">@Test</code>
                                 annotation identifies a method as a test
                                 method.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left"> @Test (expected = Exception.class)</td>
                              <td align="left">
                                 Fails if the method does not throw the named
                                 exception.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">@Test(timeout=100)</td>
                              <td align="left">
                                 Fails if the method takes longer than 100 milliseconds.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 @Before
                                 <br>
                                 public void method()
                                 
                              </td>
                              <td align="left">
                                 This method is executed before each test. It is used to
                                 prepare the test environment (e.g., read input data,
                                 initialize
                                 the class).
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 @After
                                 <br>
                                 public void method()
                                 
                              </td>
                              <td align="left">
                                 This method is executed after each test. It is used to
                                 cleanup the test environment (e.g., delete temporary data,
                                 restore defaults). It can also save memory by cleaning up
                                 expensive memory structures.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 @BeforeClass
                                 <br>
                                 public static void method()
                                 
                              </td>
                              <td align="left">
                                 This method is executed once, before the start of all
                                 tests.
                                 It is
                                 used to perform time intensive activities, for
                                 example, to
                                 connect
                                 to a database. Methods marked with this
                                 annotation
                                 need to
                                 be
                                 defined as
                                 <code class="code">static</code>
                                 to work with JUnit.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 @AfterClass
                                 <br>
                                 public static void method()
                                 
                              </td>
                              <td align="left">
                                 This method is executed once, after all tests have been
                                 finished.
                                 It is used to perform clean-up activities, for
                                 example,
                                 to
                                 disconnect from a database. Methods annotated with
                                 this
                                 annotation
                                 need to be defined as
                                 <code class="code">static</code>
                                 to work with JUnit.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">@Ignore or @Ignore("Why disabled")</td>
                              <td align="left">
                                 Ignores the test method. This is useful when the
                                 underlying code has been changed and the test case has not yet
                                 been
                                 adapted. Or if the execution time of this test is too long
                                 to be
                                 included. It is best practice to provide the optional
                                 description, why the test is disabled.
                                 
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="usingjunit_asserts"></a>6.2.&nbsp;Assert statements
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e417"></a><p>
                  JUnit provides static methods in the
                  <code class="code">Assert</code>
                  class
                  to test for certain conditions. These
                  <em class="wordasword">assertion methods</em>
                  typically start
                  with
                  <code class="code">assert</code>
                  and allow you to specify the error message, the expected and the
                  actual
                  result. An
                  <em class="wordasword">assertion method</em>
                  compares the actual value returned
                  by
                  a test to the expected value, and
                  throws an
                  <code class="code">AssertionException</code>
                  if
                  the
                  comparison test fails.
                  
               </p>
               <p>
                  The
                  following
                  table gives an overview of
                  these
                  methods.
                  Parameters in
                  []
                  brackets are
                  optional and of type String.
                  
               </p>
               <p>
                  
               </p>
               <div class="table"><a name="d400319e443"></a><p class="title"><b>Table&nbsp;2.&nbsp;Test methods</b></p>
                  <div class="table-contents">
                     <table summary="Test methods" border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Statement</th>
                              <th align="left">Description</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">fail(message)</td>
                              <td align="left">
                                 Let the method fail. Might be used to check that a
                                 certain
                                 part of the code is not reached or to have a failing
                                 test
                                 before
                                 the test code is implemented. The message parameter is
                                 optional.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">assertTrue([message,] boolean condition)</td>
                              <td align="left">Checks that the boolean condition is true.</td>
                           </tr>
                           <tr>
                              <td align="left">assertFalse([message,] boolean condition)</td>
                              <td align="left">Checks that the boolean condition is false.</td>
                           </tr>
                           <tr>
                              <td align="left">assertEquals([message,] expected, actual)</td>
                              <td align="left">
                                 Tests that two values are the same. Note: for arrays the
                                 reference is checked not the content of the arrays.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 assertEquals([message,] expected, actual,
                                 tolerance)
                                 
                              </td>
                              <td align="left">
                                 Test that float or double values match. The tolerance is
                                 the number
                                 of decimals which must be the same.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">assertNull([message,] object)</td>
                              <td align="left">Checks that the object is null.</td>
                           </tr>
                           <tr>
                              <td align="left">assertNotNull([message,] object)</td>
                              <td align="left">Checks that the object is not null.</td>
                           </tr>
                           <tr>
                              <td align="left"> assertSame([message,] expected, actual)</td>
                              <td align="left">
                                 Checks that both variables refer to the same object.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">assertNotSame([message,] expected, actual)</td>
                              <td align="left">
                                 Checks that both variables refer to different objects.
                                 
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
               <div class="note" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Note</h3>
                  <p>
                     You should provide meaningful messages in assertions so that it
                     is easier for the developer to identify the problem. This helps in
                     fixing the issue, especially if someone looks at the problem, who
                     did not write the code under test or the test code.
                     
                  </p>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="usingjunit_executionorder"></a>6.3.&nbsp;Test execution order
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e508"></a><p>
                  JUnit
                  assumes that all test methods
                  can
                  be executed
                  in
                  an
                  arbitrary
                  order. Well-written test code should not assume any order, i.e.,
                  tests
                  should not depend on
                  other tests.
                  
               </p>
               <p>As of JUnit 4.11 you can use an annotation to define that the
                  test methods are sorted
                  by method name, in lexicographic order.
                  
               </p>
               <p>
                  To activate this feature, annotate your test class with the
                  <code class="code">@FixMethodOrder(MethodSorters.NAME_ASCENDING)</code>
                  annotation.
                  
               </p>
               <div class="note" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Note</h3>
                  <p>
                     The default in JUnit 4.11 is to use a
                     deterministic, but not
                     predictable, order which can also be explicitly specified via the
                     <code class="code">MethodSorters.DEFAULT</code>
                     parameter in the above annotation. You can also use
                     <code class="code">MethodSorters.JVM</code>
                     which uses the JVM defaults, which may vary from run to run.
                     
                  </p>
               </div>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="installation"></a>7.&nbsp;Installation of JUnit
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="installation_gradle"></a>7.1.&nbsp;Using JUnit with Gradle
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e537"></a><p>To use JUnit in your Gradle build, simply add a testCompile dependency to it.</p>
               <p>
                  
               </p><pre class="programlisting">apply plugin: <span class="hl-string" style="color:blue">'java'</span>

dependencies {
  testCompile <span class="hl-string" style="color:blue">'junit:junit:4.12'</span>
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="installation_eclipse"></a>7.2.&nbsp;Using JUnit integrated into Eclipse
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e552"></a><p>
                  Eclipse allows you to use
                  the version of JUnit which is
                  integrated
                  in Eclipse. If you use Eclipse, no additional
                  setup is
                  required. In this case you can skip the following section.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="installation_junit"></a>7.3.&nbsp;Downloading the JUnit library
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e562"></a><p>
                  If you want to control the used JUnit library explicitly,
                  download
                  JUnit4.x.jar from the following JUnit website. The
                  download
                  contains
                  the
                  <code class="filename">junit-4.*.jar</code>
                  which is the JUnit
                  library.
                  Add this library
                  to your
                  Java project and add
                  it to the
                  classpath.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">http://junit.org/ </pre><p>
                  
               </p>
            </div>
         </div> 
         
         <!-- Responsive Lake Quincy Ads -->
         
         <div id="ad-inBetween02">
            	<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-inBetween02');});</script>
            </div>
         
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="eclipse"></a>8.&nbsp;Eclipse support for JUnit
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="eclipse_creatingjunittest"></a>8.1.&nbsp;Creating JUnit tests
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e583"></a><p>
                  You can write the JUnit tests manually, but Eclipse supports the
                  creation of JUnit tests via
                  wizards.
                  
               </p>
               <p>
                  For example, to create
                  a JUnit test or a test class for an existing
                  class, right-click
                  on
                  your new class,
                  select this
                  class in
                  the
                  <span class="guilabel">Package Explorer</span>
                  view, right-click on it
                  and select
                  <span class="guimenu">New</span> &#8594; <span class="guisubmenu">JUnit Test Case</span>.
                  
               </p>
               <p>
                  Alternatively you can also use the JUnit wizards available under
                  <span class="guimenu">File</span> &#8594; <span class="guisubmenu">New </span> &#8594; <span class="guisubmenu">Other...</span> &#8594; <span class="guisubmenu">Java</span> &#8594; <span class="guisubmenu">JUnit</span>.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="eclipse_runningjunittest"></a>8.2.&nbsp;Running JUnit tests
                        </h3>
                     </div>
                  </div>
               </div>
               <p> The Eclipse IDE also provides support for executing your tests
                  interactively.
                  
               </p>
               <p>
                  To run a test, select the class which contains the tests, right-click
                  on it and select
                  <span class="guimenu">Run-as</span> &#8594; <span class="guisubmenu">JUnit Test</span>. This starts JUnit and executes all test methods in this class.
                  
               </p>
               <p>
                  Eclipse provides the
                  <span class="keycap"><strong>Alt</strong></span>+<span class="keycap"><strong>Shift</strong></span>+<span class="keycap"><strong>X,</strong></span>
                  <span class="keycap"><strong>,T</strong></span>
                  shortcut to run the test in the selected class. If you position the
                  cursor in the Java editor on one test method name,
                  this shortcut runs
                  only the selected test
                  method.
                  
               </p>
               <p>
                  To see the result of an JUnit test, Eclipse uses the
                  <span class="guilabel">JUnit</span>
                  view
                  which shows the results of the tests. You can also select
                  individual
                  unit tests in this
                  view
                  , right-click on them
                  and select
                  <span class="guilabel">Run</span>
                  to execute them again.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunitview10.png.pagespeed.ic.rNOB-5kLhz.png" alt="JUnit view"></div>
               <p>
                  
               </p>
               <p>
                  By default this
                  view
                  shows all tests.
                  You
                  can also configure, that
                  it only
                  shows
                  failing
                  tests.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunit_showonerroronly.png.pagespeed.ic.QnPEcqlzcK.png" alt="JUnit view"></div>
               <p>
                  
               </p>
               <p>
                  You can also define that the
                  view
                  is only activated if you have
                  a
                  failing test.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunit_showonerroronly2.png.pagespeed.ic.nL6cFn3FYX.png" alt="JUnit view"></div>
               <p>
                  
               </p>
               <div class="note" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Note</h3>
                  <p>
                     Eclipse creates run configurations for tests. You can see and modify
                     these via the
                     <span class="guimenu">Run</span> &#8594; <span class="guisubmenu">Run Configurations...</span>
                     menu.
                     
                  </p>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="usingjunit_staticimports"></a>8.3.&nbsp;JUnit static imports
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e695"></a><p>
                  Static import is a feature that allows fields and
                  methods) defined in
                  a class
                  as
                  <code class="code">public static</code>
                  to be used in Java code
                  without specifying the class
                  in which the field
                  is defined.
                  
               </p>
               <p>
                  JUnit assert statement are typically defined as
                  <code class="code">public static</code>
                  to allow the developer to write short test statements. The following
                  snippet demonstrates an assert statement with and
                  without static
                  imports.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><em class="hl-comment" style="color: #080">// without static imports you have to write the following statement</em>
Assert.assertEquals(<span class="hl-string" style="color:blue">"10 x 5 must be 50"</span>, <span class="hl-number">50</span>, tester.multiply(<span class="hl-number">10</span>, <span class="hl-number">5</span>));


<em class="hl-comment" style="color: #080">// alternatively define assertEquals as static import</em>
<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertEquals;

<em class="hl-comment" style="color: #080">// more code</em>

<em class="hl-comment" style="color: #080">// use assertEquals directly because of the static import</em>
assertEquals(<span class="hl-string" style="color:blue">"10 x 5 must be 50"</span>, <span class="hl-number">50</span>, tester.multiply(<span class="hl-number">10</span>, <span class="hl-number">5</span>)); </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="usingjunit_testsuites"></a>8.4.&nbsp;Wizard for creating test suites
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  To create a test suite in Eclipse, you select the test classes which
                  should be
                  included into this in the
                  <span class="guilabel">Package Explorer</span>
                  view, right-click on them and
                  select
                  <span class="guimenu">New </span> &#8594; <span class="guisubmenu">Other...</span> &#8594; <span class="guisubmenu">JUnit</span> &#8594; <span class="guisubmenu">JUnit Test Suite</span>.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunittestsuite10.png.pagespeed.ic.765bNcH0vW.png" alt="Create a test suite"></div>
               <p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="usingjunit_execption"></a>8.5.&nbsp;Testing exception
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e745"></a><p>
                  The
                  <code class="code">@Test (expected = Exception.class)</code>
                  annotation is limited as it can only test for one exception. To test
                  exceptions, you can use the following test
                  pattern.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">try</span> {
   mustThrowException(); 
   fail();
} <span class="hl-keyword">catch</span> (Exception e) {
   <em class="hl-comment" style="color: #080">// expected</em>
   <em class="hl-comment" style="color: #080">// could also check for message of exception, etc.</em>
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="usingjunit_plugintest"></a>8.6.&nbsp;JUnit Plug-in Test
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e763"></a><a class="indexterm" name="d400319e766"></a><p>JUnit Plug-in tests are used to write unit tests for your plug-ins. These tests are executed by a special test
                  runner that launches another Eclipse instance in a separate VM&#8212;just and executes the test
                  methods within that
                  instance.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="juniteclipse_staticimports"></a>9.&nbsp;Setting Eclipse up for using JUnits static imports
                     </h2>
                  </div>
               </div>
            </div><a class="indexterm" name="d400319e774"></a><a class="indexterm" name="d400319e779"></a><p>
               The Eclipse IDE cannot always
               create the
               corresponding
               <code class="code">static import</code>
               statements automatically.
               
            </p>
            <p>
               You can configure the Eclipse IDE to
               use code completion to insert typical JUnit method calls and to add the static
               import automatically.
               For this
               open the
               Preferences via
               <span class="guimenu">Window</span> &#8594; <span class="guisubmenu">Preferences</span>
               and select
               <span class="guimenu">Java</span> &#8594; <span class="guisubmenu">Editor</span> &#8594; <span class="guisubmenu">Content Assist</span> &#8594; <span class="guisubmenu">Favorites</span>.
               
            </p>
            <p>
               Use the
               <span class="guibutton">New Type</span>
               button to add the following entries to it:
               
            </p>
            <div class="itemizedlist">
               <ul class="itemizedlist" type="disc">
                  <li class="listitem">
                     <p><code class="code">org.junit.Assert</code>
                        
                     </p>
                  </li>
                  <li class="listitem">
                     <p><code class="code">org.hamcrest.CoreMatchers</code>
                        
                     </p>
                  </li>
                  <li class="listitem">
                     <p><code class="code">org.hamcrest.Matchers</code>
                        
                     </p>
                  </li>
               </ul>
            </div>
            <p>
               
            </p>
            <p>
               This makes, for example, the
               <code class="code">assertTrue</code>,
               <code class="code">assertFalse</code>
               and
               <code class="code">assertEquals</code>
               methods directly available in the
               <em class="wordasword">Content Assists</em>.
               
            </p>
            <p>
               
            </p>
            <div class="mediaobject"><img src="images/xstaticimport10.png.pagespeed.ic.9n5oXwBFsC.png" alt="Adding static imports to the preferences"></div>
            <p>
               
            </p>
            <p>
               You can now use
               <em class="wordasword">Content Assists</em>
               (shortcut:
               <span class="keycap"><strong>Ctrl</strong></span>+<span class="keycap"><strong>Space</strong></span>) to
               add
               the
               method and the
               import.
               
            </p>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="juniteclipse"></a>10.&nbsp;Exercise: Using JUnit
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="juniteclipse_prep"></a>10.1.&nbsp;Project preparation
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Create a new project called
                  <em class="wordasword">com.vogella.junit.first</em>.
                  
               </p>
               <p>
                  Create a new source
                  folder
                  <code class="filename">test</code>. For this
                  right-click on your
                  project,
                  select
                  <span class="guilabel">Properties</span>
                  and choose
                  <span class="guimenu">Java</span> &#8594; <span class="guisubmenu">Build Path</span>. Select the
                  <span class="guilabel">Source</span>
                  tab.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunit10.png.pagespeed.ic.luBnZINXIt.png" alt="Create new source folder for the tests"></div>
               <p>
                  
               </p>
               <p>
                  Press the
                  <span class="guibutton">Add Folder</span>
                  button. Afterwards, press the
                  <span class="guibutton">Create New Folder</span>
                  button. Enter
                  <code class="filename">test</code>
                  as
                  folder name.
                  
               </p>
               <p>The result is depicted in the following screenshot.</p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunit20.png.pagespeed.ic.F4sKcxKHmu.png" alt="Creating a new folder"></div>
               <p>
                  
               </p>
               <div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Tip</h3>
                  <p>
                     You can also add a new source folder
                     by right-clicking on a
                     project and selecting
                     <span class="guimenu">New </span> &#8594; <span class="guisubmenu">Source Folder</span>.
                     
                  </p>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="juniteclipse_class"></a>10.2.&nbsp;Create a Java class
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  In the
                  <code class="filename">src</code>
                  folder, create the
                  <code class="code">com.vogella.junit.first</code>
                  package
                  and the following
                  class.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.junit.first;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyClass {
  <span class="hl-keyword">public</span> <span class="hl-keyword">int</span> multiply(<span class="hl-keyword">int</span> x, <span class="hl-keyword">int</span> y) {
    <em class="hl-comment" style="color: #080">// the following is just an example</em>
    <span class="hl-keyword">if</span> (x &gt; <span class="hl-number">999</span>) {
      <span class="hl-keyword">throw</span> <span class="hl-keyword">new</span> IllegalArgumentException(<span class="hl-string" style="color:blue">"X should be less than 1000"</span>);
    }
    <span class="hl-keyword">return</span> x / y;
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="juniteclipse_test"></a>10.3.&nbsp;Create a JUnit test
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Right-click on your new class in the
                  <span class="guilabel">Package Explorer</span>
                  view
                  and select
                  <span class="guimenu">New</span> &#8594; <span class="guisubmenu">JUnit Test Case</span>.
                  
               </p>
               <p>
                  In the following wizard
                  ensure that the
                  <span class="guilabel">New JUnit 4 test</span>
                  flag
                  is selected
                  and set the source folder to
                  <code class="filename">test</code>,
                  so
                  that your test class gets created in this folder.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunit30.png.pagespeed.ic.MtMlDcDcas.png" alt="Create new test class"></div>
               <p>
                  
               </p>
               <p>
                  Press the
                  <span class="guibutton">Next</span>
                  button and select the methods that you want to test.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunit40.png.pagespeed.ic.Cwn7fi4hd0.png" alt="Selecting the methods to test"></div>
               <p>
                  
               </p>
               <p>
                  If the JUnit library is not part of the classpath of your
                  project, Eclipse
                  will
                  prompt you to add it. Use this to add JUnit to
                  your project.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunit50.png.pagespeed.ic.ngA9CDQyLZ.png" alt="Eclipse prompt for adding JUnit to the project classpath"></div>
               <p>
                  
               </p>
               <p>Create a test with the following code.</p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.junit.first;

<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertEquals;

<span class="hl-keyword">import</span> org.junit.AfterClass;
<span class="hl-keyword">import</span> org.junit.BeforeClass;
<span class="hl-keyword">import</span> org.junit.Test;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyClassTest {
  
  <em><span class="hl-annotation" style="color: gray">@Test(expected = IllegalArgumentException.class)</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testExceptionIsThrown() {
    MyClass tester = <span class="hl-keyword">new</span> MyClass();
    tester.multiply(<span class="hl-number">1000</span>, <span class="hl-number">5</span>);
  }

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testMultiply() {
    MyClass tester = <span class="hl-keyword">new</span> MyClass();
    assertEquals(<span class="hl-string" style="color:blue">"10 x 5 must be 50"</span>, <span class="hl-number">50</span>, tester.multiply(<span class="hl-number">10</span>, <span class="hl-number">5</span>));
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="juniteclipse_eclipse"></a>10.4.&nbsp;Run your test in Eclipse
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Right-click on your new test class and select
                  <span class="guimenu"> Run-As</span> &#8594; <span class="guisubmenu">JUnit Test</span>.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunit60.png.pagespeed.ic.ARgfXSOXch.png" alt="Run JUnit test in Eclipse"></div>
               <p>
                  
               </p>
               <p>
                  The result of the tests are displayed in the JUnit
                  view. In
                  our example one test should be successful and one test should
                  show an
                  error. This error is indicated by a red bar.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjunit70.png.pagespeed.ic.bwC7X8wpX7.png" alt="Result of running a unit test"></div>
               <p>
                  
               </p>
               <p>
                  The test is failing,
                  because our multiplier class is
                  currently not
                  working
                  correctly. It
                  does a
                  division instead of
                  multiplication. Fix the
                  bug
                  and re-run the
                  test to get
                  a green bar.
                  
               </p>
            </div>
         </div>
         
         
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="junitadvanced"></a>11.&nbsp;Advanced JUnit options
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junitadvanced_parameterizedtests"></a>11.1.&nbsp;Parameterized test
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e1048"></a><p>
                  JUnit allows you to use parameters in a tests class. This class
                  can contain one test
                  method and this method is executed with the
                  different
                  parameters provided.
                  
               </p>
               <p>
                  You mark a test class as a parameterized test with the
                  <code class="code">@RunWith(Parameterized.class)</code>
                  annotation.
                  
               </p>
               <p>
                  Such a test class must contain a static method annotated with
                  <code class="code">@Parameters</code>
                  that generates
                  and returns a collection of arrays. Each item in this
                  collection is
                  used as parameter for the test method.
                  
               </p>
               <p>
                  You also need to create a constructor in which you store the
                  values
                  for each test. The number of elements in each array provided by the
                  method annotated with
                  <code class="code">@Parameters</code>
                  must
                  correspond to the number of parameters in the
                  constructor of the
                  class.
                  The class is created for each parameter and the test
                  values are
                  passed
                  via the constructor to the class.
                  
               </p>
               <p>
                  The following code shows an example for a parameterized test. It
                  assumes that you test the
                  <code class="code">multiply()</code>
                  method of the
                  <code class="code">MyClass</code>
                  class which was used in an example earlier.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.junit.first;&#xD;
&#xD;
<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertEquals;&#xD;
&#xD;
<span class="hl-keyword">import</span> java.util.Arrays;&#xD;
<span class="hl-keyword">import</span> java.util.Collection;&#xD;
&#xD;
<span class="hl-keyword">import</span> org.junit.Test;&#xD;
<span class="hl-keyword">import</span> org.junit.runner.RunWith;&#xD;
<span class="hl-keyword">import</span> org.junit.runners.Parameterized;&#xD;
<span class="hl-keyword">import</span> org.junit.runners.Parameterized.Parameters;&#xD;
&#xD;
<em><span class="hl-annotation" style="color: gray">@RunWith(Parameterized.class)</span></em>&#xD;
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyParameterizedClassTest {&#xD;
&#xD;
  <span class="hl-keyword">private</span> <span class="hl-keyword">int</span> multiplier;&#xD;
&#xD;
  <span class="hl-keyword">public</span> MyParameterizedClassTest(<span class="hl-keyword">int</span> testParameter) {&#xD;
    <span class="hl-keyword">this</span>.multiplier = testParameter;&#xD;
  }&#xD;
&#xD;
  <em class="hl-comment" style="color: #080">// creates the test data</em>&#xD;
  <em><span class="hl-annotation" style="color: gray">@Parameters</span></em>&#xD;
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> Collection&lt;Object[]&gt; data() {&#xD;
    Object[][] data = <span class="hl-keyword">new</span> Object[][] { { <span class="hl-number">1</span> }, { <span class="hl-number">5</span> }, { <span class="hl-number">121</span> } };&#xD;
    <span class="hl-keyword">return</span> Arrays.asList(data);&#xD;
  }&#xD;
&#xD;
  <em><span class="hl-annotation" style="color: gray">@Test</span></em>&#xD;
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testMultiplyException() {&#xD;
    MyClass tester = <span class="hl-keyword">new</span> MyClass();&#xD;
    assertEquals(<span class="hl-string" style="color:blue">"Result"</span>, multiplier * multiplier,&#xD;
        tester.multiply(multiplier, multiplier));&#xD;
  }&#xD;
&#xD;
}&#xD; </pre><p>
                  
               </p>
               <p>
                  If you run this test class, the test method is executed
                  with
                  each
                  defined
                  parameter. In the above example the test method is executed
                  three times.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junitadvanced_rules"></a>11.2.&nbsp;Rules
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e1088"></a><p>
                  Via the
                  <code class="code">@Rule</code>
                  annotation you can create objects which can be used and
                  configured in
                  your test methods. This adds more
                  flexibility to your
                  tests. You could,
                  for example, specify which exception
                  message
                  you expect during
                  execution of your test code.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.junit.first;

<span class="hl-keyword">import</span> org.junit.Rule;
<span class="hl-keyword">import</span> org.junit.Test;
<span class="hl-keyword">import</span> org.junit.rules.ExpectedException;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> RuleExceptionTesterExample {

  <em><span class="hl-annotation" style="color: gray">@Rule</span></em>
  <span class="hl-keyword">public</span> ExpectedException exception = ExpectedException.none();

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> throwsIllegalArgumentExceptionIfIconIsNull() {
    exception.expect(IllegalArgumentException.<span class="hl-keyword">class</span>);
    exception.expectMessage(<span class="hl-string" style="color:blue">"Negative value not allowed"</span>);
    ClassToBeTested t = <span class="hl-keyword">new</span> ClassToBeTested();
    t.methodToBeTest(-<span class="hl-number">1</span>);
  }
} </pre><p>
                  
               </p>
               <p>
                  JUnit already provides several useful implementations of
                  rules. For
                  example, the
                  <code class="code">TemporaryFolder</code>
                  class allows to setup files and folders which are automatically
                  removed after a test.
                  
               </p>
               <p>
                  The following code shows an example for the usage of the
                  <code class="code">TemporaryFolder</code>
                  implementation.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> de.vogella.junit.first;

<span class="hl-keyword">import</span> <span class="hl-keyword">static</span> org.junit.Assert.assertTrue;

<span class="hl-keyword">import</span> java.io.File;
<span class="hl-keyword">import</span> java.io.IOException;

<span class="hl-keyword">import</span> org.junit.Rule;
<span class="hl-keyword">import</span> org.junit.Test;
<span class="hl-keyword">import</span> org.junit.rules.TemporaryFolder;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> RuleTester {

  <em><span class="hl-annotation" style="color: gray">@Rule</span></em>
  <span class="hl-keyword">public</span> TemporaryFolder folder = <span class="hl-keyword">new</span> TemporaryFolder();

  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> testUsingTempFolder() <span class="hl-keyword">throws</span> IOException {
    File createdFolder = folder.newFolder(<span class="hl-string" style="color:blue">"newfolder"</span>);
    File createdFile = folder.newFile(<span class="hl-string" style="color:blue">"myfilefile.txt"</span>);
    assertTrue(createdFile.exists());
  }
} </pre><p>
                  
               </p>
               <p>
                  To write your custom rule, you need to implement the
                  <code class="code">TestRule</code>
                  interface.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junitadvanced_categories"></a>11.3.&nbsp;Categories
                        </h3>
                     </div>
                  </div>
               </div><a class="indexterm" name="d400319e1126"></a><p>
                  It is possible to define categories of tests and include or
                  exclude
                  them based on annotations. The following example is based on the
                  <a class="ulink" href="https://github.com/junit-team/junit/blob/master/doc/ReleaseNotes4.8.md" target="_top">JUnit 4.8 release notes</a>.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> FastTests { <em class="hl-comment" style="color: #080">/* category marker */</em>
}

<span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> SlowTests { <em class="hl-comment" style="color: #080">/* category marker */</em>
}

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> A {
  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> a() {
    fail();
  }

  <em><span class="hl-annotation" style="color: gray">@Category(SlowTests.class)</span></em>
  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> b() {
  }
}

<em><span class="hl-annotation" style="color: gray">@Category({ SlowTests.class, FastTests.class })</span></em>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> B {
  <em><span class="hl-annotation" style="color: gray">@Test</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> c() {
  }
}

<em><span class="hl-annotation" style="color: gray">@RunWith(Categories.class)</span></em>
<em><span class="hl-annotation" style="color: gray">@IncludeCategory(SlowTests.class)</span></em>
<em><span class="hl-annotation" style="color: gray">@SuiteClasses({ A.class, B.class })</span></em>
<em class="hl-comment" style="color: #080">// Note that Categories is a kind of Suite</em>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SlowTestSuite {
  <em class="hl-comment" style="color: #080">// Will run A.b and B.c, but not A.a</em>
}

<em><span class="hl-annotation" style="color: gray">@RunWith(Categories.class)</span></em>
<em><span class="hl-annotation" style="color: gray">@IncludeCategory(SlowTests.class)</span></em>
<em><span class="hl-annotation" style="color: gray">@ExcludeCategory(FastTests.class)</span></em>
<em><span class="hl-annotation" style="color: gray">@SuiteClasses({ A.class, B.class })</span></em>
<em class="hl-comment" style="color: #080">// Note that Categories is a kind of Suite</em>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> SlowTestSuite {
  <em class="hl-comment" style="color: #080">// Will run A.b, but not A.a or B.c</em>
} </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="mockingframeworks"></a>12.&nbsp;Mocking
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               Unit testing also makes use of object mocking. In this case the real
               object is exchanged by a replacement which has a predefined behavior
               for the test.
               
            </p>
            <p>
               There are several frameworks available for mocking. To learn
               more about
               mock
               frameworks please see the
               <a class="ulink" href="http://www.vogella.com/tutorials/Mockito/article.html" target="_top">Mockito tutorial</a>
               and the
               <a class="ulink" href="http://www.vogella.com/tutorials/EasyMock/article.html" target="_top">EasyMock tutorial</a>
               
            </p>
         </div> 
         <script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
         
         <!-- Article - Before Support 336 x 280 -->
         <ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3851443674951530" data-ad-slot="3645921933"></ins>
         <script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="supportandlicense"></a>13.&nbsp;About this website
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="thankyou"></a>13.1.&nbsp;Donate to support free tutorials
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  
                  	
               </p>
               <p>
                  		Please consider a contribution
                  	<a href="http://www.vogella.com/support.html">
                     			<img src="http://www.vogella.com/img/common/40x50xvogella-donate.png.pagespeed.ic.gMuY8kQC6X.png" width="40" height="50" alt="Support free tutorials" title="Support free tutorials" onclick="_gaq.push(['_trackEvent', 'Donations', 'clicked', 'Buttom tutorial in thank you']);"></a>
                  			if this article helped you. It will help to maintain our content and our Open Source activities.
                  	
               </p>
               <p>
                  
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="questions"></a>13.2.&nbsp;Questions and discussion
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Writing and updating these tutorials is a lot of work.
                  If this
                  free community service was helpful,
                  you can support the cause by
                  giving
                  a tip
                  as well as reporting typos and factual errors.
                  
               </p>
               <p>
                  If you find errors in this tutorial, please notify me
                  (see the
                  <a class="ulink" href="#top" target="_top">top of the page</a>).
                  Please note that due to the high volume of feedback I
                  receive, I
                  cannot answer questions to your implementation. Ensure you
                  have read
                  the
                  <a class="ulink" href="http://www.vogella.com/faq.html" target="_top">vogella FAQ</a>
                  as
                  I don't respond to questions already answered there.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="thankyou"></a>13.3.&nbsp;License for this tutorial and its code
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  This tutorial is Open Content under the
                  <a class="ulink" href="http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en" target="_top">
                     CC BY-NC-SA 3.0 DE
                     </a>
                  license. Source code in this tutorial is distributed under the
                  <a class="ulink" href="https://www.eclipse.org/legal/epl-v10.html" target="_top">Eclipse Public License</a>.
                  See the
                  <a class="ulink" href="http://www.vogella.com/license.html" target="_top">vogella License</a>
                  page
                  for details on the terms of reuse.
                  
               </p>
            </div>
         </div>
         
         
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="resources"></a>14.&nbsp;Links and Literature
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="junit_links"></a>14.1.&nbsp;JUnit Resources
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  <a class="ulink" href="http://www.amazon.com/dp/3943747042" target="_top">Eclipse IDE book from Lars Vogel</a>
                  
               </p>
               <p>
                  <a class="ulink" href="http://www.junit.org/" target="_top">JUnit Homepage</a>      
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="resources_general"></a>14.2.&nbsp;vogella Resources
                        </h3>
                     </div>
                  </div>
               </div>
               <div class="informaltable">
                  <table border="0">
                     <colgroup>
                        <col width="50%" align="left">
                        <col width="50%" align="left">
                     </colgroup>
                     <thead>
                        <tr>
                           <th align="left"><a class="ulink" href="http://www.vogella.com/training/" target="_top">TRAINING</a></th>
                           <th align="left"><a class="ulink" href="http://www.vogella.com/consulting/" target="_top">SERVICE &amp; SUPPORT</a></th>
                        </tr>
                     </thead>
                     <tbody>
                        <tr>
                           <td align="left">
                              The vogella company provides comprehensive <a class="ulink" href="http://www.vogella.com/training/" target="_top">training and education services</a> 
                              from experts in the areas of Eclipse RCP, Android, Git, Java, Gradle and Spring.
                              We offer both public and inhouse training. Whichever course you decide to take, you are guaranteed to experience 
                              what many before you refer to as 
                              <a class="ulink" href="http://www.vogella.com/training/" target="_top">&#8220;The best IT class I have ever attended&#8221;</a>.
                              
                           </td>
                           <td align="left">
                              The vogella company offers <a class="ulink" href="http://www.vogella.com/consulting/" target="_top">expert consulting</a> services, development support and coaching. Our customers range from
                              Fortune 100 corporations to individual developers.  
                              
                           </td>
                        </tr>
                     </tbody>
                  </table>
               </div>
            </div>
         </div><img src="http://vg08.met.vgwort.de/na/faa70b57174042cb9719b704433a2642" width="1" height="1" alt=""></div>
      
      
      
   <script pagespeed_no_defer="">//<![CDATA[
(function(){window.pagespeed=window.pagespeed||{};var f=window.pagespeed,h=function(e,a,c,b){this.c=e;this.a=a;this.b=c;this.d=b};f.beaconUrl="";
var k=function(e){var a=e.c,c=window.mod_pagespeed_start,b=Number(new Date)-c,a=a+(-1==a.indexOf("?")?"?":"&"),a=a+"ets="+("load"==e.a?"load:":"unload:"),a=a+b;if("beforeunload"!=e.a||!window.mod_pagespeed_loaded){a+="&r"+e.a+"=";if(window.performance){var b=window.performance.timing,d=b.navigationStart,g=b.requestStart,a=a+(b[e.a+"EventStart"]-d),a=a+("&nav="+(b.fetchStart-d)),a=a+("&dns="+(b.domainLookupEnd-b.domainLookupStart)),a=a+("&connect="+(b.connectEnd-b.connectStart)),a=a+("&req_start="+
(g-d)),a=a+("&ttfb="+(b.responseStart-g)),a=a+("&dwld="+(b.responseEnd-b.responseStart)),a=a+("&dom_c="+(b.domContentLoadedEventStart-d));window.performance.navigation&&(a+="&nt="+window.performance.navigation.type);d=-1;b.msFirstPaint?d=b.msFirstPaint:window.chrome&&window.chrome.loadTimes&&(d=Math.floor(1E3*window.chrome.loadTimes().firstPaintTime));d=d-g;0<=d&&(a+="&fp="+d)}else a+=b;f.getResourceTimingData&&window.parent==window&&(a+=f.getResourceTimingData());a+=window.parent!=window?"&ifr=1":
"&ifr=0";"load"==e.a&&(window.mod_pagespeed_loaded=!0,(b=window.mod_pagespeed_num_resources_prefetched)&&(a+="&nrp="+b),(b=window.mod_pagespeed_prefetch_start)&&(a+="&htmlAt="+(c-b)));f.panelLoader&&(c=f.panelLoader.getCsiTimingsString(),""!=c&&(a+="&b_csi="+c));f.criticalCss&&(c=f.criticalCss,a+="&ccis="+c.total_critical_inlined_size+"&cces="+c.total_original_external_size+"&ccos="+c.total_overhead_size+"&ccrl="+c.num_replaced_links+"&ccul="+c.num_unreplaced_links);""!=e.b&&(a+=e.b);document.referrer&&
(a+="&ref="+encodeURIComponent(document.referrer));a+="&url="+encodeURIComponent(e.d);f.beaconUrl=a;(new Image).src=a}};f.e=function(e,a,c,b){var d=new h(e,a,c,b);window.addEventListener?window.addEventListener(a,function(){k(d)},!1):window.attachEvent("on"+a,function(){k(d)})};f.addInstrumentationInit=f.e;})();

pagespeed.addInstrumentationInit('/mod_pagespeed_beacon', 'load', '', 'http://www.vogella.com/tutorials/JUnit/article.html');
//]]></script></body>
</html>

