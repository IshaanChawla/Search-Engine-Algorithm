<!DOCTYPE html>
<html>
<head>
<title>Pointers - Learn C - Free Interactive C Tutorial</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="description" content="Learn-C.org is a free interactive C tutorial for people who want to learn C, fast."/>
<meta name="keywords" content="Learn,C,Tutorial,Interactive,Free"/>
<meta name="google-site-verification" content="cXWj61RCtO3fVP24Y7CO-nX0ba30tgdJYY8GGBactLI"/>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta property="og:title" content="Pointers - Learn C - Free Interactive C Tutorial"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="http://learn-c.org/"/>
<meta property="og:image" content="http://learn-c.org/static/img/logos/learn-c.png"/>
<link rel="stylesheet" href="/static/css/codemirror.css">
<link rel="stylesheet" href="/static/css/theme/monokai.css">
<link rel="stylesheet" type="text/css" href="/static/css/bootstrap.min.css"/>
<link rel="stylesheet" type="text/css" href="/static/css/bootstrap-responsive.css"/>
<link rel="stylesheet" type="text/css" href="/static/css/learnpython.css"/>
<script src="/static/js/jquery.min.js"></script>
</head>
<body>
<div class="navbar navbar-static-top" style="margin-bottom: 10px">
<div class="navbar-inner">
<div class="container">
<a class="brand" href="/" style="padding: 4px 10px"><img src="/static/img/logos/learn-c.png" style="height: 32px;"/></a>
<div class="social hidden-phone" style="margin-top: 10px; display: inline-block; float: left">
 
<div class="addthis_toolbox addthis_default_style " style="width: 400px; margin-left: 20px">
<a class="addthis_button_facebook_like" fb:like:layout="button_count"></a>
<a class="addthis_button_tweet"></a>
<a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
<a class="addthis_counter addthis_pill_style"></a>
</div>
<script type="text/javascript">
                    var addthis_config = {"data_track_clickback":true};
                    var addthis_share = {"url": "http://learn-c.org" };
                </script>
<script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4dafdfe6039782b1"></script>
 
 
</div>
<ul class="nav pull-right">
<li><a href="/about">About</a></li>
 
</ul>
</div>
</div>
</div>
<div class="container">
<div class="row">
<div class="span8">
<ul class="nav nav-pills">
<li><a href="http://www.learnpython.org">Python</a></li>
<li><a href="http://www.learnjavaonline.org">Java</a></li>
<li class="active"><a href="http://www.learn-c.org">C</a></li>
 
<li><a href="http://www.learn-js.org">JavaScript</a></li>
<li><a href="http://www.learn-php.org">PHP</a></li>
<li><a href="http://www.learnshell.org">Shell</a></li>
<li><a href="http://www.learncs.org">C#</a></li>
 
<li><a href="/recruit-coders-jobs">Jobs</a></li>
</ul>
</div>
<div class="span4">
<ul class="nav nav-pills pull-right">
<li><a href="/de/"><img src="/static/img/flags/de.png"/></a></li>
<li class="active"><a href="/en/"><img src="/static/img/flags/en.png"/></a></li>
<li><a href="/pl/"><img src="/static/img/flags/pl.png"/></a></li>
</ul>
</div>
</div>
</div>
<div class="container" id="main">
<div class="row">
<div class="span10" style="padding-right: 10px; box-sizing: border-box;">
<div>
<script type="text/javascript"><!--
                    google_ad_client = "ca-pub-3723950136133694";
                    /* Learn Python Bottom */
                    google_ad_slot = "7782329453";
                    google_ad_width = 728;
                    google_ad_height = 90;
                    //-->
                </script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
<ul class="breadcrumb" style="margin-top: 10px">
<li><a href="/en/Welcome">Welcome</a> <span class="divider">/</span></li>
<li class="active">Pointers</li>
</ul>
<div class="clearfix" style="margin-top: 10px; margin-bottom: 10px;">
<a class="btn pull-left" href="/en/Functions"> <i class="icon-chevron-left"></i> Previous Tutorial</a>
<a class="btn pull-right" href="/en/Structures">Next Tutorial <i class="icon-chevron-right"></i></a>
</div>
<span id="inner-text">
<h1>Pointers</h1>
<p>Pointers are also variables and play a very important role in C programming language. They are used for several reasons, such as:</p>
<ul>
<li>Strings</li>
<li>Dynamic memory allocation</li>
<li>Sending function arguments by reference </li>
<li>Building complicated data structures</li>
<li>Pointing to functions</li>
<li>Building special data strcutures (i.e. Tree, Tries, etc...)</li>
</ul>
<p>And many more.</p>
<h3>What is a pointer?</h3>
<p>A pointer is essentially a simple integer variable which holds a <strong>memory address</strong> that points to a value, instead of holding the actual value itself. </p>
<p>The computer's memory is a sequential store of data, and a pointer points to a specific part of the memory. Our program can use pointers in such a way that the pointers point to a large amount of memory - depending on how much we decide to read from that point on.</p>
<h3>Strings as pointers</h3>
<p>We've already discussed strings, but now we can dive in a bit deeper and understand what strings in C really are (which are called C-Strings to differentiate them from other strings when mixed with C++) </p>
<p>The following line:</p>
<pre><code>char * name = "John";
</code></pre>
<p>does three things:</p>
<ol>
<li>It allocates a local (stack) variable called <code>name</code>, which is a pointer to a single character. </li>
<li>It causes the string "John" to appear somewhere in the program memory (after it is compiled and executed, of course). </li>
<li>It initializes the <code>name</code> argument to point to where the <code>J</code> character resides at (which is followed by the rest of the string in the memory).</li>
</ol>
<p>If we try to access the <code>name</code> variable as an array, it will work, and will return the ordinal value of the character <code>J</code>, since the <code>name</code> variable actually points exactly to the beginning of the string.</p>
<p>Since we know that the memory is sequential, we can assume that if we move ahead in the memory to the next character, we'll receive the next letter in the string, until we reach the end of the string, marked with a null terminator (the character which it's ordinal value is 0, noted as <code>\0</code>).</p>
<h3>Dereferencing</h3>
<p>Dereferencing is the act of referring to where the pointer points at, instead of the memory address. We are already using dereferencing in arrays - but we just didn't know it yet. The brackets operator - <code>[0]</code> for example, accesses the first item of the array. And since arrays are actually pointers, accessing the first item in the array is the same as dereferencing a pointer. Dereferencing a pointer is done using the asterisk operator <code>*</code>.</p>
<p>If we want to create an array that will point to a different variable in our stack, we can write the following code:</p>
<pre><code>/* define a local variable a */
int a = 1;

/* define a pointer variable, and point it to a using the &amp; operator */
int * pointer_to_a = &amp;a;

printf("The value a is %d\n", a);
printf("The value of a is also %d\n", *pointer_to_a);
</code></pre>
<p>Notice that we used the <code>&amp;</code> operator to point at the variable <code>a</code>, which we have just created.</p>
<p>We then referred to it using the dereferencing operator. We can also change the contents of the dereferenced variable:</p>
<pre><code>int a = 1;
int * pointer_to_a = &amp;a;

/* let's change the variable a */
a += 1;

/* we just changed the variable a again! */
*pointer_to_a += 1;

/* will print out 3 */
printf("The value of a is now %d\n", a);
</code></pre>
<h2>Exercise</h2>
<p>Create a pointer to the local variable <code>n</code> called <code>pointer_to_n</code>, and use it to increase the value of <code>n</code> by one.</p>
</span>
<button id="start-exercise" class="btn btn-success" onclick="toggleMinimize(true)"><div class="icon-play icon-white" style="padding-right: 10px"></div> Start Exercise</button>
<script>
                $(function(){
                    toggleMinimize();
                })
            </script>
<hr/>
<div class="clearfix" style="margin-top: 10px; margin-bottom: 10px;">
<a class="btn btn-primary pull-left" href="/en/Functions"><i class="icon-chevron-left icon-white"></i> Previous Tutorial</a>
<a class="btn btn-primary pull-right" href="/en/Structures">Next Tutorial <i class="icon-chevron-right icon-white"></i></a>
</div>
<hr/>
<div class="hidden-phone">
 
 
<iframe src="https://www.skillfeed.com/related_courses?border=yes&search=yes&title=Related Tutorials&head=center&keyword=c%20programming&affiliate_code=67577" width="800" height="255" frameborder="0" style="margin-left: -10px"></iframe>
 
 
<div>
<script type="text/javascript"><!--
                    google_ad_client = "ca-pub-3723950136133694";
                    /* Learn Python Bottom */
                    // google_ad_slot = "7782329453";

                    /* Learn Python Long Bottom */
                    google_ad_slot = "7062365450";
                    google_ad_width = 728;
                    google_ad_height = 90;
                    //-->
                </script>
<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
</div>
<script type="text/javascript" src="https://www.spoj.com/banner.js"></script>
</div>
</div>
<div class="span2 hidden-phone" style="margin-left: 0">
<div id="google-ad-right">
 
<div style="margin-bottom: 10px">
<script>
                        google_ad_client = "ca-pub-3723950136133694";
                        google_ad_slot = "6624688330";
                        google_ad_width = 160;
                        google_ad_height = 600;
                    </script>
<script src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
                    </script>
</div>
<div style="margin-bottom: 10px">
<script type="text/javascript" src="http://ap.lijit.com/www/delivery/fpi.js?z=283190&u=learnpython&width=160&height=600"></script>
</div>
<div style="margin-left: 5px;">
<a href="https://digitalocean.com/"><img src="/static/img/banners/digital-ocean.png"></a>
</div>
 
 
</div>
</div>
</div>
</div>
<footer>
<div class="container">
<div class="row">
<div class="span6">
<h5 style="line-height: 28px">
Code Window
<span style="float: right;">
<button id="run-button" class="btn btn-success" onclick="execute()"><div class="icon-play icon-white" style="padding-right: 10px"></div>Run</button>
<button id="reset-button" onclick="reset()" class="btn btn-primary">Reset</button>
<button id="solution-button" onclick="showSolution()" class="btn btn-primary">Solution</button>
</span>
</h5>
</div>
<div class="span6">
<div style="width: 100%; height: 100%">
<h5 style="line-height: 28px">
Output Window
<span style="float: right">
<button id="expected-output-button" class="btn btn-primary" onclick="showExpected()">Expected Output</button>
<button id="minimize-button" class="btn" onclick="toggleMinimize()">Minimize Code Window</button>
</span>
</h5>
</div>
</div>
</div>  
<div class="row" id="footer-toggle">
<div class="span6">
<textarea id="code" style="width: 100%; height: 210px">#include &lt;stdio.h&gt;

int main() {
  int n = 10;

  /* your code goes here */

  /* testing code */
  if (pointer_to_n != &amp;n) return 1;
  if (*pointer_to_n != 11) return 1;

  printf(&#34;Done!\n&#34;);
  return 0;
}</textarea>
</div>
<div class="span6">
 
<div id="loading" style="">
Executing, please wait...
</div>
<textarea id="output" style="width: 475px; height: 210px"></textarea>
<div style="background: rgba(255,255,255,0.1); margin-top: -20px; text-align: right; font-size: 10px; color: white; z-index: inherit; position: relative; line-height: 20px; padding-right: 5px;">
Powered by <a target="_blank" href="http://sphere-engine.com/">Sphere Engine &trade;</a>
</div>
</div>
</div>
</div>  
<div class="container">
<div class="row">
<div class="span12">
<div class="pull-right" style="padding-top: 3px">
<a href="http://www.dmca.com/Protection/Status.aspx?ID=fd56e7e2-9e1f-43cc-be7c-e1023cb5781c" title="DMCA"> <img src="/static/img/dmca_protected_sml_120ad.png?ID=fd56e7e2-9e1f-43cc-be7c-e1023cb5781c" alt="DMCA.com"/></a>
</div>
<div class="copyright">Copyright &copy; Learn-C.org. Read our <a href='/tos'>Terms of Use</a> and <a href='/privacy'>Privacy Policy</a></div>
</div>
</div>
</div>
</footer>
<script src="http://s.univide.com/t.js?pid=1&pcid=3e1f8f4d970989b8acb432a86a77a1dc"></script>
<script src="/static/js/codemirror/codemirror.js"></script>
<script src="/static/js/codemirror/addon/edit/matchbrackets.js"></script>
<script src="/static/js/codemirror/mode/clike/clike.js"></script>
<script src="/static/js/codemirror/mode/python/python.js"></script>
<script src="/static/js/codemirror/mode/perl/perl.js"></script>
<script src="/static/js/codemirror/mode/php/php.js"></script>
<script src="/static/js/codemirror/mode/javascript/javascript.js"></script>
<script src="/static/js/codemirror/mode/ruby/ruby.js"></script>
<script src="/static/js/codemirror/mode/shell/shell.js"></script>
<script src="/static/js/bootstrap.min.js"></script>
<script src="/static/js/bootbox.min.js"></script>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-22741967-3']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<script>
    $(function() {
        $("#sign-in").click(function() {
            var email = $("#email").val();
            var password = $("#password").val();

            $.ajax({
                url: "/signin",
                data: {
                    email: email,
                    password: password
                },
                success: function(data) {
                    if (data.status == "success") {
                        document.location.refresh();
                    } else {
                        $("#status").text("E-mail or password combination invalid.")
                    }
                }
            })
        });

        $("#sign-up").click(function() {

        });
    });
</script>
<script>
        var domainData = {"container": "#include <stdio.h>\n\nint main() {\n{code}\nreturn 0;\n}\n", "sender": "Learn-C.org <admin@learn-c.org>", "language": "c", "twitter": "@learnc", "namespace": "learn-c.org", "language_uppercase": "C", "container_word": "main()", "styled_domain": "Learn-C.org", "analytics": "UA-22741967-3", "contact_email": "admin@learn-c.org", "copyright": "Copyright &copy; Learn-C.org. ", "logo": "/static/img/logos/learn-c.png", "support_email": "support@learn-c.org", "favicon": "favicon-learn-c.ico", "full_url": "http://learn-c.org", "container_indent": "    ", "default_code": "/* Welcome to the Interactive C Tutorial.\nStart by choosing a chapter and\nwrite your code in this window. */\n\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World!\");\n    return 0;\n}\n    "};
        var nextChapter = "/en/Structures";
        var previousChapter = "/en/Functions";
        var backChapter = "/en/Welcome";
        var tutorialData = {"code": "#include <stdio.h>\n\nint main() {\n  int n = 10;\n\n  /* your code goes here */\n\n  /* testing code */\n  if (pointer_to_n != &n) return 1;\n  if (*pointer_to_n != 11) return 1;\n\n  printf(\"Done!\\n\");\n  return 0;\n}", "page_title": "Pointers", "links": [], "text": "<p>Pointers are also variables and play a very important role in C programming language. They are used for several reasons, such as:</p>\n<ul>\n<li>Strings</li>\n<li>Dynamic memory allocation</li>\n<li>Sending function arguments by reference </li>\n<li>Building complicated data structures</li>\n<li>Pointing to functions</li>\n<li>Building special data strcutures (i.e. Tree, Tries, etc...)</li>\n</ul>\n<p>And many more.</p>\n<h3>What is a pointer?</h3>\n<p>A pointer is essentially a simple integer variable which holds a <strong>memory address</strong> that points to a value, instead of holding the actual value itself. </p>\n<p>The computer's memory is a sequential store of data, and a pointer points to a specific part of the memory. Our program can use pointers in such a way that the pointers point to a large amount of memory - depending on how much we decide to read from that point on.</p>\n<h3>Strings as pointers</h3>\n<p>We've already discussed strings, but now we can dive in a bit deeper and understand what strings in C really are (which are called C-Strings to differentiate them from other strings when mixed with C++) </p>\n<p>The following line:</p>\n<pre><code>char * name = \"John\";\n</code></pre>\n<p>does three things:</p>\n<ol>\n<li>It allocates a local (stack) variable called <code>name</code>, which is a pointer to a single character. </li>\n<li>It causes the string \"John\" to appear somewhere in the program memory (after it is compiled and executed, of course). </li>\n<li>It initializes the <code>name</code> argument to point to where the <code>J</code> character resides at (which is followed by the rest of the string in the memory).</li>\n</ol>\n<p>If we try to access the <code>name</code> variable as an array, it will work, and will return the ordinal value of the character <code>J</code>, since the <code>name</code> variable actually points exactly to the beginning of the string.</p>\n<p>Since we know that the memory is sequential, we can assume that if we move ahead in the memory to the next character, we'll receive the next letter in the string, until we reach the end of the string, marked with a null terminator (the character which it's ordinal value is 0, noted as <code>\\0</code>).</p>\n<h3>Dereferencing</h3>\n<p>Dereferencing is the act of referring to where the pointer points at, instead of the memory address. We are already using dereferencing in arrays - but we just didn't know it yet. The brackets operator - <code>[0]</code> for example, accesses the first item of the array. And since arrays are actually pointers, accessing the first item in the array is the same as dereferencing a pointer. Dereferencing a pointer is done using the asterisk operator <code>*</code>.</p>\n<p>If we want to create an array that will point to a different variable in our stack, we can write the following code:</p>\n<pre><code>/* define a local variable a */\nint a = 1;\n\n/* define a pointer variable, and point it to a using the &amp; operator */\nint * pointer_to_a = &amp;a;\n\nprintf(\"The value a is %d\\n\", a);\nprintf(\"The value of a is also %d\\n\", *pointer_to_a);\n</code></pre>\n<p>Notice that we used the <code>&amp;</code> operator to point at the variable <code>a</code>, which we have just created.</p>\n<p>We then referred to it using the dereferencing operator. We can also change the contents of the dereferenced variable:</p>\n<pre><code>int a = 1;\nint * pointer_to_a = &amp;a;\n\n/* let's change the variable a */\na += 1;\n\n/* we just changed the variable a again! */\n*pointer_to_a += 1;\n\n/* will print out 3 */\nprintf(\"The value of a is now %d\\n\", a);\n</code></pre>\n<h2>Exercise</h2>\n<p>Create a pointer to the local variable <code>n</code> called <code>pointer_to_n</code>, and use it to increase the value of <code>n</code> by one.</p>", "solution": "#include <stdio.h>\n\nint main() {\n  int n = 10;\n\n  int * pointer_to_n = &n;\n\n  *pointer_to_n += 1;\n\n  /* testing code */\n  if (pointer_to_n != &n) return 1;\n  if (*pointer_to_n != 11) return 1;\n\n  printf(\"Done!\\n\");\n  return 0;\n}", "is_tutorial": true, "previous_chapter": "Functions", "output": "Done!", "next_chapter": "Structures", "back_chapter": "Welcome"};
    </script>
<script src="/static/js/learnpython.js"></script>
</body>
</html>

