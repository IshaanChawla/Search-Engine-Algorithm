<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>2.9 &#8212; Symbolic constants and the const keyword &laquo; Learn C++</title>
	<link rel="shortcut icon" href="http://www.learncpp.com/blog/wp-content/ata-images/learncpp.ico" />
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; Feed" href="http://www.learncpp.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; Comments Feed" href="http://www.learncpp.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 2.9 &#8212; Symbolic constants and the const keyword Comments Feed" href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"http:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"http:\/\/www.learncpp.com\/blog\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.2.2"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='crayon-css'  href='http://www.learncpp.com/blog/wp-content/plugins/crayon-syntax-highlighter/css/min/crayon.min.css?ver=2.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='crayon-theme-familiar-learncppcom-css'  href='http://www.learncpp.com/blog/wp-content/uploads/crayon-syntax-highlighter/themes/familiar-learncppcom/familiar-learncppcom.css?ver=2.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='crayon-font-monaco-css'  href='http://www.learncpp.com/blog/wp-content/plugins/crayon-syntax-highlighter/fonts/monaco.css?ver=2.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='genericons-css'  href='http://www.learncpp.com/blog/wp-content/plugins/jetpack/_inc/genericons/genericons/genericons.css?ver=3.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack_css-css'  href='http://www.learncpp.com/blog/wp-content/plugins/jetpack/css/jetpack.css?ver=3.5.3' type='text/css' media='all' />
<!-- This site uses the Google Analytics by Yoast plugin v5.4.2 - Universal disabled - https://yoast.com/wordpress/plugins/google-analytics/ -->
<script type="text/javascript">

	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_gat._forceSSL']);
	_gaq.push(['_trackPageview']);

	(function () {
		var ga = document.createElement('script');
		ga.type = 'text/javascript';
		ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0];
		s.parentNode.insertBefore(ga, s);
	})();

</script>
<!-- / Google Analytics by Yoast -->
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-includes/js/jquery/jquery.js?ver=1.11.2'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var AjaxCheckClicks = {"ajaxurl":"http:\/\/www.learncpp.com\/blog\/wp-admin\/admin-ajax.php","nonce":"12738d6e92"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/adsense-click-fraud-monitoring/js/checkclicks.js?ver=4.2.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var AjaxUpdateClicks = {"ajaxurl":"http:\/\/www.learncpp.com\/blog\/wp-admin\/admin-ajax.php","nonce":"441c3b4826"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/adsense-click-fraud-monitoring/js/updateclicks.js?ver=4.2.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var CrayonSyntaxSettings = {"version":"2.7.1","is_admin":"0","ajaxurl":"http:\/\/www.learncpp.com\/blog\/wp-admin\/admin-ajax.php","prefix":"crayon-","setting":"crayon-setting","selected":"crayon-setting-selected","changed":"crayon-setting-changed","special":"crayon-setting-special","orig_value":"data-orig-value","debug":""};
var CrayonSyntaxStrings = {"copy":"Press %s to Copy, %s to Paste","minimize":"Click To Expand Code"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/crayon-syntax-highlighter/js/min/crayon.min.js?ver=2.7.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var clientcfmonitor = {"client_ip":"115.250.21.33","clickcount":"8","bannedperiod":"1","preurl":"http:\/\/www.learncpp.com\/blog\/wp-content\/plugins\/adsense-click-fraud-monitoring\/clickupdate.php","firstclickdate":[[""],[""]],"updatedVisitCount":"0","isblockedcount":"0","customclass":"cf_monitor","firstclick":"false","disablead":"false","currentURL":"\/cpp-tutorial\/2-9-symbolic-constants-and-the-const-keyword\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/adsense-click-fraud-monitoring/js/check_min.js?ver=4.2.2'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/themes/atahualpa/js/DD_roundies.js?ver=0.0.2a'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.learncpp.com/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='0.6a &#8212; Build configurations' href='http://www.learncpp.com/cpp-tutorial/06a-build-configurations/' />
<link rel='next' title='4.1a &#8212; Local variables, scope, and duration' href='http://www.learncpp.com/cpp-tutorial/4-1a-local-variables-and-local-scope/' />
<link rel='canonical' href='http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/' />
<link rel='shortlink' href='http://www.learncpp.com/?p=1256' />
<script type="text/javascript">
    window._mNHandle = window._mNHandle || {};
    window._mNHandle.queue = window._mNHandle.queue || [];
    medianet_versionId = "121199"; 
    (function() {
        var sct = document.createElement("script"),
        sctHl = document.getElementsByTagName("script")[0],
        isSSL = 'https:' == document.location.protocol;
        sct.type = "text/javascript";
        sct.src = (isSSL ? 'https:' : 'http:') + '//contextual.media.net/dmedianet.js?cid=8CUIE2148' + (isSSL ? '&https=1' : '')+'';
        sct.async = "async";
        sctHl.parentNode.insertBefore(sct, sctHl);
    })();
</script>
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type='text/css'>img#wpstats{display:none}</style><style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#bbb;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:100%}div#container{padding:20px;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:10px}.coltwo{width:100% }.colthree-inner{width:10px}.colthree{width:200px}div#header.full-width{width:100%}div#header,td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.comments-icon:active,a.comments-icon:visited{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container-pre{position:relative;margin:0;padding:0;height:150px;}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.codeoverlay{position:absolute;top:0;left:0;width:100%;height:100%}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:10px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:10px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;background:#fff;padding-left:15px!important;padding-right:15px!important;border:solid 4px #eee}div#footer.full-width{width:100%}div#footer,td#footer{width:auto;background-color:#f7f7f7;border:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px;margin-left:220px;margin-right:220px;margin-top:20px;width:auto!important}div#footer a:link,div#footer a:visited,div#footer a:active,td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}div#footer a:hover,td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee;background:#fff}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto;background:#fff}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget a:link,div.widget a:visited,div.widget a:active,div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget a:hover,div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_nav_menu ul li,div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_nav_menu ul li a:link,div.widget_nav_menu ul li a:visited,div.widget_nav_menu ul li a:active,div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_nav_menu ul li a:hover,div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_nav_menu ul li ul li a:link,div.widget_nav_menu ul li ul li a:visited,div.widget_nav_menu ul li ul li a:active,div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_nav_menu ul li ul li a:hover,div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_nav_menu ul li ul li ul li a:link,div.widget_nav_menu ul li ul li ul li a:visited,div.widget_nav_menu ul li ul li ul li a:active,div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_nav_menu ul li ul li ul li a:hover,div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_nav_menu ul li a:link,div.widget_nav_menu ul li a:active,div.widget_nav_menu ul li a:visited,div.widget_nav_menu ul li a:hover,div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;padding-top:20px}div.sticky{background:#eee url('<?php bloginfo('template_directory');?>/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button,input[type=submit]{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}input.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}p.thesetags{margin:10px 0}h3.reply,h3#reply-title{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:inline-block !important;background:url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;border-radius:5px;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}.post img.size-full{max-width:96%;width:auto;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colone-inner,.colthree-inner,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0;display:none}td#middle{width:100% !important;display:block}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.sub-menu li,ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}.page-id-8 .post-headline{display:none;} div.useCode{background:linear-gradient(#FFFF66,#CCCC00);border-radius:8px;padding-left:10px;padding-right:10px;padding-top:2px;padding-bottom:2px;font-size:10pt;text-align:left;display:inline-block;font-weight:550;}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('<?php bloginfo('template_directory');?>/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}ul{list-style-position:inside}</style>
<script type="text/javascript">
//<![CDATA[



/* JQUERY */
jQuery(document).ready(function(){ 
    
   
  

	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	
	
	/* Since 3.7.8: Auto resize videos (embed and iframe elements) 
	TODO: Parse parent's dimensions only once per layout column, not per video
	*/
	function bfa_resize_video() {
		jQuery('embed, iframe').each( function() {
			var video = jQuery(this),
			videoWidth = video.attr('width'); // use the attr here, not width() or css()
			videoParent = video.parent(),
			videoParentWidth = parseFloat( videoParent.css( 'width' ) ),
			videoParentBorder = parseFloat( videoParent.css( 'border-left-width' ) ) 
										+  parseFloat( videoParent.css( 'border-right-width' ) ),
			videoParentPadding = parseFloat( videoParent.css( 'padding-left' ) ) 
										+  parseFloat( videoParent.css( 'padding-right' ) ),
			maxWidth = videoParentWidth - videoParentBorder - videoParentPadding;

			if( videoWidth > maxWidth ) {
				var videoHeight = video.attr('height'),
				videoMaxHeight = ( maxWidth / videoWidth * videoHeight );
				video.attr({ width: maxWidth, height: videoMaxHeight });
			} 

		});	
	}
	bfa_resize_video();
	jQuery(window).resize( bfa_resize_video );

		
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button, input#submit").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>

<!--[if IE 6]>
<script type="text/javascript">DD_roundies.addRule("a.posts-icon, a.comments-icon, a.email-icon, img.logo");</script>
<![endif]-->

<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="2.9 -- Symbolic constants and the const keyword" />
<meta property="og:url" content="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/" />
<meta property="og:description" content="Symbolic constants If magic numbers are bad, what should you do instead? The answer is: use symbolic constants! A symbolic constant is a name given to a constant literal value. There are two ways t..." />
<meta property="article:published_time" content="2015-02-24T01:13:13+00:00" />
<meta property="article:modified_time" content="2015-05-14T00:44:52+00:00" />
<meta property="article:author" content="http://www.learncpp.com/author/alex/" />
<meta property="og:site_name" content="Learn C++" />
<meta property="og:image" content="https://s0.wp.com/i/blank.jpg" />
<meta property="og:locale" content="en_US" />
<meta name="twitter:card" content="summary" />
</head>
<body class="single single-post postid-1256 single-format-standard category-cpp-tutorial">

		<!-- Full Width Header -->
		<div id="header" class="full-width">
		<div id="imagecontainer-pre" class="header-image-container-pre">    <div id="imagecontainer" class="header-image-container" style="background: url('http://www.learncpp.com/blog/wp-content/ata-images/header/LearnCppHeader3_800.jpg') top center no-repeat;"></div><div class="clickable"><a class="divclick" title="Learn C++" href ="http://www.learncpp.com/">&nbsp;</a></div><div class="codeoverlay"></div></div>		</div>
		<!-- / Full Width Header -->
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-2" class="widget widget_text">			<div class="textwidget"><ul>
<li><a href="/"><big><big>Main Page</big></big></a>
<li><a href="
/featured-articles/">Featured Articles</a>
</ul>
<hr>
<ul>
<li><a href="/site-news/find-something-wrong/">Report an Issue</a>
<li><a href="/about/">About / Contact</a>
<li><a href="/about/#Support">Support LearnCpp</a>
</ul>
</div>
		</div><div id="text-3" class="widget widget_text"><div class="widget-title"><h3>Search</h3></div>			<div class="textwidget"><!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="center">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="16" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="hidden" name="sitesearch" value="www.LearnCpp.com" checked id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div>    
<!-- 
	Plugin: Custom Meta Widget	Plugin URL: http://shinraholdings.com/plugins/custom-meta-widget/-->


	<div id="custommetawidget-2" class="widget customMetaWidget">	<div class="widget-title"><h3>Meta</h3></div>	<ul>
	
	
    <li><a href="http://www.learncpp.com/blog/wp-login.php">Log in</a></li>	
	</ul>
    
	</div><div id="text-9" class="widget widget_text">			<div class="textwidget"><div class="cf_monitor">
<script type="text/javascript">
    google_ad_client = "ca-pub-0588844875925051";
    google_ad_slot = "2780990843";
    google_ad_width = 160;
    google_ad_height = 600;
</script>
<!-- Post - Left Sidebar - Wide Skyscraper -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
		</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

    
		
	<div class='code-block code-block-1' style='float:left;margin:8px 8px 8px 0px;'><div class="cf_monitor">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>	
								<div class="post-1256 post type-post status-publish format-standard hentry category-cpp-tutorial odd" id="post-1256">
						<div class="post-headline">		<h1>2.9 &#8212; Symbolic constants and the const keyword</h1>
		</div>		<div class="post-byline">By Alex, on February 23rd, 2015</div>		<div class="post-bodycopy clearfix"><p><strong>Symbolic constants</strong></p>
<p>If magic numbers are bad, what should you do instead?  The answer is: use symbolic constants!  A <strong>symbolic constant</strong> is a name given to a constant literal value.  There are two ways to declare symbolic constants in C++.  One of them is good, and one of them is not.  We&#8217;ll show you both.</p>
<p><strong>Bad: Using object-like macros with a substitution parameter as symbolic constants</strong></p>
<p>We&#8217;re going to show you the less desirable way to define a symbolic constant first.  This method was commonly used in a lot of older code, so you may still see it.</p>
<p>In lesson <a href="http://www.learncpp.com/cpp-tutorial/110-a-first-look-at-the-preprocessor/">1.10 -- a first look at the preprocessor</a>, you learned that object-like macros have two forms -- one that doesn&#8217;t take a substitution parameter (generally used for conditional compilation, and one that does have a substitution parameter.  We&#8217;ll talk about the case with the substitution parameter here.  That takes the form:</p>
<pre>
#define identifier substitution_text
</pre>
<p>Whenever the preprocessor encounters this directive, any further occurrence of &#8216;identifier&#8217; is replaced by &#8216;substitution_text&#8217;.  The identifier is traditionally typed in all capital letters, using underscores to represent spaces.</p>
<p>Consider the following snippet:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7524df39d723210472" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7524df39d723210472-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df39d723210472-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7524df39d723210472-1"><span class="crayon-p">#define YEN_PER_DOLLAR&nbsp;&nbsp;122</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df39d723210472-2"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">yen</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">dollars</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-v">YEN_PER_DOLLAR</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0006 seconds] -->
<p></p>
<p>When you compile your code, the preprocessor replaces all instances of YEN_PER_DOLLAR with 122, which is then compiled into your executable.</p>
<p>You&#8217;ll likely agree that this is much more intuitive than using a magic number for a couple of reasons.  YEN_PER_DOLLAR provides context for what the program is trying to do, even without a comment.  Second, if the number of yen per dollar changes, we only need to change the value of YEN_PER_DOLLAR in one place, and all instances of YEN_PER_DOLLAR will be replaced with the new value.</p>
<p>Consider our second example, using #define symbolic constants:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7524df3b0276950653" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7524df3b0276950653-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3b0276950653-2">2</div><div class="crayon-num" data-line="crayon-555d7524df3b0276950653-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3b0276950653-4">4</div><div class="crayon-num" data-line="crayon-555d7524df3b0276950653-5">5</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7524df3b0276950653-1"><span class="crayon-p">#define YEN_PER_DOLLAR&nbsp;&nbsp;122</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3b0276950653-2"><span class="crayon-p">#define COLUMNS_PER_PAGE&nbsp;&nbsp;122</span></div><div class="crayon-line" id="crayon-555d7524df3b0276950653-3">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3b0276950653-4"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">yet</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">dollars</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-v">YEN_PER_DOLLAR</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7524df3b0276950653-5"><span class="crayon-e">setWidthTo</span><span class="crayon-sy">(</span><span class="crayon-v">COLUMNS_PER_PAGE</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0007 seconds] -->
<p></p>
<p>In this case, it&#8217;s clear that YEN_PER_DOLLAR and COLUMNS_PER_PAGE are intended to be independent values, even though they happen to share the same value (122).</p>
<p>So why not use #define to make symbolic constants?  There are (at least) two major problems.</p>
<p>First, because macros are resolved by the preprocessor, which replaces the symbolic name with the defined value, #defined symbolic constants do not show up in the debugger (which shows you your actual code).  So although the compiler would compile <code>int yen = dollars * 122</code>, in the debugger you&#8217;d see <code>int yen = dollars * YEN_PER_DOLLAR;</code>.  You&#8217;d have to go find the definition of YEN_PER_DOLLAR in order to know what the actual value was.  This can make your programs harder to debug.</p>
<p>Second, #defined values always have global scope (which we&#8217;ll talk more about in the section on local and global variables).  This means a value #defined in one piece of code may have a naming conflict with a value #defined with the same name in another piece of code.</p>
<p><em>Rule: Avoid using #define to create symbolic constants</em></p>
<p><strong>A better solution: Using const variables</strong></p>
<p>A better way to create symbolic constants is through use of the <strong>const</strong> keyword.  To make a variable constant, simply put the const keyword before the variable type, like so:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7524df3b8427159378" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7524df3b8427159378-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7524df3b8427159378-1"><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">yenPerDollar</span><span class="crayon-sy">(</span><span class="crayon-cn">122</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>Const variables must be initialized when defined, and then that value can not be changed.  Here is the way the above snippet of code should be written:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7524df3bf692624397" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7524df3bf692624397-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3bf692624397-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7524df3bf692624397-1"><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">yenPerDollar</span><span class="crayon-sy">(</span><span class="crayon-cn">122</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3bf692624397-2"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">yen</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">dollars</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-v">yenPerDollar</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0007 seconds] -->
<p></p>
<p>Declaring a variable as const prevents us from inadvertently changing its value:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7524df3c5476827174" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7524df3c5476827174-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3c5476827174-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7524df3c5476827174-1"><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">yenPerDollar</span><span class="crayon-sy">(</span><span class="crayon-cn">122</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3c5476827174-2"><span class="crayon-v">yenPerDollar</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">123</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// compiler error, can not change value of const variable</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0006 seconds] -->
<p></p>
<p>Defining a const variable without initializing it will cause a compile error:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7524df3cb231076136" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7524df3cb231076136-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7524df3cb231076136-1"><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">yenPerDollar</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// compiler error, must be initialized upon definition</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>Although a constant variable might seem like an oxymoron, they can be very useful in helping to document your code and avoid magic numbers.  Unlike macro symbolic constants, const variables can be debugged, and allow you to control the scope of their existence.  Unlike non-const variables, their values cannot be changed once set.</p>
<p>Some programmers prefer to use all upper-case names for const variables (to match the style of #defined values).  However, we will use normal variable naming conventions, which is more common.  Const variables act exactly like normal variables in every case except that they can not be assigned to.</p>
<p><em>Rule: use const variables to &#8220;name&#8221; your magic numbers.</em><br />
<em>Rule: Any variable that should not change values after initialization should be declared as const.</em></p>
<p><strong>Using symbolic constants throughout a program</strong></p>
<p>In many applications, a given symbolic constant needs to be used throughout your code (not just in one location).  These can include physics or mathematical constants that don&#8217;t change (e.g. pi or avogadro&#8217;s number), or application-specific &#8220;tuning&#8221; values (e.g. friction or gravity coefficients).  Instead of redefining these every time they are needed, it&#8217;s better to declare them once in a central location and use them wherever needed.  That way, if you ever need to change them, you only need to change them in one place.</p>
<p>There are multiple ways to facilitate this within C++, but the following is probably easiest:</p>
<p>1) Create a header file to hold these constants<br />
2) Inside this header file, declare a namespace<br />
3) Add all your constants inside the namespace (make sure they&#8217;re const)<br />
4) #include the header file wherever you need it</p>
<p>e.g. constants.h:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7524df3d3973055317" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7524df3d3973055317-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3d3973055317-2">2</div><div class="crayon-num" data-line="crayon-555d7524df3d3973055317-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3d3973055317-4">4</div><div class="crayon-num" data-line="crayon-555d7524df3d3973055317-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3d3973055317-6">6</div><div class="crayon-num" data-line="crayon-555d7524df3d3973055317-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3d3973055317-8">8</div><div class="crayon-num" data-line="crayon-555d7524df3d3973055317-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3d3973055317-10">10</div><div class="crayon-num" data-line="crayon-555d7524df3d3973055317-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3d3973055317-12">12</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7524df3d3973055317-1"><span class="crayon-p">#ifndef CONSTANTS_H</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3d3973055317-2"><span class="crayon-p">#define CONSTANTS_H</span></div><div class="crayon-line" id="crayon-555d7524df3d3973055317-3">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3d3973055317-4"><span class="crayon-c">// define your own namespace to hold constants</span></div><div class="crayon-line" id="crayon-555d7524df3d3973055317-5"><span class="crayon-t">namespace</span><span class="crayon-h"> </span><span class="crayon-e">constants</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3d3973055317-6"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7524df3d3973055317-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">double</span><span class="crayon-h"> </span><span class="crayon-e">pi</span><span class="crayon-sy">(</span><span class="crayon-cn">3.14159</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3d3973055317-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">double</span><span class="crayon-h"> </span><span class="crayon-e">avogadro</span><span class="crayon-sy">(</span><span class="crayon-cn">6.0221413e23</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7524df3d3973055317-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">double</span><span class="crayon-h"> </span><span class="crayon-e">my_gravity</span><span class="crayon-sy">(</span><span class="crayon-cn">9.2</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// m/s^2 -- gravity is light on this planet</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3d3973055317-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// ... other related constants</span></div><div class="crayon-line" id="crayon-555d7524df3d3973055317-11"><span class="crayon-sy">}</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3d3973055317-12"><span class="crayon-p">#endif</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0013 seconds] -->
<p></p>
<p>Use the scope resolution operator (::) to access your constants in .cpp files:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7524df3da797078234" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7524df3da797078234-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7524df3da797078234-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7524df3da797078234-1"><span class="crayon-p">#include "constants.h"</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7524df3da797078234-2"><span class="crayon-t">double</span><span class="crayon-h"> </span><span class="crayon-v">circumference</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">2</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-v">radius</span><span class="crayon-h"> </span><span class="crayon-o">*</span><span class="crayon-h"> </span><span class="crayon-v">constants</span><span class="crayon-o">::</span><span class="crayon-v">pi</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0006 seconds] -->
<p></p>
<p>If you have both physics constants and per-application tuning values, you may opt to use two sets of files -- one for the physics values that will never change, and one for your per-program tuning values that are specific to your program.  That way you can reuse the physics values in any program.</p>
<p>Note: In section <a href="http://www.learncpp.com/cpp-tutorial/42-global-variables/">4.2 -- Global variables (and why they are evil)</a>, we show a more efficient way to do symbolic constants using global variables.</p>
<table border=0 cellpadding=3>
<tr><td>
	<a href="/cpp-tutorial/210-comprehensive-quiz/" style="text-decoration:none"><img src="http://www.learncpp.com/images/CppTutorial/next.png" align=middle> 2.10 -- Chapter 2 comprehensive quiz</a>
</td></tr>
<tr><td>
        <a href="http://www.learncpp.com/#Chapter0" style="text-decoration:none"><img src="http://www.learncpp.com/images/CppTutorial/up.png" align=middle> Index</a>
</td></tr>
<tr><td>
	<a href="/cpp-tutorial/28-literals/" style="text-decoration:none"><img src="http://www.learncpp.com/images/CppTutorial/prev.png" align=middle> 2.8 -- Literals</a>
</td></tr>
</table>

<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-email"><a rel="nofollow" data-shared="" class="share-email sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?share=email" target="_blank" title="Click to email this to a friend"><span>Email</span></a></li><li class="share-facebook"><a rel="nofollow" data-shared="sharing-facebook-1256" class="share-facebook sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?share=facebook" target="_blank" title="Share on Facebook"><span>Facebook</span></a></li><li class="share-twitter"><a rel="nofollow" data-shared="sharing-twitter-1256" class="share-twitter sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-google-plus-1"><a rel="nofollow" data-shared="sharing-google-1256" class="share-google-plus-1 sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?share=google-plus-1" target="_blank" title="Click to share on Google+"><span>Google</span></a></li><li class="share-pinterest"><a rel="nofollow" data-shared="sharing-pinterest-1256" class="share-pinterest sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?share=pinterest" target="_blank" title="Click to share on Pinterest"><span>Pinterest</span></a></li><li class="share-end"></li></ul></div></div></div><div class='code-block code-block-2' style='float:left;margin:8px 8px 8px 0px;'><div class="cf_monitor">
<div id="171844866">
    <script type="text/javascript">
    try {
        window._mNHandle.queue.push(function () {
		    window._mNDetails.loadTag("171844866", "336x280", "171844866");
		    });
		}
    catch (error) {}
	</script>
</div>
</div></div></div>						<div class="post-footer"><img src="http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/icons/folder-gray.gif" alt="" /> <a class="cpp-tutorial" href="http://www.learncpp.com/category/cpp-tutorial/" title="View all posts in C++ Tutorial">C++ Tutorial</a>   | <a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/print/" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="http://www.learncpp.com/blog/wp-content/plugins/wp-print/images/printer_famfamfam.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/print/" title="Print This Post" rel="nofollow">Print This Post</a></div>		</div><!-- / Post -->	
						
	
			

	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">19 comments to 2.9 &#8212; Symbolic constants and the const keyword</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="comment even thread-even depth-1 clearfix" id="comment-5896">
		<div id="div-comment-5896" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/65517b5a29bb537453c0fcc2ee00c155?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/65517b5a29bb537453c0fcc2ee00c155?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Skylark</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-5896">
		January 11, 2008 at 9:25 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=5896#respond' onclick='return addComment.moveForm( "comment-5896", "5896", "respond", "1256" )' aria-label='Reply to Skylark'> &middot; Reply</a></span>		 
		</div>
		<p>Could you not #define nYenPerDollar in a header file which is included in the main source code?</p>
<p>This would eliminate the inconvenience of having to search for its place of definition and would also prevent the confict you mentioned.</p>
<p>-- Just a thought. I&#8217;m completely new to C++ and object-oriented programming all together, just trying to get my head around how many different ways the same task can be completed in C++.</p>
<p>PS: I am loving this tutorial. I&#8217;m using it for m pre-University study. =D</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-5925">
		<div id="div-comment-5925" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-5925">
		January 12, 2008 at 11:06 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=5925#respond' onclick='return addComment.moveForm( "comment-5925", "5925", "respond", "1256" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>You could #define nYenPerDollar in a header file, but as I mentioned in the tutorial, #define values don&#8217;t show up in the debugger, which can make them hard to debug, especially if you code uses them heavily.  Since the concept of yen per dollar is a global concept (it&#8217;s going to remain constant throughout the program) the fact that all #define values are global isn&#8217;t much of a problem in this case.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-15716">
		<div id="div-comment-15716" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/d822412168cb1dfcee2e88bd61671382?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/d822412168cb1dfcee2e88bd61671382?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ronnie</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-15716">
		May 11, 2008 at 2:34 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=15716#respond' onclick='return addComment.moveForm( "comment-15716", "15716", "respond", "1256" )' aria-label='Reply to Ronnie'> &middot; Reply</a></span>		 
		</div>
		<p>Did constants apply through the whole file? Or what? :S  I mean const values using the </p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7524e3014467774048" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7524e3014467774048-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7524e3014467774048-1"><span class="crayon-o">&lt;</span><span class="crayon-v">b</span><span class="crayon-o">&gt;</span><span class="crayon-m">const</span><span class="crayon-o">&lt;</span><span class="crayon-o">/</span><span class="crayon-v">b</span><span class="crayon-o">&gt;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p> keyword.</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-17910">
		<div id="div-comment-17910" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-17910">
		May 30, 2008 at 4:08 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=17910#respond' onclick='return addComment.moveForm( "comment-17910", "17910", "respond", "1256" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Const variables have the same scoping rules as normal variables.  If you declare them globally, they apply though the whole file.  If you declare them locally, they will die when they go out of scope.  The only difference is that the value of a const variable can&#8217;t be changed after initialization.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-73923">
		<div id="div-comment-73923" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a201f2797cbb87cab7f343801ba0d150?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a201f2797cbb87cab7f343801ba0d150?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ravi</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-73923">
		December 9, 2009 at 2:58 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=73923#respond' onclick='return addComment.moveForm( "comment-73923", "73923", "respond", "1256" )' aria-label='Reply to Ravi'> &middot; Reply</a></span>		 
		</div>
		<p>Alex,<br />
How about const with respect to functions?</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251402">
		<div id="div-comment-251402" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-251402">
		February 6, 2015 at 4:16 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=251402#respond' onclick='return addComment.moveForm( "comment-251402", "251402", "respond", "1256" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>The const keyword is used with functions in a couple of regards:<br />
* Function parameters can be declared as const.  This is especially useful with reference variables, which is discussed in lesson <a href="http://www.learncpp.com/cpp-tutorial/73-passing-arguments-by-reference/" rel="nofollow">7.3 -- passing arguments by reference</a><br />
* Class member functions can be declared as const to ensure they can&#8217;t alter member data, which is discussed in lesson <a href="http://www.learncpp.com/cpp-tutorial/810-const-class-objects-and-member-functions/" rel="nofollow">8.10 -- Const class objects and member functions</a></p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-74984">
		<div id="div-comment-74984" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/3413f38647f2a4dc2a6bb2c8e3a4cad5?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/3413f38647f2a4dc2a6bb2c8e3a4cad5?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">great guy</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-74984">
		December 27, 2009 at 9:28 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=74984#respond' onclick='return addComment.moveForm( "comment-74984", "74984", "respond", "1256" )' aria-label='Reply to great guy'> &middot; Reply</a></span>		 
		</div>
		<p>what if you intalize a const varible, but don&#8217;t assign it a value right away?</p>
		</div>
<ul class="children">
		<li class="comment odd alt depth-2 clearfix" id="comment-81478">
		<div id="div-comment-81478" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/9278df175e7fe24f187cd3083a2d1a1a?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/9278df175e7fe24f187cd3083a2d1a1a?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Mac</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-81478">
		March 24, 2010 at 7:05 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=81478#respond' onclick='return addComment.moveForm( "comment-81478", "81478", "respond", "1256" )' aria-label='Reply to Mac'> &middot; Reply</a></span>		 
		</div>
		<p>it doesnt work and gives an error :<br />
error: uninitialized const &#8216;nYenPerDollar&#8217;</p>
<p>if you try to assign it later it says :<br />
error: assignment of read-only variable &#8216;nYenPerDollar&#8217;</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-96077">
		<div id="div-comment-96077" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/b5bfa38da0ada05d925a64c5a6e37633?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/b5bfa38da0ada05d925a64c5a6e37633?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">marjoonjan</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-96077">
		September 26, 2011 at 7:11 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=96077#respond' onclick='return addComment.moveForm( "comment-96077", "96077", "respond", "1256" )' aria-label='Reply to marjoonjan'> &middot; Reply</a></span>		 
		</div>
		<p>What happen if we use &#8216;;&#8217; after the #define? See below for example:</p>
<p>#include</p>
<p>#define MAX 100;</p>
<p>using namespace std;</p>
<p>main()<br />
{<br />
      cout &lt;&lt; MAX+2 &lt;&lt; &#039; &#039; &lt;&lt; 4+9;<br />
}</p>
<p>cout dose not print the result of the 4+9! why?</p>
		</div>
<ul class="children">
		<li class="comment odd alt depth-2 clearfix" id="comment-96112">
		<div id="div-comment-96112" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://127.0.0.1/' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-96112">
		October 8, 2011 at 4:24 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=96112#respond' onclick='return addComment.moveForm( "comment-96112", "96112", "respond", "1256" )' aria-label='Reply to zingmars'> &middot; Reply</a></span>		 
		</div>
		<p>It simply makes the semicolon part of the definition, meaning that using the &#8216;MAX&#8217; would automatically end the statement.<br />
Also, your code should give you a compiler error.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-96854">
		<div id="div-comment-96854" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/5f85b8dfcaeb228e8e98512bb77448ef?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/5f85b8dfcaeb228e8e98512bb77448ef?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Beginner</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-96854">
		January 18, 2012 at 4:09 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=96854#respond' onclick='return addComment.moveForm( "comment-96854", "96854", "respond", "1256" )' aria-label='Reply to Beginner'> &middot; Reply</a></span>		 
		</div>
		<p>Hi<br />
Please let me know how memory is allocated in #define and const?<br />
What is the difference?</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251403">
		<div id="div-comment-251403" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-251403">
		February 6, 2015 at 4:20 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=251403#respond' onclick='return addComment.moveForm( "comment-251403", "251403", "respond", "1256" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>No memory is allocated for #define values, because they are just text substitutions done by the preprocessor.</p>
<p>Memory may or may not be allocated by using a const variable, depending on how you use it.  Generally, this isn&#8217;t something you&#8217;ll need to worry about, as the amount of memory used by const variables is likely to be negligible.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-251624">
		<div id="div-comment-251624" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a0d498f0af261868fc2f00f76fbf7a1a?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a0d498f0af261868fc2f00f76fbf7a1a?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Andrei</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-251624">
		February 23, 2015 at 9:38 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=251624#respond' onclick='return addComment.moveForm( "comment-251624", "251624", "respond", "1256" )' aria-label='Reply to Andrei'> &middot; Reply</a></span>		 
		</div>
		<p>Just wanted to say, thanks for your ongoing work on this website, it&apos;s easily the best source for C++ learning and continues to develop.</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-252163">
		<div id="div-comment-252163" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/972f55e735d83fc4aa5a957845e47130?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/972f55e735d83fc4aa5a957845e47130?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Twisted Code</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-252163">
		April 14, 2015 at 7:07 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=252163#respond' onclick='return addComment.moveForm( "comment-252163", "252163", "respond", "1256" )' aria-label='Reply to Twisted Code'> &middot; Reply</a></span>		 
		</div>
		<p>&quot;Unlike macro symbolic constants, const variables can be debugged, and all you to control the scope of their existence. &quot;<br />
I think you were typing faster than you were thinking. Your I/O buffer got empty! You need to upgrade that lime of yours.</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor even depth-2 clearfix" id="comment-252168">
		<div id="div-comment-252168" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-252168">
		April 15, 2015 at 9:24 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=252168#respond' onclick='return addComment.moveForm( "comment-252168", "252168", "respond", "1256" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Yes, it appears I lost the &#8220;ow&#8221; from the end of &#8220;allow&#8221;.  Ow! ?</p>
<p>Thanks for the heads up.  I&#8217;ll have my lime checked immediately.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-252207">
		<div id="div-comment-252207" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/4fdcb8304a04dca6939092421ef3e0f7?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/4fdcb8304a04dca6939092421ef3e0f7?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Shubham</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-252207">
		April 21, 2015 at 4:08 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=252207#respond' onclick='return addComment.moveForm( "comment-252207", "252207", "respond", "1256" )' aria-label='Reply to Shubham'> &middot; Reply</a></span>		 
		</div>
		<p>While keeping symbolic constants inside header file, is it essential to keep them inside a separate namespace and then using scope operator to use them? What is we don&#8217;t use separate namespace?</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor even depth-2 clearfix" id="comment-252218">
		<div id="div-comment-252218" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-252218">
		April 22, 2015 at 1:55 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=252218#respond' onclick='return addComment.moveForm( "comment-252218", "252218", "respond", "1256" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>If you don&#8217;t keep them inside a separate namespace, those identifier names go into the global namespace, where they can collide with other names in the global namespace.  So while it&#8217;s not necessary, it&#8217;s a good idea to use a separate namespace.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-252483">
		<div id="div-comment-252483" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/65cfb2dd0e3fe46461320be175371c09?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/65cfb2dd0e3fe46461320be175371c09?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://youtube.com/user/Thearmyofiron' rel='external nofollow' class='url'>Flaze07</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-252483">
		May 16, 2015 at 12:04 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=252483#respond' onclick='return addComment.moveForm( "comment-252483", "252483", "respond", "1256" )' aria-label='Reply to Flaze07'> &middot; Reply</a></span>		 
		</div>
		<p>What&#8217;s wrong?</p>
<p>http://imgur.com/XVRQDVK</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor even depth-2 clearfix" id="comment-252506">
		<div id="div-comment-252506" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#comment-252506">
		May 18, 2015 at 4:05 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/?replytocom=252506#respond' onclick='return addComment.moveForm( "comment-252506", "252506", "respond", "1256" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>It looks like you&#8217;re trying to compile a C++ program with a Java compiler.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	
	</ul>
	<!-- / Comment List -->

	



						<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Comment <small><a rel="nofollow" id="cancel-comment-reply-link" href="/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://www.learncpp.com/blog/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																										<p><input class="text author" id="author" name="author" type="text" value="" size="30" tabindex="1" />&nbsp;&nbsp;<label for="author"><strong>Name </strong> (required)</label></p>
<p><input class="text email" id="email" name="email" type="text" value="" size="30"  tabindex="2" />&nbsp;&nbsp;<label for="email"><strong>Email</strong> (will not be published) (required)</label></p>
<p><input class="text url" id="url" name="url" type="text" value="" size="30"  tabindex="3" />&nbsp;&nbsp;<label for="url">Website</label></p>
<p class="aiowps-captcha"><label>Please enter an answer in digits:</label><div class="aiowps-captcha-equation"><strong>three &#43; thirteen = <input type="hidden" name="aiowps-captcha-string-info" id="aiowps-captcha-string-info" value="MTQzMjE4ODE5N3R5bTdtZjVxZ3o3ZGJwYWozMW04MTY=" /><input type="hidden" name="aiowps-captcha-temp-string" id="aiowps-captcha-temp-string" value="1432188197" /><input type="text" size="2" length="2" id="aiowps-captcha-answer" name="aiowps-captcha-answer" value="" /></strong></div></p>												<p><textarea name="comment" id="comment" rows="10" cols="10" tabindex="4"></textarea></p>						<div class="useCode">Put C++ code inside [code][/code] tags to use the syntax highlighter</div>
						<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='1256' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="476cdcde18" /></p>		<p class="antispam-group antispam-group-q" style="clear: both;">
			<label>Current ye@r <span class="required">*</span></label>
			<input type="hidden" name="antspm-a" class="antispam-control antispam-control-a" value="2015" />
			<input type="text" name="antspm-q" class="antispam-control antispam-control-q" value="3.5" />
		</p>
		<p class="antispam-group antispam-group-e" style="display: none;">
			<label>Leave this field empty</label>
			<input type="text" name="antspm-e-email-url-website" class="antispam-control antispam-control-e" value="" />
		</p>
<p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="81"/></p>					</form>
							</div><!-- #respond -->
			<div class='code-block code-block-7' style='margin:8px 0px;'><div class="cf_monitor">
<div id="Content Below Comment">
    <script type="text/javascript">
    var width = 0;
    if (document.getElementById('middle'))
        width = document.getElementById('middle').clientWidth;
    else
        width = document.innerWidth;

    if (width >= 768)
    {
        try {
            window._mNHandle.queue.push(function () {
		        window._mNDetails.loadTag("Content Below Comment", "728x90", "287758258");
		        });
		    }
        catch (error) {}
    }
	</script>
</div>
</div></div>		
    

</td>
<!-- / Main Column -->

<!-- Right Inner Sidebar -->

<!-- Right Sidebar -->
<td id="right">

	<div id="text-7" class="widget widget_text">			<div class="textwidget"><div class="cf_monitor">
<!-- Post - Right Sidebar - Wide Sky -->
<script type="text/javascript">
    google_ad_client = "ca-pub-0588844875925051";
    google_ad_slot = "0955932809";
    google_ad_width = 160;
    google_ad_height = 600;
</script>
<!-- Post - Right Sidebar - Wide Sky -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
		</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->


</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
		<!-- Full Width Footer -->
		<div id="footer" class="full-width">
    LearnCpp.com -- Teaching you how to program in C++ since May 25, 2007.&nbsp;&nbsp;Copyright &copy; 2015 <a href="http://www.learncpp.com/">Learn C++</a> - All Rights Reserved<br />Powered by <a href="http://wordpress.org/">WordPress</a> &amp; <a href="http://forum.bytesforall.com/">Atahualpa</a>    
    
    
	<script type="text/javascript">
		window.WPCOM_sharing_counts = {"http:\/\/www.learncpp.com\/cpp-tutorial\/2-9-symbolic-constants-and-the-const-keyword\/":1256};
		window.WPCOM_jetpack = true;
				window.WPCOM_site_ID = 3928254;
			</script>
	<div id="sharing_email" style="display: none;">
		<form action="/cpp-tutorial/2-9-symbolic-constants-and-the-const-keyword/" method="post">
			<label for="target_email">Send to Email Address</label>
			<input type="email" name="target_email" id="target_email" value="" />

			
				<label for="source_name">Your Name</label>
				<input type="text" name="source_name" id="source_name" value="" />

				<label for="source_email">Your Email Address</label>
				<input type="email" name="source_email" id="source_email" value="" />

						<input type="text" id="jetpack-source_f_name" name="source_f_name" class="input" value="" size="25" autocomplete="off" />
			<script> document.getElementById('jetpack-source_f_name').value = ''; </script>
			
			<img style="float: right; display: none" class="loading" src="http://www.learncpp.com/blog/wp-content/plugins/jetpack/modules/sharedaddy/images/loading.gif" alt="loading" width="16" height="16" />
			<input type="submit" value="Send Email" class="sharing_send" />
			<a rel="nofollow" href="#cancel" class="sharing_cancel">Cancel</a>

			<div class="errors errors-1" style="display: none;">
				Post was not sent - check your email addresses!			</div>

			<div class="errors errors-2" style="display: none;">
				Email check failed, please try again			</div>

			<div class="errors errors-3" style="display: none;">
				Sorry, your blog cannot share posts by email.			</div>
		</form>
	</div>
		<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-google-plus-1' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomgoogle-plus-1', 'menubar=1,resizable=1,width=480,height=550' );
				return false;
			});
		});
		</script>
							<script type="text/javascript">
			jQuery(document).on('ready', function(){
				jQuery('body').on('click', 'a.share-pinterest', function(e){
					e.preventDefault();

					// Load Pinterest Bookmarklet code
					var s = document.createElement("script");
					s.type = "text/javascript";
					s.src = window.location.protocol + "//assets.pinterest.com/js/pinmarklet.js?r=" + ( Math.random() * 99999999 );
					var x = document.getElementsByTagName("script")[0];
					x.parentNode.insertBefore(s, x);

					// Trigger Stats
					var s = document.createElement("script");
					s.type = "text/javascript";
					s.src = this + ( this.toString().indexOf( '?' ) ? '&' : '?' ) + 'js_only=1';
					var x = document.getElementsByTagName("script")[0];
					x.parentNode.insertBefore(s, x);
				});
			});
			</script>
		<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/akismet/_inc/form.js?ver=3.1.1'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-includes/js/comment-reply.min.js?ver=4.2.2'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/anti-spam/js/anti-spam-3.5.js'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201521'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var sharing_js_options = {"lang":"en","counts":"1"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/jetpack/modules/sharedaddy/sharing.js?ver=3.5.3'></script>
<script type='text/javascript' src='http://stats.wp.com/e-201521.js' async defer></script>
<script type='text/javascript'>
	_stq = window._stq || [];
	_stq.push([ 'view', {v:'ext',j:'1:3.5.3',blog:'3928254',post:'1256',tz:'-8',srv:'www.learncpp.com'} ]);
	_stq.push([ 'clickTrackerInit', '3928254', '1256' ]);
</script>
		</div>
		<!-- / Full Width Footer -->

</body>
</html>
<!-- Dynamic page generated in 0.788 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2015-05-20 22:03:17 -->

<!-- Compression = gzip -->
<!-- super cache -->

