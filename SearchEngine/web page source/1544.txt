<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>2.1 &#8212; Basic addressing and variable definition &laquo; Learn C++</title>
	<link rel="shortcut icon" href="http://www.learncpp.com/blog/wp-content/ata-images/learncpp.ico" />
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="http://www.learncpp.com/blog/xmlrpc.php" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; Feed" href="http://www.learncpp.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; Comments Feed" href="http://www.learncpp.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Learn C++ &raquo; 2.1 &#8212; Basic addressing and variable definition Comments Feed" href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"http:\/\/s.w.org\/images\/core\/emoji\/72x72\/","ext":".png","source":{"concatemoji":"http:\/\/www.learncpp.com\/blog\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.2.2"}};
			!function(a,b,c){function d(a){var c=b.createElement("canvas"),d=c.getContext&&c.getContext("2d");return d&&d.fillText?(d.textBaseline="top",d.font="600 32px Arial","flag"===a?(d.fillText(String.fromCharCode(55356,56812,55356,56807),0,0),c.toDataURL().length>3e3):(d.fillText(String.fromCharCode(55357,56835),0,0),0!==d.getImageData(16,16,1,1).data[0])):!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g;c.supports={simple:d("simple"),flag:d("flag")},c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.simple&&c.supports.flag||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel='stylesheet' id='crayon-css'  href='http://www.learncpp.com/blog/wp-content/plugins/crayon-syntax-highlighter/css/min/crayon.min.css?ver=2.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='crayon-theme-familiar-learncppcom-css'  href='http://www.learncpp.com/blog/wp-content/uploads/crayon-syntax-highlighter/themes/familiar-learncppcom/familiar-learncppcom.css?ver=2.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='crayon-font-monaco-css'  href='http://www.learncpp.com/blog/wp-content/plugins/crayon-syntax-highlighter/fonts/monaco.css?ver=2.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='genericons-css'  href='http://www.learncpp.com/blog/wp-content/plugins/jetpack/_inc/genericons/genericons/genericons.css?ver=3.1' type='text/css' media='all' />
<link rel='stylesheet' id='jetpack_css-css'  href='http://www.learncpp.com/blog/wp-content/plugins/jetpack/css/jetpack.css?ver=3.5.3' type='text/css' media='all' />
<!-- This site uses the Google Analytics by Yoast plugin v5.4.2 - Universal disabled - https://yoast.com/wordpress/plugins/google-analytics/ -->
<script type="text/javascript">

	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-2173612-1']);
	_gaq.push(['_gat._forceSSL']);
	_gaq.push(['_trackPageview']);

	(function () {
		var ga = document.createElement('script');
		ga.type = 'text/javascript';
		ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0];
		s.parentNode.insertBefore(ga, s);
	})();

</script>
<!-- / Google Analytics by Yoast -->
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-includes/js/jquery/jquery.js?ver=1.11.2'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var AjaxCheckClicks = {"ajaxurl":"http:\/\/www.learncpp.com\/blog\/wp-admin\/admin-ajax.php","nonce":"12738d6e92"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/adsense-click-fraud-monitoring/js/checkclicks.js?ver=4.2.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var AjaxUpdateClicks = {"ajaxurl":"http:\/\/www.learncpp.com\/blog\/wp-admin\/admin-ajax.php","nonce":"441c3b4826"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/adsense-click-fraud-monitoring/js/updateclicks.js?ver=4.2.2'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var CrayonSyntaxSettings = {"version":"2.7.1","is_admin":"0","ajaxurl":"http:\/\/www.learncpp.com\/blog\/wp-admin\/admin-ajax.php","prefix":"crayon-","setting":"crayon-setting","selected":"crayon-setting-selected","changed":"crayon-setting-changed","special":"crayon-setting-special","orig_value":"data-orig-value","debug":""};
var CrayonSyntaxStrings = {"copy":"Press %s to Copy, %s to Paste","minimize":"Click To Expand Code"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/crayon-syntax-highlighter/js/min/crayon.min.js?ver=2.7.1'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var clientcfmonitor = {"client_ip":"98.248.61.204","clickcount":"8","bannedperiod":"1","preurl":"http:\/\/www.learncpp.com\/blog\/wp-content\/plugins\/adsense-click-fraud-monitoring\/clickupdate.php","firstclickdate":[[""],[""]],"updatedVisitCount":"0","isblockedcount":"0","customclass":"cf_monitor","firstclick":"false","disablead":"false","currentURL":"\/cpp-tutorial\/21-basic-addressing-and-variable-declaration\/"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/adsense-click-fraud-monitoring/js/check_min.js?ver=4.2.2'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/themes/atahualpa/js/DD_roundies.js?ver=0.0.2a'></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.learncpp.com/blog/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.learncpp.com/blog/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='News &#8212; New site functionality' href='http://www.learncpp.com/site-news/new-site-functionality/' />
<link rel='next' title='Introduction to Roguelike gaming' href='http://www.learncpp.com/computer-game-programming/introduction-to-roguelike-gaming/' />
<link rel='canonical' href='http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/' />
<link rel='shortlink' href='http://www.learncpp.com/?p=37' />
<script type="text/javascript">
    window._mNHandle = window._mNHandle || {};
    window._mNHandle.queue = window._mNHandle.queue || [];
    medianet_versionId = "121199"; 
    (function() {
        var sct = document.createElement("script"),
        sctHl = document.getElementsByTagName("script")[0],
        isSSL = 'https:' == document.location.protocol;
        sct.type = "text/javascript";
        sct.src = (isSSL ? 'https:' : 'http:') + '//contextual.media.net/dmedianet.js?cid=8CUIE2148' + (isSSL ? '&https=1' : '')+'';
        sct.async = "async";
        sctHl.parentNode.insertBefore(sct, sctHl);
    })();
</script>
<!-- wpSolution Code -->
        <script type="text/javascript">
            function wpSolutionToggle(solution, link, showtext, hidetext) {
                if (solution.style.display != 'none') {
                    solution.style.display = 'none';
                    link.innerHTML = showtext;
                    link.className = 'solution_link_show';
                } else {
                    solution.style.display = 'block';
                    link.innerHTML = hidetext;
                    link.className = 'solution_link_hide';
                }
            }
          </script>
<style type='text/css'>img#wpstats{display:none}</style><style type="text/css">body{text-align:center;margin:0;padding:0;font-family:verdana,arial,sans-serif;font-size:13px;line-height:1.4;color:#000000;background:#bbb;padding-bottom:20px}a:link,a:visited,a:active{color:#365DA0;font-weight:bold;text-decoration:none;}a:hover{color:#365DA0;font-weight:bold;text-decoration:underline}ul,ol,dl,p,h1,h2,h3,h4,h5,h6{margin-top:10px;margin-bottom:10px;padding-top:0;padding-bottom:0;}ul ul,ul ol,ol ul,ol ol{margin-top:0;margin-bottom:0}code,pre{font-family:"Courier New",Courier,monospace;font-size:1em}pre{overflow:auto;word-wrap:normal;padding-bottom:1.5em;overflow-y:hidden;width:99%}abbr[title],acronym[title]{border-bottom:1px dotted}hr{display:block;height:2px;border:none;margin:0.5em auto;color:#cccccc;background-color:#cccccc}table{font-size:1em;}div.post,ul.commentlist li,ol.commentlist li{word-wrap:break-word;}pre,.wp_syntax{word-wrap:normal;}div#wrapper{text-align:center;margin-left:auto;margin-right:auto;display:block;width:100%}div#container{padding:20px;box-shadow:0 0 15px #333;-moz-box-shadow:0 0 15px #333;width:auto;margin-left:auto;margin-right:auto;text-align:left;display:block}table#layout{font-size:100%;width:100%;table-layout:fixed}.colone{width:200px}.colone-inner{width:10px}.coltwo{width:100% }.colthree-inner{width:10px}.colthree{width:200px}div#header.full-width{width:100%}div#header,td#header{width:auto;padding:0}table#logoarea,table#logoarea tr,table#logoarea td{margin:0;padding:0;background:none;border:0}table#logoarea{width:100%;border-spacing:0px}img.logo{display:block;margin:0 10px 0 0}td.logoarea-logo{width:1%}h1.blogtitle,h2.blogtitle{ display:block;margin:0;padding:0;letter-spacing:-1px;line-height:1.0em;font-size:200%;text-transform:uppercase;font-smooth:always}h1.blogtitle a:link,h1.blogtitle a:visited,h1.blogtitle a:active,h2.blogtitle a:link,h2.blogtitle a:visited,h2.blogtitle a:active{ text-decoration:none;color:#000000;font-weight:normal;font-smooth:always}h1.blogtitle a:hover,h2.blogtitle a:hover{ text-decoration:none;color:#AC161B;font-weight:normal}p.tagline{margin:0;padding:0;font-size:1.2em;font-weight:normal;color:#444}td.feed-icons{white-space:nowrap;}div.rss-box{height:1%;display:block;padding:10px 0 10px 10px;margin:0;width:280px}a.comments-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:22px;display:block;text-decoration:none;float:right;white-space:nowrap}a.comments-icon:link,a.comments-icon:active,a.comments-icon:visited{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/comment-gray.png) no-repeat scroll center left}a.comments-icon:hover{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/comment.png) no-repeat scroll center left}a.posts-icon{height:22px;line-height:22px;margin:0 5px 0 0;padding-left:20px;display:block;text-decoration:none;float:right;white-space:nowrap}a.posts-icon:link,a.posts-icon:active,a.posts-icon:visited{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/rss-gray.png) no-repeat scroll center left}a.posts-icon:hover{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/rss.png) no-repeat scroll center left}a.email-icon{height:22px;line-height:22px;margin:0 5px 0 5px;padding-left:24px;display:block;text-decoration:none;float:right;white-space:nowrap}a.email-icon:link,a.email-icon:active,a.email-icon:visited{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/email-gray.png) no-repeat scroll center left}a.email-icon:hover{background:transparent url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/email.png) no-repeat scroll center left}td.search-box{height:1%}div.searchbox{height:35px;border-bottom:0;width:200px;margin:0;padding:0}div.searchbox-form{margin:5px 10px 5px 10px}div.horbar1,div.horbar2{font-size:1px;clear:both;display:block;position:relative;padding:0;margin:0}div.horbar1{height:0px;background:#ffffff;border-top:dashed 1px #cccccc}div.horbar2{height:0px;background:#ffffff;border-bottom:dashed 1px #cccccc}div.header-image-container-pre{position:relative;margin:0;padding:0;height:150px;}div.header-image-container{position:relative;margin:0;padding:0;height:150px;}div.codeoverlay{position:absolute;top:0;left:0;width:100%;height:100%}div.clickable{position:absolute;top:0;left:0;z-index:3;margin:0;padding:0;width:100%;height:150px;}a.divclick:link,a.divclick:visited,a.divclick:active,a.divclick:hover{width:100%;height:100%;display:block;text-decoration:none}td#left{vertical-align:top;padding-right:10px}td#left-inner{vertical-align:top;padding-right:10px}td#right{vertical-align:top;padding-left:10px}td#right-inner{vertical-align:top;padding-left:10px}td#middle{vertical-align:top;width:100%;background:#fff;padding-left:15px!important;padding-right:15px!important;border:solid 4px #eee}div#footer.full-width{width:100%}div#footer,td#footer{width:auto;background-color:#f7f7f7;border:solid 4px #eee;padding:10px;text-align:center;color:#888;font-size:11px;margin-left:220px;margin-right:220px;margin-top:20px;width:auto!important}div#footer a:link,div#footer a:visited,div#footer a:active,td#footer a:link,td#footer a:visited,td#footer a:active{text-decoration:none;color:#777777;font-weight:normal}div#footer a:hover,td#footer a:hover{text-decoration:none;color:#777777;font-weight:normal}div.widget{display:block;width:auto;font-size:12px;margin:0 0 10px 0;padding:10px;border:solid 4px #eee;background:#fff}div.widget-title{display:block;width:auto}div.widget-title h3,td#left h3.tw-widgettitle,td#right h3.tw-widgettitle,td#left ul.tw-nav-list,td#right ul.tw-nav-list{padding:0;margin:0;font-size:0.9em;text-align:center;font-weight:normal;text-transform:uppercase;letter-spacing:1px;color:#333;border-bottom:solid 1px #eee;padding-bottom:10px;margin-bottom:10px}div.widget ul,div.textwidget{display:block;width:auto;background:#fff}div.widget select{width:98%;margin-top:5px;}div.widget ul{list-style-type:none;margin:0;padding:0;width:auto}div.widget ul li{display:block;margin:2px 0 2px 0px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget ul li:hover,div.widget ul li.sfhover{display:block;width:auto;border-left:solid 0px #000000;}div.widget ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li:hover,div.widget ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget ul li ul li ul li{margin:2px 0 2px 5px;padding:0 0 0 0px;border-left:solid 0px #CCCCCC;}div.widget ul li ul li ul li:hover,div.widget ul li ul li ul li.sfhover{border-left:solid 0px #000000;}div.widget a:link,div.widget a:visited,div.widget a:active,div.widget td a:link,div.widget td a:visited,div.widget td a:active,div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active{text-decoration:none;font-weight:normal;color:#365DA0;font-weight:normal;}div.widget ul li ul li a:link,div.widget ul li ul li a:visited,div.widget ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget ul li ul li ul li a:link,div.widget ul li ul li ul li a:visited,div.widget ul li ul li ul li a:active{color:#365DA0;font-weight:normal;}div.widget a:hover,div.widget ul li a:hover{color:#365DA0;}div.widget ul li ul li a:hover{color:#365DA0;}div.widget ul li ul li ul li a:hover{color:#365DA0;}div.widget ul li a:link,div.widget ul li a:visited,div.widget ul li a:active,div.widget ul li a:hover{display:inline}* html div.widget ul li a:link,* html div.widget ul li a:visited,* html div.widget ul li a:active,* html div.widget ul li a:hover{height:1%; } div.widget_nav_menu ul li,div.widget_pages ul li,div.widget_categories ul li{border-left:0 !important;padding:0 !important}div.widget_nav_menu ul li a:link,div.widget_nav_menu ul li a:visited,div.widget_nav_menu ul li a:active,div.widget_pages ul li a:link,div.widget_pages ul li a:visited,div.widget_pages ul li a:active,div.widget_categories ul li a:link,div.widget_categories ul li a:visited,div.widget_categories ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_nav_menu ul li a:hover,div.widget_pages ul li a:hover,div.widget_categories ul li a:hover{border-left:solid 0px #000000;}div.widget_nav_menu ul li ul li a:link,div.widget_nav_menu ul li ul li a:visited,div.widget_nav_menu ul li ul li a:active,div.widget_pages ul li ul li a:link,div.widget_pages ul li ul li a:visited,div.widget_pages ul li ul li a:active,div.widget_categories ul li ul li a:link,div.widget_categories ul li ul li a:visited,div.widget_categories ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_nav_menu ul li ul li a:hover,div.widget_pages ul li ul li a:hover,div.widget_categories ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_nav_menu ul li ul li ul li a:link,div.widget_nav_menu ul li ul li ul li a:visited,div.widget_nav_menu ul li ul li ul li a:active,div.widget_pages ul li ul li ul li a:link,div.widget_pages ul li ul li ul li a:visited,div.widget_pages ul li ul li ul li a:active,div.widget_categories ul li ul li ul li a:link,div.widget_categories ul li ul li ul li a:visited,div.widget_categories ul li ul li ul li a:active{padding:0 0 0 0px;border-left:solid 0px #CCCCCC}div.widget_nav_menu ul li ul li ul li a:hover,div.widget_pages ul li ul li ul li a:hover,div.widget_categories ul li ul li ul li a:hover{border-left:solid 0px #000000;}div.widget_nav_menu ul li a:link,div.widget_nav_menu ul li a:active,div.widget_nav_menu ul li a:visited,div.widget_nav_menu ul li a:hover,div.widget_pages ul li a:link,div.widget_pages ul li a:active,div.widget_pages ul li a:visited,div.widget_pages ul li a:hover{display:block !important}div.widget_categories ul li a:link,div.widget_categories ul li a:active,div.widget_categories ul li a:visited,div.widget_categories ul li a:hover{display:inline !important}table.subscribe{width:100%}table.subscribe td.email-text{padding:0 0 5px 0;vertical-align:top}table.subscribe td.email-field{padding:0;width:100%}table.subscribe td.email-button{padding:0 0 0 5px}table.subscribe td.post-text{padding:7px 0 0 0;vertical-align:top}table.subscribe td.comment-text{padding:7px 0 0 0;vertical-align:top}div.post,div.page{display:block;margin:0 0 30px 0;padding-top:20px}div.sticky{background:#eee url('<?php bloginfo('template_directory');?>/images/sticky.gif') 99% 5% no-repeat;border:dashed 1px #cccccc;padding:10px}div.post-kicker{margin:0 0 5px 0}div.post-kicker a:link,div.post-kicker a:visited,div.post-kicker a:active{color:#999;text-decoration:none;text-transform:uppercase;letter-spacing:1px}div.post-kicker a:hover{color:#cc0000}div.post-headline{}div.post-headline h1,div.post-headline h2{ margin:0; padding:0;padding:0;margin:0;font-size:1.7em}div.post-headline h2 a:link,div.post-headline h2 a:visited,div.post-headline h2 a:active,div.post-headline h1 a:link,div.post-headline h1 a:visited,div.post-headline h1 a:active{}div.post-headline h2 a:hover,div.post-headline h1 a:hover{}div.post-byline{margin:5px 0 10px 0;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-byline a:link,div.post-byline a:visited,div.post-byline a:active{}div.post-byline a:hover{}div.post-bodycopy{}div.post-bodycopy p{margin:1em 0;padding:0;display:block}div.post-pagination{}div.post-footer{clear:both;display:block;color:#999;text-transform:uppercase;letter-spacing:1px;font-size:11px}div.post-footer a:link,div.post-footer a:visited,div.post-footer a:active{color:#999;font-weight:normal;text-decoration:none}div.post-footer a:hover{color:#333;font-weight:normal;text-decoration:underline}div.post-kicker img,div.post-byline img,div.post-footer img{border:0;padding:0;margin:0 0 -1px 0;background:none}span.post-ratings{display:inline-block;width:auto;white-space:nowrap}div.navigation-top{border-top:solid 4px #eee;padding:8px 0}div.navigation-middle{margin:10px 0 20px 0;padding:8px 0;border-top:solid 4px #eee;border-bottom:solid 4px #eee}div.navigation-bottom{margin:20px 0 0 0;padding:10px 0 0 0;border-top:solid 4px #eee}div.navigation-comments-above{margin:0 0 10px 0;padding:5px 0 5px 0}div.navigation-comments-below{margin:0 0 10px 0;padding:5px 0 5px 0}div.older{float:left;width:48%;text-align:left;margin:0;padding:0}div.newer{float:right;width:48%;text-align:right;margin:0;padding:0;}div.older-home{float:left;width:44%;text-align:left;margin:0;padding:0}div.newer-home{float:right;width:44%;text-align:right;margin:0;padding:0;}div.home{float:left;width:8%;text-align:center;margin:0;padding:0}form,.feedburner-email-form{margin:0;padding:0;}fieldset{border:1px solid #cccccc;width:auto;padding:0.35em 0.625em 0.75em;display:block;}legend{color:#000000;background:#f4f4f4;border:1px solid #cccccc;padding:2px 6px;margin-bottom:15px;}form p{margin:5px 0 0 0;padding:0;}div.xhtml-tags p{margin:0}label{margin-right:0.5em;font-family:arial;cursor:pointer;}input.text,input.textbox,input.password,input.file,input.TextField,textarea{padding:3px;color:#000000;border-top:solid 1px #333333;border-left:solid 1px #333333;border-right:solid 1px #999999;border-bottom:solid 1px #cccccc;background:url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/inputbackgr.gif) top left no-repeat}textarea{width:96%;}input.inputblur{color:#777777;width:95%}input.inputfocus{color:#000000;width:95%}input.highlight,textarea.highlight{background:#e8eff7;border-color:#37699f}.button,.Button,input[type=submit]{padding:0 2px;height:24px;line-height:16px;background-color:#777777;color:#ffffff;border:solid 2px #555555;font-weight:bold}input.buttonhover{padding:0 2px;cursor:pointer;background-color:#6b9c6b;color:#ffffff;border:solid 2px #496d49}form#commentform input#submit{ padding:0 .25em; overflow:visible}form#commentform input#submit[class]{width:auto}form#commentform input#submit{padding:4px 10px 4px 10px;font-size:1.2em;line-height:1.5em;height:36px}table.searchform{width:100%}table.searchform td.searchfield{padding:0;width:100%}table.searchform td.searchbutton{padding:0 0 0 5px}table.searchform td.searchbutton input{padding:0 0 0 5px}blockquote{height:1%;display:block;clear:both;color:#555555;padding:1em 1em;background:#f4f4f4;border:solid 1px #e1e1e1}blockquote blockquote{height:1%;display:block;clear:both;color:#444444;padding:1em 1em;background:#e1e1e1;border:solid 1px #d3d3d3}div.post table{border-collapse:collapse;margin:10px 0}div.post table caption{width:auto;margin:0 auto;background:#eeeeee;border:#999999;padding:4px 8px;color:#666666}div.post table th{background:#888888;color:#ffffff;font-weight:bold;font-size:90%;padding:4px 8px;border:solid 1px #ffffff;text-align:left}div.post table td{padding:4px 8px;background-color:#ffffff;border-bottom:1px solid #dddddd;text-align:left}div.post table tfoot td{}div.post table tr.alt td{background:#f4f4f4}div.post table tr.over td{background:#e2e2e2}#calendar_wrap{padding:0;border:none}table#wp-calendar{width:100%;font-size:90%;border-collapse:collapse;background-color:#ffffff;margin:0 auto}table#wp-calendar caption{width:auto;background:#eeeeee;border:none;;padding:3px;margin:0 auto;font-size:1em}table#wp-calendar th{border:solid 1px #eeeeee;background-color:#999999;color:#ffffff;font-weight:bold;padding:2px;text-align:center}table#wp-calendar td{padding:0;line-height:18px;background-color:#ffffff;border:1px solid #dddddd;text-align:center}table#wp-calendar tfoot td{border:solid 1px #eeeeee;background-color:#eeeeee}table#wp-calendar td a{display:block;background-color:#eeeeee;width:100%;height:100%;padding:0}div#respond{margin:25px 0;padding:25px;background:#eee;-moz-border-radius:8px;-khtml-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}p.thesetags{margin:10px 0}h3.reply,h3#reply-title{margin:0;padding:0 0 10px 0}ol.commentlist{margin:15px 0 25px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ol.commentlist li{padding:15px 10px;display:block;height:1%;margin:0;background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ol.commentlist li.alt{display:block;height:1%;background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ol.commentlist li.authorcomment{display:block;height:1%;background-color:#D8D8FA}ol.commentlist span.authorname{font-weight:bold;font-size:110%}ol.commentlist span.commentdate{color:#666666;font-size:90%;margin-bottom:5px;display:block}ol.commentlist span.editcomment{display:block}ol.commentlist li p{margin:2px 0 5px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}textarea#comment{width:98%;margin:10px 0;display:block}ul.commentlist{margin:15px 0 15px 0;list-style-type:none;padding:0;display:block;border-top:dotted 1px #cccccc}ul.commentlist ul{margin:0;border:none;list-style-type:none;padding:0}ul.commentlist li{padding:0; margin:0;display:block;clear:both;height:1%;}ul.commentlist ul.children li{ margin-left:30px}ul.commentlist div.comment-container{padding:10px;margin:0}ul.children div.comment-container{background-color:transparent;border:dotted 1px #ccc;padding:10px;margin:0 10px 8px 0; border-radius:5px}ul.children div.bypostauthor{}ul.commentlist li.thread-even{background-color:#FFFFFF;border-bottom:dotted 1px #cccccc}ul.commentlist li.thread-odd{background-color:#EEEEEE;border-bottom:dotted 1px #cccccc}ul.commentlist div.bypostauthor{background-color:#D8D8FA}ul.children div.bypostauthor{border:dotted 1px #BFBCFB}ul.commentlist span.authorname{font-size:110%}div.comment-meta a:link,div.comment-meta a:visited,div.comment-meta a:active,div.comment-meta a:hover{font-weight:normal}div#cancel-comment-reply{margin:-5px 0 10px 0}div.comment-number{float:right;font-size:2em;line-height:2em;font-family:georgia,serif;font-weight:bold;color:#ddd;margin:-10px 0 0 0;position:relative;height:1%}div.comment-number a:link,div.comment-number a:visited,div.comment-number a:active{color:#ccc}.page-numbers{padding:2px 6px;border:solid 1px #000000;border-radius:6px}span.current{background:#ddd}a.prev,a.next{border:none}a.page-numbers:link,a.page-numbers:visited,a.page-numbers:active{text-decoration:none;color:#365DA0;border-color:#365DA0}a.page-numbers:hover{text-decoration:none;color:#365DA0;border-color:#365DA0}div.xhtml-tags{display:none}abbr em{border:none !important;border-top:dashed 1px #aaa !important;display:inline-block !important;background:url(http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/commentluv.gif) 0% 90% no-repeat;margin-top:8px;padding:5px 5px 2px 20px !important;font-style:normal}p.subscribe-to-comments{margin-bottom:10px}div#gsHeader{display:none;}div.g2_column{margin:0 !important;width:100% !important;font-size:1.2em}div#gsNavBar{border-top-width:0 !important}p.giDescription{font-size:1.2em;line-height:1 !important}p.giTitle{margin:0.3em 0 !important;font-size:1em;font-weight:normal;color:#666}div#wp-email img{border:0;padding:0}div#wp-email input,div#wp-email textarea{margin-top:5px;margin-bottom:2px}div#wp-email p{margin-bottom:10px}input#wp-email-submit{ padding:0; font-size:30px; height:50px; line-height:50px; overflow:visible;}img.WP-EmailIcon{ vertical-align:text-bottom !important}.tw-accordion .tw-widgettitle,.tw-accordion .tw-widgettitle:hover,.tw-accordion .tw-hovered,.tw-accordion .selected,.tw-accordion .selected:hover{ background:transparent !important; background-image:none !important}.tw-accordion .tw-widgettitle span{ padding-left:0 !important}.tw-accordion h3.tw-widgettitle{border-bottom:solid 1px #ccc}.tw-accordion h3.selected{border-bottom:none}td#left .without_title,td#right .without_title{ margin-top:0;margin-bottom:0}ul.tw-nav-list{border-bottom:solid 1px #999;display:block;margin-bottom:5px !important}td#left ul.tw-nav-list li,td#right ul.tw-nav-list li{padding:0 0 1px 0;margin:0 0 -1px 5px; border:solid 1px #ccc;border-bottom:none;border-radius:5px;border-bottom-right-radius:0;border-bottom-left-radius:0;background:#eee}td#left ul.tw-nav-list li.ui-tabs-selected,td#right ul.tw-nav-list li.ui-tabs-selected{ background:none;border:solid 1px #999;border-bottom:solid 1px #fff !important}ul.tw-nav-list li a:link,ul.tw-nav-list li a:visited,ul.tw-nav-list li a:active,ul.tw-nav-list li a:hover{padding:0 8px !important;background:none;border-left:none !important;outline:none}td#left ul.tw-nav-list li.ui-tabs-selected a,td#left li.ui-tabs-selected a:hover,td#right ul.tw-nav-list li.ui-tabs-selected a,td#right li.ui-tabs-selected a:hover{ color:#000000; text-decoration:none;font-weight:bold;background:none !important;outline:none}td#left .ui-tabs-panel,td#right .ui-tabs-panel{ margin:0; padding:0}img{border:0}#dbem-location-map img{ background:none !important}.post img{padding:5px;border:solid 1px #dddddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}.post img.size-full{max-width:96%;width:auto;margin:5px 0 5px 0}div.post img[class~=size-full]{height:auto;}.post img.alignleft{float:left;margin:10px 10px 5px 0;}.post img.alignright{float:right;margin:10px 0 5px 10px;}.post img.aligncenter{display:block;margin:10px auto}.aligncenter,div.aligncenter{ display:block; margin-left:auto; margin-right:auto}.alignleft,div.alignleft{float:left;margin:10px 10px 5px 0}.alignright,div.alignright{ float:right; margin:10px 0 5px 10px}div.archives-page img{border:0;padding:0;background:none;margin-bottom:0;vertical-align:-10%}.wp-caption{max-width:96%;width:auto 100%;height:auto;display:block;border:1px solid #dddddd;text-align:center;background-color:#f3f3f3;padding-top:4px;margin:10px 0 0 0;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}* html .wp-caption{height:100%;}.wp-caption img{ margin:0 !important; padding:0 !important; border:0 none !important}.wp-caption p.wp-caption-text{font-size:0.8em;line-height:13px;padding:2px 4px 5px;margin:0;color:#666666}img.wp-post-image{float:left;border:0;padding:0;background:none;margin:0 10px 5px 0}img.wp-smiley{ float:none;border:none !important;margin:0 1px -1px 1px;padding:0 !important;background:none !important}img.avatar{float:left;display:block;margin:0 8px 1px 0;padding:3px;border:solid 1px #ddd;background-color:#f3f3f3;-moz-border-radius:3px;-khtml-border-radius:3px;-webkit-border-radius:3px;border-radius:3px}#comment_quicktags{text-align:left;padding:10px 0 2px 0;display:block}#comment_quicktags input.ed_button{background:#f4f4f4;border:2px solid #cccccc;color:#444444;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px}#comment_quicktags input.ed_button_hover{background:#dddddd;border:2px solid #666666;color:#000000;margin:2px 4px 2px 0;width:auto;padding:0 4px;height:24px;line-height:16px;cursor:pointer}#comment_quicktags #ed_strong{font-weight:bold}#comment_quicktags #ed_em{font-style:italic}@media print{body{background:white;color:black;margin:0;font-size:10pt !important;font-family:arial,sans-serif;}div.post-footer{line-height:normal !important;color:#555 !important;font-size:9pt !important}a:link,a:visited,a:active,a:hover{text-decoration:underline !important;color:#000}h2{color:#000;font-size:14pt !important;font-weight:normal !important}h3{color:#000;font-size:12pt !important;}#header,#footer,.colone,.colone-inner,.colthree-inner,.colthree,.navigation,.navigation-top,.navigation-middle,.navigation-bottom,.wp-pagenavi-navigation,#comment,#respond,.remove-for-print{display:none}td#left,td#right,td#left-inner,td#right-inner{width:0;display:none}td#middle{width:100% !important;display:block}*:lang(en) td#left{ display:none}*:lang(en) td#right{ display:none}*:lang(en) td#left-inner{ display:none}*:lang(en) td#right-inner{ display:none}td#left:empty{ display:none}td#right:empty{ display:none}td#left-inner:empty{ display:none}td#right-inner:empty{ display:none}}ul.rMenu,ul.rMenu ul,ul.rMenu li,ul.rMenu a{display:block;margin:0;padding:0}ul.rMenu,ul.rMenu li,ul.rMenu ul{list-style:none}ul.rMenu ul{display:none}ul.rMenu li{position:relative;z-index:1}ul.rMenu li:hover{z-index:999}ul.rMenu li:hover > ul{display:block;position:absolute}ul.rMenu li:hover{background-position:0 0} ul.rMenu-hor li{float:left;width:auto}ul.rMenu-hRight li{float:right}ul.sub-menu li,ul.rMenu-ver li{float:none}.clearfix:after{ content:".";display:block;height:0;clear:both;visibility:hidden}.clearfix{min-width:0;display:inline-block;display:block}* html .clearfix{height:1%;}.clearboth{clear:both;height:1%;font-size:1%;line-height:1%;display:block;padding:0;margin:0}.page-id-8 .post-headline{display:none;} div.useCode{background:linear-gradient(#FFFF66,#CCCC00);border-radius:8px;padding-left:10px;padding-right:10px;padding-top:2px;padding-bottom:2px;font-size:10pt;text-align:left;display:inline-block;font-weight:550;}td#header{padding-bottom:15px;}td#middle{padding:0}div.searchbox-form{margin:5px 0 15px 5px}div#menu1 ul.rMenu{background:transparent;border:none}div#imagecontainer{border-top:solid 0px #333;border-bottom:solid 5px #333;}div.widget ul li{padding:1px 5px 1px 12px !important;background:url('<?php bloginfo('template_directory');?>/images/bullets/round-gray.gif') no-repeat 0 7px}ul.rMenu-hor ul,ul.rMenu-hRight ul{margin-top:0px;}ul.rMenu-hor li{margin-bottom:0px;margin-top:0px;margin-left:0px;}ul.rMenu-hor{padding-left:0px;}ul.rMenu-ver li{margin-top:0xp;}div#menu1 ul.rMenu li a,div#menu2 ul.rMenu li a{padding:6px 10px}div#menu1 ul.rMenu li{margin-right:5px}div#menu1 ul.rMenu li li{margin-right:0}div#menu1 ul.rMenu li,div#menu1 ul.rMenu li a{-webkit-border-top-left-radius:5px;-webkit-border-top-right-radius:5px;-moz-border-radius-topleft:5px;-moz-border-radius-topright:5px;border-top-left-radius:5px;border-top-right-radius:5px}div#menu1 ul.rMenu li li,div#menu1 ul.rMenu li li a{-webkit-border-top-left-radius:0;-webkit-border-top-right-radius:0;-moz-border-radius-topleft:0;-moz-border-radius-topright:0;border-top-left-radius:0;border-top-right-radius:0}div#menu2{ border:dashed 1px #ffffff}ul{list-style-position:inside}</style>
<script type="text/javascript">
//<![CDATA[



/* JQUERY */
jQuery(document).ready(function(){ 
    
   
  

	/* jQuery('ul#rmenu').superfish(); */
	/* jQuery('ul#rmenu').superfish().find('ul').bgIframe({opacity:false}); */
 
	/* For IE6 */
	if (jQuery.browser.msie && /MSIE 6\.0/i.test(window.navigator.userAgent) && !/MSIE 7\.0/i.test(window.navigator.userAgent) && !/MSIE 8\.0/i.test(window.navigator.userAgent)) {

		/* Max-width for images in IE6 */		
		var centerwidth = jQuery("td#middle").width(); 
		
		/* Images without caption */
		jQuery(".post img").each(function() { 
			var maxwidth = centerwidth - 10 + 'px';
			var imgwidth = jQuery(this).width(); 
			var imgheight = jQuery(this).height(); 
			var newimgheight = (centerwidth / imgwidth * imgheight) + 'px';	
			if (imgwidth > centerwidth) { 
				jQuery(this).css({width: maxwidth}); 
				jQuery(this).css({height: newimgheight}); 
			}
		});
		
		/* Images with caption */
		jQuery("div.wp-caption").each(function() { 
			var captionwidth = jQuery(this).width(); 
			var maxcaptionwidth = centerwidth + 'px';
			var captionheight = jQuery(this).height();
			var captionimgwidth =  jQuery("div.wp-caption img").width();
			var captionimgheight =  jQuery("div.wp-caption img").height();
			if (captionwidth > centerwidth) { 
				jQuery(this).css({width: maxcaptionwidth}); 
				var newcaptionheight = (centerwidth / captionwidth * captionheight) + 'px';
				var newcaptionimgheight = (centerwidth / captionimgwidth * captionimgheight) + 'px';
				jQuery(this).css({height: newcaptionheight}); 
				jQuery("div.wp-caption img").css({height: newcaptionimgheight}); 
				}
		});
		
		/* sfhover for LI:HOVER support in IE6: */
		jQuery("ul li").
			hover( function() {
					jQuery(this).addClass("sfhover")
				}, 
				function() {
					jQuery(this).removeClass("sfhover")
				} 
			); 

	/* End IE6 */
	}
	
	
	
	/* Since 3.7.8: Auto resize videos (embed and iframe elements) 
	TODO: Parse parent's dimensions only once per layout column, not per video
	*/
	function bfa_resize_video() {
		jQuery('embed, iframe').each( function() {
			var video = jQuery(this),
			videoWidth = video.attr('width'); // use the attr here, not width() or css()
			videoParent = video.parent(),
			videoParentWidth = parseFloat( videoParent.css( 'width' ) ),
			videoParentBorder = parseFloat( videoParent.css( 'border-left-width' ) ) 
										+  parseFloat( videoParent.css( 'border-right-width' ) ),
			videoParentPadding = parseFloat( videoParent.css( 'padding-left' ) ) 
										+  parseFloat( videoParent.css( 'padding-right' ) ),
			maxWidth = videoParentWidth - videoParentBorder - videoParentPadding;

			if( videoWidth > maxWidth ) {
				var videoHeight = video.attr('height'),
				videoMaxHeight = ( maxWidth / videoWidth * videoHeight );
				video.attr({ width: maxWidth, height: videoMaxHeight });
			} 

		});	
	}
	bfa_resize_video();
	jQuery(window).resize( bfa_resize_video );

		
	jQuery(".post table tr").
		mouseover(function() {
			jQuery(this).addClass("over");
		}).
		mouseout(function() {
			jQuery(this).removeClass("over");
		});

	
	jQuery(".post table tr:even").
		addClass("alt");

	
	jQuery("input.text, input.TextField, input.file, input.password, textarea").
		focus(function () {  
			jQuery(this).addClass("highlight"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("highlight"); 
		})
	
	jQuery("input.inputblur").
		focus(function () {  
			jQuery(this).addClass("inputfocus"); 
		}).
		blur(function () { 
			jQuery(this).removeClass("inputfocus"); 
		})

		

	
	jQuery("input.button, input.Button, input#submit").
		mouseover(function() {
			jQuery(this).addClass("buttonhover");
		}).
		mouseout(function() {
			jQuery(this).removeClass("buttonhover");
		});

	/* toggle "you can use these xhtml tags" */
	jQuery("a.xhtmltags").
		click(function(){ 
			jQuery("div.xhtml-tags").slideToggle(300); 
		});

	/* For the Tabbed Widgets plugin: */
	jQuery("ul.tw-nav-list").
		addClass("clearfix");

		
	
});

//]]>
</script>

<!--[if IE 6]>
<script type="text/javascript">DD_roundies.addRule("a.posts-icon, a.comments-icon, a.email-icon, img.logo");</script>
<![endif]-->

<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="2.1 -- Basic addressing and variable definition" />
<meta property="og:url" content="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/" />
<meta property="og:description" content="Addressing memory This lesson builds directly on the material in the section &quot;1.3 -- A first look at variables&quot;. In the previous lesson on variables, we talked about the fact that variables are nam..." />
<meta property="article:published_time" content="2007-06-05T05:41:12+00:00" />
<meta property="article:modified_time" content="2015-02-12T21:12:10+00:00" />
<meta property="article:author" content="http://www.learncpp.com/author/alex/" />
<meta property="og:site_name" content="Learn C++" />
<meta property="og:image" content="http://www.learncpp.com/images/CppTutorial/Section2/MemoryAddresses.png" />
<meta property="og:locale" content="en_US" />
<meta name="twitter:image" content="http://www.learncpp.com/images/CppTutorial/Section2/MemoryAddresses.png?w=240" />
<meta name="twitter:card" content="summary" />
</head>
<body class="single single-post postid-37 single-format-standard category-cpp-tutorial">

		<!-- Full Width Header -->
		<div id="header" class="full-width">
		<div id="imagecontainer-pre" class="header-image-container-pre">    <div id="imagecontainer" class="header-image-container" style="background: url('http://www.learncpp.com/blog/wp-content/ata-images/header/LearnCppHeader3_800.jpg') top center no-repeat;"></div><div class="clickable"><a class="divclick" title="Learn C++" href ="http://www.learncpp.com/">&nbsp;</a></div><div class="codeoverlay"></div></div>		</div>
		<!-- / Full Width Header -->
<div id="wrapper">
<div id="container">
<table id="layout" border="0" cellspacing="0" cellpadding="0">
<colgroup>
<col class="colone" /><col class="coltwo" />
<col class="colthree" /></colgroup> 

	<!-- Main Body -->	
	<tr id="bodyrow">

				<!-- Left Sidebar -->
		<td id="left">

			<div id="text-2" class="widget widget_text">			<div class="textwidget"><ul>
<li><a href="/"><big><big>Main Page</big></big></a>
<li><a href="
/featured-articles/">Featured Articles</a>
</ul>
<hr>
<ul>
<li><a href="/site-news/find-something-wrong/">Report an Issue</a>
<li><a href="/about/">About / Contact</a>
<li><a href="/about/#Support">Support LearnCpp</a>
</ul>
</div>
		</div><div id="text-3" class="widget widget_text"><div class="widget-title"><h3>Search</h3></div>			<div class="textwidget"><!-- SiteSearch Google -->
<form method="get" action="http://www.google.com/custom" target="google_window">
<table border="0" bgcolor="#ffffff">
<tr><td nowrap="nowrap" valign="top" align="center">

<!--<br/>-->
<input type="hidden" name="domains" value="LearnCpp.com"></input>
<label for="sbi" style="display: none">Enter your search terms</label>
<input type="text" name="q" size="16" maxlength="255" value="" id="sbi"></input>
</td></tr>
<tr>
<td nowrap="nowrap">
<table>
<tr>
<td>
<input type="hidden" name="sitesearch" value="www.LearnCpp.com" checked id="ss1"></input>
<label for="ss1" title="Search LearnCpp.com"></label></td>
</tr>
</table>
<label for="sbb" style="display: none">Submit search form</label>
<input type="submit" name="sa" value="Google Search" id="sbb"></input>
<input type="hidden" name="client" value="pub-0588844875925051"></input>
<input type="hidden" name="forid" value="1"></input>
<input type="hidden" name="channel" value="7774154974"></input>
<input type="hidden" name="ie" value="ISO-8859-1"></input>
<input type="hidden" name="oe" value="ISO-8859-1"></input>
<input type="hidden" name="safe" value="active"></input>
<input type="hidden" name="flav" value="0000"></input>
<input type="hidden" name="sig" value="q6fLrjobHHgL00cW"></input>
</td></tr></table>
</form>
<!-- SiteSearch Google --></div>
		</div>    
<!-- 
	Plugin: Custom Meta Widget	Plugin URL: http://shinraholdings.com/plugins/custom-meta-widget/-->


	<div id="custommetawidget-2" class="widget customMetaWidget">	<div class="widget-title"><h3>Meta</h3></div>	<ul>
	
	
    <li><a href="http://www.learncpp.com/blog/wp-login.php">Log in</a></li>	
	</ul>
    
	</div><div id="text-9" class="widget widget_text">			<div class="textwidget"><div class="cf_monitor">
<script type="text/javascript">
    google_ad_client = "ca-pub-0588844875925051";
    google_ad_slot = "2780990843";
    google_ad_width = 160;
    google_ad_height = 600;
</script>
<!-- Post - Left Sidebar - Wide Skyscraper -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
		</div>
		</td>
		<!-- / Left Sidebar -->
		
				

		<!-- Main Column -->
		<td id="middle">

    
		
	<div class='code-block code-block-1' style='float:left;margin:8px 8px 8px 0px;'><div class="cf_monitor">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-0588844875925051";
/* Content Page Top Large */
google_ad_slot = "7945645163";
google_ad_width = 336;
google_ad_height = 280;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>	
								<div class="post-37 post type-post status-publish format-standard hentry category-cpp-tutorial odd" id="post-37">
						<div class="post-headline">		<h1>2.1 &#8212; Basic addressing and variable definition</h1>
		</div>		<div class="post-byline">By Alex, on June 4th, 2007</div>		<div class="post-bodycopy clearfix"><p><strong>Addressing memory</strong></p>
<p>This lesson builds directly on the material in the section &#8220;<a href="http://www.learncpp.com/cpp-tutorial/13-a-first-look-at-variables/">1.3 -- A first look at variables</a>&#8220;.</p>
<p>In the previous lesson on variables, we talked about the fact that variables are names for a piece of memory that can be used to store information.  To recap briefly, computers have random access memory (RAM) that is available for programs to use.  When a variable is defined, a piece of that memory is set aside for that variable.</p>
<p>The smallest unit of memory is a binary digit (bit), which can hold a value of 0 or 1.  You can think of a bit as being like a traditional light switch -- either the light is off (0), or it is on (1).  There is no in-between.  If you were to look at a random segment of memory, all you would see is &#8230;011010100101010&#8230; or some combination thereof.  Memory is organized into sequential units called <strong>addresses</strong>.  Similar to how a street address can be used to find a given house on a street, the memory address allows us to find and access the contents of memory at a particular location.  Perhaps surprisingly, in modern computers, each bit does not get its own address.  The smallest addressable unit of memory is a group of 8 bits known as a <strong>byte</strong>.  </p>
<p>The following picture shows some sequential memory addresses, along with the corresponding byte of data:</p>
<p><img src="http://www.learncpp.com/images/CppTutorial/Section2/MemoryAddresses.png" alt="Memory Addressing" /></p>
<p>Because all data on a computer is just a sequence of bits, we use a <strong>data type</strong> to tell us how to interpret the contents of memory in some meaningful way.  You have already seen one example of a data type: the integer.  When we declare a variable as an integer, we are telling the computer &#8220;the piece of memory that this variable addresses is going to be interpreted as a whole number&#8221;.</p>
<p>When you assign a value to a data type, the computer takes care of the details of encoding your value into the appropriate sequence of bits for that data type.  When you ask for your value back, the program &#8220;reconstitutes&#8221; your number from the sequence of bits in memory. </p>
<p>There are many other data types in C++ besides the integer, most of which we will cover shortly.  As shorthand, we typically refer to a variable&#8217;s &#8220;data type&#8221; as its &#8220;type&#8221;.</p>
<p><strong>Fundamental data types</strong></p>
<p>C++ comes with built-in support for certain data types.  These are called <strong>fundamental data types</strong> (in the C++ specification), but are often informally called <strong>basic types</strong>, <strong>primitive types</strong>, or <strong>built-in types</strong>.</p>
<p>Here is a list of the fundamental data types, some of which you have already seen:</p>
<table border=1 cellspacing=0 cellpadding=3>
<tr>
<th>Category</th>
<th>Types</th>
<th>Meaning</th>
<th>Example</th>
<th>Notes</th>
</tr>
<tr>
<td>boolean</td>
<td>bool</td>
<td>true or false</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>character</td>
<td>char, wchar_t, char16_t, char32_t</td>
<td>a single ASCII character</td>
<td>&#8216;c&#8217;</td>
<td>char16_t, char32_t are C++11 only</td>
</tr>
<tr>
<td>floating point</td>
<td>float, double, long double</td>
<td>a number with a decimal</td>
<td>3.14159</td>
<td></td>
</tr>
<tr>
<td>integer</td>
<td>short, int, long, long long</td>
<td>a whole number</td>
<td>64</td>
<td>long long is C99/C++11 only</td>
</tr>
<tr>
<td>void</td>
<td>no type</td>
<td>void</td>
<td>n/a</td>
<td></td>
</tr>
</table>
<p>This chapter is dedicated to exploring these basic data types in detail.</p>
<p><strong>Defining a variable</strong></p>
<p>In the &#8220;basic C++&#8221; section, you already learned how to define an integer variable:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894ca3804198328" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894ca3804198328-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894ca3804198328-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nVarName</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// int is the type, nVarName is the name of the variable</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>To define variables of other data types, the idea is exactly the same:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cb6649683094" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cb6649683094-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cb6649683094-1"><span class="crayon-e">type </span><span class="crayon-v">varName</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// type is the type (eg. int), varName is the name of the variable</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p></p>
<p>In the following example, we define 5 different variables of 5 different types.</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cbd863820812" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cbd863820812-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894cbd863820812-2">2</div><div class="crayon-num" data-line="crayon-555d743894cbd863820812-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894cbd863820812-4">4</div><div class="crayon-num" data-line="crayon-555d743894cbd863820812-5">5</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cbd863820812-1"><span class="crayon-t">bool</span><span class="crayon-h"> </span><span class="crayon-v">bValue</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894cbd863820812-2"><span class="crayon-t">char</span><span class="crayon-h"> </span><span class="crayon-v">chValue</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743894cbd863820812-3"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894cbd863820812-4"><span class="crayon-t">float</span><span class="crayon-h"> </span><span class="crayon-v">fValue</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743894cbd863820812-5"><span class="crayon-t">double</span><span class="crayon-h"> </span><span class="crayon-v">dValue</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0007 seconds] -->
<p></p>
<p><strong>Variable initialization and assignment</strong></p>
<p>When a variable is defined, you can immediately give that variable a value.  This is called <strong>initialization</strong>.</p>
<p>When we assign values to a defined variable using the assignment operator (equals sign), it&#8217;s called an <strong>explicit initialization</strong>:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cc3765074587" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cc3765074587-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cc3765074587-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// explicit initialization</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>When a variable is defined, you can also assign a value using an <strong>implicit initialization</strong>:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cc9895582411" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cc9895582411-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cc9895582411-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">nValue</span><span class="crayon-sy">(</span><span class="crayon-cn">5</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// implicit initialization</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>Even though implicit initialization looks a lot like a function call, the compiler keeps track of which names are variables and which are functions so that they can be resolved properly.</p>
<p>When a variable is given a value after it has been defined, it is called an <strong>assignment</strong>.</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cd0121880184" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cd0121880184-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894cd0121880184-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cd0121880184-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894cd0121880184-2"><span class="crayon-v">nValue</span><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// explicit assignment</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0005 seconds] -->
<p></p>
<p>C++ does not provide any built-in way to do an implicit assignment.</p>
<p><strong>Defining multiple variables</strong></p>
<p>It is possible to define multiple variables <em>of the same type</em> in a single statement by separating the names with a comma.  The following 2 snippets of code are effectively the same:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cd6830684509" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cd6830684509-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cd6830684509-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">nValue2</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p></p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cdc990163458" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cdc990163458-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894cdc990163458-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cdc990163458-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894cdc990163458-2"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue2</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>You can also assign them values on the definition line:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894ce2646141777" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894ce2646141777-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894ce2646141777-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894ce2646141777-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">nValue2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">6</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894ce2646141777-2"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">nValue3</span><span class="crayon-sy">(</span><span class="crayon-cn">7</span><span class="crayon-sy">)</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">nValue4</span><span class="crayon-sy">(</span><span class="crayon-cn">8</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0008 seconds] -->
<p></p>
<p>There are three mistakes that new programmers tend to make when defining multiple variables in the same statement.</p>
<p>The first mistake is giving each variable a type when defining variables in sequence.  This is not a bad mistake because the compiler will complain and ask you to fix it.</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894ce8816123002" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894ce8816123002-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894ce8816123002-2">2</div><div class="crayon-num" data-line="crayon-555d743894ce8816123002-3">3</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894ce8816123002-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue2</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// wrong (compiler error)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894ce8816123002-2">&nbsp;</div><div class="crayon-line" id="crayon-555d743894ce8816123002-3"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">nValue2</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// correct</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0007 seconds] -->
<p></p>
<p>The second error is to try to define variables of different types on the same line, which is not allowed.  Variables of different types must be defined in separate statements.  This is also not a bad mistake because the compiler will complain and ask you to fix it.</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cef380778408" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cef380778408-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894cef380778408-2">2</div><div class="crayon-num" data-line="crayon-555d743894cef380778408-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894cef380778408-4">4</div><div class="crayon-num" data-line="crayon-555d743894cef380778408-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894cef380778408-6">6</div><div class="crayon-num" data-line="crayon-555d743894cef380778408-7">7</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cef380778408-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-t">double</span><span class="crayon-h"> </span><span class="crayon-v">dValue2</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// wrong (compiler error)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894cef380778408-2">&nbsp;</div><div class="crayon-line" id="crayon-555d743894cef380778408-3"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-t">double</span><span class="crayon-h"> </span><span class="crayon-v">dValue2</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// correct (but not recommended)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894cef380778408-4">&nbsp;</div><div class="crayon-line" id="crayon-555d743894cef380778408-5"><span class="crayon-c">// correct and recommended (easier to read)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894cef380778408-6"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743894cef380778408-7"><span class="crayon-t">double</span><span class="crayon-h"> </span><span class="crayon-v">dValue2</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0010 seconds] -->
<p></p>
<p>The last mistake is the dangerous case.  In this case, the programmer mistakenly tries to initialize both variables by using one assignment statement:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cf5507001891" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cf5507001891-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894cf5507001891-2">2</div><div class="crayon-num" data-line="crayon-555d743894cf5507001891-3">3</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cf5507001891-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">nValue2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// wrong (nValue1 is uninitialized!)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894cf5507001891-2">&nbsp;</div><div class="crayon-line" id="crayon-555d743894cf5507001891-3"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">nValue2</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// correct</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0009 seconds] -->
<p></p>
<p>In the top statement, the nValue1 variable will be left uninitialized, and the compiler may or may not complain.  If it doesn&#8217;t, this is a great way to have your program intermittently crash and produce sporadic results.</p>
<p>The best way to remember that this is wrong is consider the case of implicit initialization:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894cfb523949243" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894cfb523949243-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894cfb523949243-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">nValue1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-e">nValue2</span><span class="crayon-sy">(</span><span class="crayon-cn">5</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>This makes it seem a little more clear that the value 5 is only being assigned to nValue2.  This is one good reason to favor implicit initialization over explicit initialization.  Implicit initialization can also be more performant in some cases.</p>
<p><em>Rule: Use implicit initialization instead of explicit initialization</em></p>
<p><strong>Where to define variables</strong></p>
<p>Older C compilers forced users to define all of the variables in a function at the top of the function:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894d02674867459" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894d02674867459-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d02674867459-2">2</div><div class="crayon-num" data-line="crayon-555d743894d02674867459-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d02674867459-4">4</div><div class="crayon-num" data-line="crayon-555d743894d02674867459-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d02674867459-6">6</div><div class="crayon-num" data-line="crayon-555d743894d02674867459-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d02674867459-8">8</div><div class="crayon-num" data-line="crayon-555d743894d02674867459-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d02674867459-10">10</div><div class="crayon-num" data-line="crayon-555d743894d02674867459-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d02674867459-12">12</div><div class="crayon-num" data-line="crayon-555d743894d02674867459-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d02674867459-14">14</div><div class="crayon-num" data-line="crayon-555d743894d02674867459-15">15</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d02674867459-16">16</div><div class="crayon-num" data-line="crayon-555d743894d02674867459-17">17</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894d02674867459-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d02674867459-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d743894d02674867459-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// all variable up top</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d02674867459-4"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743894d02674867459-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d02674867459-6">&nbsp;</div><div class="crayon-line" id="crayon-555d743894d02674867459-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-c">// then code</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d02674867459-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-t">namespace</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743894d02674867459-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"Enter a number: "</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d02674867459-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743894d02674867459-11">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d02674867459-12"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"Enter another number: "</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743894d02674867459-13"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d02674867459-14">&nbsp;</div><div class="crayon-line" id="crayon-555d743894d02674867459-15"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"The sum is: "</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d02674867459-16"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743894d02674867459-17"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0022 seconds] -->
<p></p>
<p>This style is now obsolete.  C++ compilers do not require all variables to be defined at the top of a function.  The proper C++ style is to define variables as close to the first use of that variable as possible:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743894d08514334693" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743894d08514334693-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d08514334693-2">2</div><div class="crayon-num" data-line="crayon-555d743894d08514334693-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d08514334693-4">4</div><div class="crayon-num" data-line="crayon-555d743894d08514334693-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d08514334693-6">6</div><div class="crayon-num" data-line="crayon-555d743894d08514334693-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d08514334693-8">8</div><div class="crayon-num" data-line="crayon-555d743894d08514334693-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d08514334693-10">10</div><div class="crayon-num" data-line="crayon-555d743894d08514334693-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d08514334693-12">12</div><div class="crayon-num" data-line="crayon-555d743894d08514334693-13">13</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743894d08514334693-14">14</div><div class="crayon-num" data-line="crayon-555d743894d08514334693-15">15</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743894d08514334693-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d08514334693-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d743894d08514334693-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-t">namespace</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d08514334693-4">&nbsp;</div><div class="crayon-line" id="crayon-555d743894d08514334693-5"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"Enter a number: "</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d08514334693-6"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// we need x on the next line, so we'll declare it here, as close to it's first use as possible.</span></div><div class="crayon-line" id="crayon-555d743894d08514334693-7"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// first use of x</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d08514334693-8">&nbsp;</div><div class="crayon-line" id="crayon-555d743894d08514334693-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"Enter another number: "</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d08514334693-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// we don't need y until now, so it gets declared here</span></div><div class="crayon-line" id="crayon-555d743894d08514334693-11"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// first use of y</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d08514334693-12">&nbsp;</div><div class="crayon-line" id="crayon-555d743894d08514334693-13"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"The sum is: "</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743894d08514334693-14"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743894d08514334693-15"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0023 seconds] -->
<p></p>
<p>This has quite a few advantages.</p>
<p>First, variables that are defined only when needed are given context by the statements around them.  If x were defined at the top of the function, we would have no idea what it was used for until we scanned the function and found where it was used.  Defining x amongst a bunch of input/output statements helps make it obvious that this variable is being used for input and/or output.</p>
<p>Second, defining a variable only where it is needed tells us that this variable does not affect anything above it, making our program easier to understand and requiring less scrolling.  </p>
<p>Finally, it reduces the likelihood of inadvertently leaving a variable uninitialized, because we can define and then immediately initialize it with the value we want it to have.</p>
<p><em>Rule: Define variables where they are needed.</em></p>
<table border=0 cellpadding=3>
<tr><td>
	<a href="/cpp-tutorial/2-2-void/" style="text-decoration:none"><img src="http://www.learncpp.com/images/CppTutorial/next.png" align=middle> 2.2 -- Void</a>
</td></tr>
<tr><td>
        <a href="http://www.learncpp.com/#Chapter0" style="text-decoration:none"><img src="http://www.learncpp.com/images/CppTutorial/up.png" align=middle> Index</a>
</td></tr>
<tr><td>
	<a href="/cpp-tutorial/111-comprehensive-quiz/" style="text-decoration:none"><img src="http://www.learncpp.com/images/CppTutorial/prev.png" align=middle> 1.11 -- Chapter 1 comprehensive quiz</a>
</td></tr>
</table>

<div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-email"><a rel="nofollow" data-shared="" class="share-email sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/?share=email" target="_blank" title="Click to email this to a friend"><span>Email</span></a></li><li class="share-facebook"><a rel="nofollow" data-shared="sharing-facebook-37" class="share-facebook sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/?share=facebook" target="_blank" title="Share on Facebook"><span>Facebook</span></a></li><li class="share-twitter"><a rel="nofollow" data-shared="sharing-twitter-37" class="share-twitter sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-google-plus-1"><a rel="nofollow" data-shared="sharing-google-37" class="share-google-plus-1 sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/?share=google-plus-1" target="_blank" title="Click to share on Google+"><span>Google</span></a></li><li class="share-pinterest"><a rel="nofollow" data-shared="sharing-pinterest-37" class="share-pinterest sd-button share-icon" href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/?share=pinterest" target="_blank" title="Click to share on Pinterest"><span>Pinterest</span></a></li><li class="share-end"></li></ul></div></div></div><div class='code-block code-block-2' style='float:left;margin:8px 8px 8px 0px;'><div class="cf_monitor">
<div id="171844866">
    <script type="text/javascript">
    try {
        window._mNHandle.queue.push(function () {
		    window._mNDetails.loadTag("171844866", "336x280", "171844866");
		    });
		}
    catch (error) {}
	</script>
</div>
</div></div></div>						<div class="post-footer"><img src="http://www.learncpp.com/blog/wp-content/themes/atahualpa/images/icons/folder-gray.gif" alt="" /> <a class="cpp-tutorial" href="http://www.learncpp.com/category/cpp-tutorial/" title="View all posts in C++ Tutorial">C++ Tutorial</a>   | <a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/print/" title="Print This Post" rel="nofollow"><img class="WP-PrintIcon" src="http://www.learncpp.com/blog/wp-content/plugins/wp-print/images/printer_famfamfam.gif" alt="Print This Post" title="Print This Post" style="border: 0px;" /></a>&nbsp;<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/print/" title="Print This Post" rel="nofollow">Print This Post</a></div>		</div><!-- / Post -->	
						
	
			

	<a name="comments"></a><!-- named anchor for skip links -->
	<h3 id="comments">46 comments to 2.1 &#8212; Basic addressing and variable definition</h3>

	
	<!-- Comment List -->
	<ul class="commentlist">
		
			<li class="comment even thread-even depth-1 clearfix" id="comment-5587">
		<div id="div-comment-5587" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/0195bf75f2f76e29b4f52f919e1cec59?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/0195bf75f2f76e29b4f52f919e1cec59?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Abhishek</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-5587">
		January 5, 2008 at 9:37 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=5587#respond' onclick='return addComment.moveForm( "comment-5587", "5587", "respond", "37" )' aria-label='Reply to Abhishek'> &middot; Reply</a></span>		 
		</div>
		<p>That was easy ?</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-19629">
		<div id="div-comment-19629" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/988d29ea251c2fb5076412976735ca73?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/988d29ea251c2fb5076412976735ca73?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Jesse</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-19629">
		June 23, 2008 at 9:56 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=19629#respond' onclick='return addComment.moveForm( "comment-19629", "19629", "respond", "37" )' aria-label='Reply to Jesse'> &middot; Reply</a></span>		 
		</div>
		<p>&#8220;This is not a bad mistake because the compiler will complain and ask you to fix it.&#8221;<br />
Shouldn&#8217;t this say:<br />
&#8220;This is a bad mistake because the compiler will complain and ask you to fix it.&#8221;</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor even depth-2 clearfix" id="comment-19670">
		<div id="div-comment-19670" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-19670">
		June 23, 2008 at 9:57 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=19670#respond' onclick='return addComment.moveForm( "comment-19670", "19670", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Nope.  In my view, anything the compiler catches is not a bad mistake because the compiler points out exactly where the error is.  Those tend to get fixed immediately.  The bad mistakes are the ones the compiler doesn&#8217;t catch.  Those are the ones that are likely to creep into production code (code released to the public).</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-23400">
		<div id="div-comment-23400" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/255995609544f26c61ede79f89fa4c41?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/255995609544f26c61ede79f89fa4c41?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Argon</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-23400">
		August 11, 2008 at 3:30 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=23400#respond' onclick='return addComment.moveForm( "comment-23400", "23400", "respond", "37" )' aria-label='Reply to Argon'> &middot; Reply</a></span>		 
		</div>
		<p>Hi, and thank you for a very informative and easy-to-read tutorial.</p>
<p>One question to the &#8220;define variables along the way&#8221;.. I have a love for using this type of defining:</p>
<p>type foo()<br />
{<br />
    type tDescriptiveName(alternatively a default value); // Description<br />
    type tDescriptiveName(alternatively a default value); // Description<br />
    type tDescriptiveName(alternatively a default value); // Description<br />
    type tDescriptiveName(alternatively a default value); // Description</p>
<p>    [&#8230; function code &#8230;]<br />
}</p>
<p>Find this more tidy. And if var (witch it often is) are used more than once, &#8220;top description&#8221; will give a clear meaning.<br />
Any sense in this?</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor even depth-2 clearfix" id="comment-23418">
		<div id="div-comment-23418" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-23418">
		August 11, 2008 at 8:37 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=23418#respond' onclick='return addComment.moveForm( "comment-23418", "23418", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Well, if it&#8217;s your code you&#8217;re welcome to do whatever you like. <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" />  But generally, the declare your variables at the top style of declaration is considered deprecated in C++.  My personal experience has taught me that it leads to tougher to read/understand code, even when they are commented.</p>
<p>One issue with declare-at-the-top style of declaration is that you often have to scroll up to find out whether a variable is a local variable (declared in the function) or a function parameter.  Declare-when-needed often doesn&#8217;t suffer from this wasted energy, since the majority of variables in a function will be declared when needed and used immediately thereafter.</p>
		</div>
<ul class="children">
		<li class="comment odd alt depth-3 clearfix" id="comment-51774">
		<div id="div-comment-51774" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/941c9a2c3baaf83e5bac1d0899af9aab?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/941c9a2c3baaf83e5bac1d0899af9aab?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Bradley</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-51774">
		March 19, 2009 at 7:27 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=51774#respond' onclick='return addComment.moveForm( "comment-51774", "51774", "respond", "37" )' aria-label='Reply to Bradley'> &middot; Reply</a></span>		 
		</div>
		<p>Your second point, that you need to scroll up to find out whether a variable is a local variable or a function parameter is solved simply by following some common sense programming guidelines.  Use prefixes on items to indicate what they are.  For example;</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d74389924b459593862" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d74389924b459593862-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d74389924b459593862-2">2</div><div class="crayon-num" data-line="crayon-555d74389924b459593862-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d74389924b459593862-4">4</div><div class="crayon-num" data-line="crayon-555d74389924b459593862-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d74389924b459593862-6">6</div><div class="crayon-num" data-line="crayon-555d74389924b459593862-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d74389924b459593862-8">8</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d74389924b459593862-1"><span class="crayon-c">//pv prefix means it is a parameter value</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d74389924b459593862-2"><span class="crayon-c">//lv prefix means it is a local variable</span></div><div class="crayon-line" id="crayon-555d74389924b459593862-3">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d74389924b459593862-4"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">add</span><span class="crayon-sy">(</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">pvVal1</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">pvVal2</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-555d74389924b459593862-5"><span class="crayon-sy">{</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d74389924b459593862-6"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">lvResult</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-v">pvVal1</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">pvVal2</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d74389924b459593862-7"><span class="crayon-h">&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">lvResult</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d74389924b459593862-8"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0011 seconds] -->
<p>This method - or something like it - has been the standard at almost every company I have worked with in my 15+ years as a consultant.  This notation, along with the use of meaningful variable names, makes most claims to one method of declaring variables being superior to the other pretty meaningless in my opinion.</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor even depth-4 clearfix" id="comment-251474">
		<div id="div-comment-251474" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251474">
		February 11, 2015 at 11:24 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251474#respond' onclick='return addComment.moveForm( "comment-251474", "251474", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>As noted in the lesson, declaring variables as close to the first use as possible is a widely accepted C++ convention.  Whether you choose to follow convention is up to you.</p>
<p>Companies that follow the &#8220;declare at the top&#8221; convention likely have roots in older C code, where that style of definition was a necessity, and haven&#8217;t updated their style guidelines in favor of modern best practices.</p>
<p>I also would not recommend using the &#8220;pv&#8221; or &#8220;lv&#8221; prefix unless you like typing more than necessary.  Variables should be assumed to be locally scoped unless otherwise indicated.</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 clearfix" id="comment-252068">
		<div id="div-comment-252068" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/876f5c329f8d3f6a85b10f7fee92427e?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/876f5c329f8d3f6a85b10f7fee92427e?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">DR</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-252068">
		April 4, 2015 at 7:59 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=252068#respond' onclick='return addComment.moveForm( "comment-252068", "252068", "respond", "37" )' aria-label='Reply to DR'> &middot; Reply</a></span>		 
		</div>
		<p>I wouldn&#8217;t go further than m_ when flagging variables in this day and age; Hungarian notation is a huge thing of the past and is discredited by Microsoft themselves.</p>
<p>Why would you declare a variable that takes up memory if it might not be used&#8230;or if you leave it non-initialized what would be the use of &quot;opening a back door&quot; to something that could lead to a potential edge case bug.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-34583">
		<div id="div-comment-34583" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/cb3d1b53f5b11b7ab0d1aca41f93a1e4?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/cb3d1b53f5b11b7ab0d1aca41f93a1e4?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">CuView</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-34583">
		December 14, 2008 at 7:25 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=34583#respond' onclick='return addComment.moveForm( "comment-34583", "34583", "respond", "37" )' aria-label='Reply to CuView'> &middot; Reply</a></span>		 
		</div>
		<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7438996bb607909564" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7438996bb607909564-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438996bb607909564-2">2</div><div class="crayon-num" data-line="crayon-555d7438996bb607909564-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438996bb607909564-4">4</div><div class="crayon-num" data-line="crayon-555d7438996bb607909564-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438996bb607909564-6">6</div><div class="crayon-num" data-line="crayon-555d7438996bb607909564-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438996bb607909564-8">8</div><div class="crayon-num" data-line="crayon-555d7438996bb607909564-9">9</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7438996bb607909564-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438996bb607909564-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7438996bb607909564-3"><span class="crayon-h">&nbsp;&nbsp; </span><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-t">namespace</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438996bb607909564-4"><span class="crayon-h">&nbsp;&nbsp; </span></div><div class="crayon-line" id="crayon-555d7438996bb607909564-5"><span class="crayon-h">&nbsp;&nbsp; </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438996bb607909564-6"><span class="crayon-h">&nbsp;&nbsp; </span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7438996bb607909564-7"><span class="crayon-h">&nbsp;&nbsp; </span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438996bb607909564-8"><span class="crayon-h">&nbsp;&nbsp; </span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7438996bb607909564-9"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0010 seconds] -->
<p>Does the &#8216;x&#8217; variables above is initialized or not?<br />
How to know weather the variables is initialized or uninitialized?</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-35410">
		<div id="div-comment-35410" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-35410">
		December 22, 2008 at 9:28 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=35410#respond' onclick='return addComment.moveForm( "comment-35410", "35410", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>When x is defined in your example, it is not intitialized.  After the cin statement, x may or may not be initialized depending on whether the user entered a valid number or not.  In this example, it would be a good idea to declare x and assign it to 0 immediately:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7438995b3464566891" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7438995b3464566891-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7438995b3464566891-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>There is no sure-fire way of telling whether a variable is initialized or not.  Consequently, it&#8217;s a good idea to always initialize your variables when they are declared.  That way, you won&#8217;t have to guess.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-35278">
		<div id="div-comment-35278" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/0e0f9b258f40e09bc456f776cdbf6702?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/0e0f9b258f40e09bc456f776cdbf6702?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ali</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-35278">
		December 21, 2008 at 11:22 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=35278#respond' onclick='return addComment.moveForm( "comment-35278", "35278", "respond", "37" )' aria-label='Reply to Ali'> &middot; Reply</a></span>		 
		</div>
		<p>what is the difference between the explicit assignment and the implicit assignment ? what does each one differ than another? where should I use them?</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-35412">
		<div id="div-comment-35412" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-35412">
		December 22, 2008 at 10:43 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=35412#respond' onclick='return addComment.moveForm( "comment-35412", "35412", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>As far as I know, when it comes to built-in data types, there&#8217;s no substantive difference.  I ran some timing tests on each and they performed identically in my test cases.<br />
For user-defined classes (something we&#8217;ll cover later), implicit initialization performs better, as it avoids making an unnecessary copy of the class.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-38802">
		<div id="div-comment-38802" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/263b5bf0459b5c3d3b48fecbed37b053?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/263b5bf0459b5c3d3b48fecbed37b053?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Bob</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-38802">
		January 22, 2009 at 9:21 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=38802#respond' onclick='return addComment.moveForm( "comment-38802", "38802", "respond", "37" )' aria-label='Reply to Bob'> &middot; Reply</a></span>		 
		</div>
		<p>What is the fundamental difference between explicit and implicit assignment? Is there any reason to use one over the other? Is there any difference between &#8216;int nValue = 50&#8242; and &#8216;int nValue(50)&#8217;? Does the compiler treat them differently? Or is the end result always the same regardless; nValue = 50.</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-41989">
		<div id="div-comment-41989" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-41989">
		February 5, 2009 at 11:42 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=41989#respond' onclick='return addComment.moveForm( "comment-41989", "41989", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>See the question and answer immediately above this one. <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-46051">
		<div id="div-comment-46051" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/f040cd2591cca3d6a95c272b2f8e6159?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/f040cd2591cca3d6a95c272b2f8e6159?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Ben</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-46051">
		February 21, 2009 at 2:18 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=46051#respond' onclick='return addComment.moveForm( "comment-46051", "46051", "respond", "37" )' aria-label='Reply to Ben'> &middot; Reply</a></span>		 
		</div>
		<p>I used the following code:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d74389940e616316057" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d74389940e616316057-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d74389940e616316057-1"><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">;</span><span class="crayon-h"> </span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0005 seconds] -->
<p></p>
<p>and it worked just fine, but the tutorial said it would not compile. Now I&#8217;m confused..</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-48428">
		<div id="div-comment-48428" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-48428">
		March 1, 2009 at 11:44 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=48428#respond' onclick='return addComment.moveForm( "comment-48428", "48428", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Actually if you read closely, I said it was dangerous, not that it wouldn&#8217;t compile.  It WILL compile, but x will be uninitialized.  Most new programmers assume that it will be initialized to 5, which is not the case.  That&#8217;s why this is particularly dangerous.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-51572">
		<div id="div-comment-51572" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/44e1acd7b4b219d7fc255958c7d2baf6?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/44e1acd7b4b219d7fc255958c7d2baf6?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Tate</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-51572">
		March 18, 2009 at 4:37 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=51572#respond' onclick='return addComment.moveForm( "comment-51572", "51572", "respond", "37" )' aria-label='Reply to Tate'> &middot; Reply</a></span>		 
		</div>
		<p>Would initializing the intiger x as it is taken from input work?<br />
e.g. </p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743899302218597030" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743899302218597030-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743899302218597030-1"><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-59726">
		<div id="div-comment-59726" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://www.tarindel.com' rel='external nofollow' class='url'>Alex</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-59726">
		May 1, 2009 at 7:46 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=59726#respond' onclick='return addComment.moveForm( "comment-59726", "59726", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>It won&#8217;t even compile, so I&#8217;m going to go with no. <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" />  The input variables you use have to be predefined.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-65292">
		<div id="div-comment-65292" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/b02efe62e243cced8a1058552412c778?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/b02efe62e243cced8a1058552412c778?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://littlepeak.yo2.cn' rel='external nofollow' class='url'>peak</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-65292">
		July 29, 2009 at 11:35 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=65292#respond' onclick='return addComment.moveForm( "comment-65292", "65292", "respond", "37" )' aria-label='Reply to peak'> &middot; Reply</a></span>		 
		</div>
		<p>Hi, alex.<br />
can you tell me when I define an int like</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743899142194380857" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743899142194380857-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743899142194380857-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">i</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p>where is the information like the type and the address of i placed?</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251476">
		<div id="div-comment-251476" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251476">
		February 11, 2015 at 11:52 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251476#respond' onclick='return addComment.moveForm( "comment-251476", "251476", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Good question.  The compiler creates something called a symbol table, to keep track of details like a variable&#8217;s name, type, scope, etc&#8230;  The linker also has a symbol table to keep track of exported functions and variables so they can be properly linked.  Symbol tables are complicated, and you probably won&#8217;t need to know the details of how they work unless you&#8217;re writing a parser or compiler.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-73042">
		<div id="div-comment-73042" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/487b8a76b0469321208f3fa2e2c8a070?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/487b8a76b0469321208f3fa2e2c8a070?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Fluke</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-73042">
		November 26, 2009 at 4:26 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=73042#respond' onclick='return addComment.moveForm( "comment-73042", "73042", "respond", "37" )' aria-label='Reply to Fluke'> &middot; Reply</a></span>		 
		</div>
		<p>Hi Alex,<br />
Great tutorial so far!</p>
<p>A question about declaring variables where they are used.<br />
I am a bit old-style programmer and i cant find the arguments for declare variables when used to be so good. </p>
<p>Here is my reasoning (proove me wrong, so i can change my style <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /><br />
Lets see if we have 1000 lines of code. We have a function of 300 lines somewere inside (among other functions).<br />
If we use function variables more than once inside that function, and they are declared on their first use, isnt it harder, later on, to find out which one is global and which is declared within those 300 lines?<br />
Or just if we had all function variables just under function name - you can see on first glance which one is there and which one is global?</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251477">
		<div id="div-comment-251477" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251477">
		February 11, 2015 at 1:40 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251477#respond' onclick='return addComment.moveForm( "comment-251477", "251477", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>I&#8217;d counter with a few points:<br />
1) Global variables should be used exceedingly rarely.<br />
2) If global variables are used, they can be easily identified if you label them with a specific prefix (e.g. g_).<br />
3) If your function is 300 lines, it probably should be refactored into smaller functions.  I rarely write a function that is more than 100 lines, and most of the time they are less than 50.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-74718">
		<div id="div-comment-74718" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/4adac23b4f6d27178b62776bfb097dbc?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/4adac23b4f6d27178b62776bfb097dbc?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Lilwolf</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-74718">
		December 23, 2009 at 1:04 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=74718#respond' onclick='return addComment.moveForm( "comment-74718", "74718", "respond", "37" )' aria-label='Reply to Lilwolf'> &middot; Reply</a></span>		 
		</div>
		<p>I have a question&#8230;</p>
<p>I&#8217;m learning Computer Science through a college class, and we were taught to declare variables in the header files under the private section with functions under public&#8230;</p>
<p>Why? I&#8217;m a little confused and eager to learn, and sadly my professor doesn&#8217;t seem to be able to explain things too well. Help please!! <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251478">
		<div id="div-comment-251478" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251478">
		February 11, 2015 at 1:43 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251478#respond' onclick='return addComment.moveForm( "comment-251478", "251478", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>When you say you were taught to declare variables &#8220;in the header files under the private section&#8221;, it sounds like you&#8217;re actually talking about how to write a class declaration.  The rules for where class member variables and functions are defined are a little different (and covered in a future chapter).</p>
<p>In this lesson, we&#8217;re talking about function parameters and local variables.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-90419">
		<div id="div-comment-90419" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/b606f33031e87d4c5973528b7e612ed0?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/b606f33031e87d4c5973528b7e612ed0?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">AsianBorat</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-90419">
		August 16, 2010 at 4:51 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=90419#respond' onclick='return addComment.moveForm( "comment-90419", "90419", "respond", "37" )' aria-label='Reply to AsianBorat'> &middot; Reply</a></span>		 
		</div>
		<p>YES!!!! This is exactly what I was looking for!  (I was wondering about the &#8220;int nValue1, nValue2 = 5; // wrong (nValue1 is uninitialized!)&#8221; bit when I was searching for an answer on google)</p>
<p>I also learned a whole lot more about declaring ints than from other tutorials.</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-92375">
		<div id="div-comment-92375" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/05ece45032f29dc325aac0bab7142830?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/05ece45032f29dc325aac0bab7142830?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Shaun</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-92375">
		September 20, 2010 at 10:36 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=92375#respond' onclick='return addComment.moveForm( "comment-92375", "92375", "respond", "37" )' aria-label='Reply to Shaun'> &middot; Reply</a></span>		 
		</div>
		<p>so then by making new functions such as:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743898f31968970512" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743898f31968970512-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743898f31968970512-2">2</div><div class="crayon-num" data-line="crayon-555d743898f31968970512-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743898f31968970512-4">4</div><div class="crayon-num" data-line="crayon-555d743898f31968970512-5">5</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743898f31968970512-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">read</span><span class="crayon-sy">(</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743898f31968970512-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d743898f31968970512-3"><span class="crayon-h">	</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743898f31968970512-4"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743898f31968970512-5"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0009 seconds] -->
<p>is kind of extra work if we can just declare the variables within the Main() function, and get the same output?  for example:</p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743898f3c426071398" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743898f3c426071398-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743898f3c426071398-2">2</div><div class="crayon-num" data-line="crayon-555d743898f3c426071398-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743898f3c426071398-4">4</div><div class="crayon-num" data-line="crayon-555d743898f3c426071398-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743898f3c426071398-6">6</div><div class="crayon-num" data-line="crayon-555d743898f3c426071398-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743898f3c426071398-8">8</div><div class="crayon-num" data-line="crayon-555d743898f3c426071398-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743898f3c426071398-10">10</div><div class="crayon-num" data-line="crayon-555d743898f3c426071398-11">11</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743898f3c426071398-12">12</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743898f3c426071398-1"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743898f3c426071398-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d743898f3c426071398-3"><span class="crayon-h">	</span><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-t">namespace</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743898f3c426071398-4"><span class="crayon-h">	</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743898f3c426071398-5"><span class="crayon-h">	</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"enter first number here"</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743898f3c426071398-6"><span class="crayon-h">	</span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743898f3c426071398-7"><span class="crayon-h">	</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743898f3c426071398-8"><span class="crayon-h">	</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"enter second number here"</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743898f3c426071398-9"><span class="crayon-h">	</span><span class="crayon-v">cin</span><span class="crayon-h"> </span><span class="crayon-o">&gt;&gt;</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743898f3c426071398-10"><span class="crayon-h">	</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">+</span><span class="crayon-h"> </span><span class="crayon-v">y</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d743898f3c426071398-11"><span class="crayon-h">	</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743898f3c426071398-12"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0022 seconds] -->
<p>  this doesnt require any other functions to add 2 numbers from a user and give a result.  but in the chapter 1 comprehension quiz we needed 2 functions to do what this single Main() function can do without the hassle.  am i missing something? or does this seem so much easier?  or maybe that&#8217;s why you made this more clear in the next chapter?  just want to note, i do understand making a function to do this for us is beneficial for multiple addition problems, but for a single one, i find this is much simpler.</p>
		</div>
<ul class="children">
		<li class="comment even depth-2 clearfix" id="comment-208615">
		<div id="div-comment-208615" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/2dc58df301aaf9474e1d1a1a14608917?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/2dc58df301aaf9474e1d1a1a14608917?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">rameye</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-208615">
		November 3, 2014 at 12:34 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=208615#respond' onclick='return addComment.moveForm( "comment-208615", "208615", "respond", "37" )' aria-label='Reply to rameye'> &middot; Reply</a></span>		 
		</div>
		<p>It was a quiz exercise on functions. Not a one-liner contest <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-3 clearfix" id="comment-251479">
		<div id="div-comment-251479" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251479">
		February 11, 2015 at 1:55 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251479#respond' onclick='return addComment.moveForm( "comment-251479", "251479", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Yes, the chapter 1 comprehensive quiz has you go through extra steps for the purpose of ensuring you understand some basic concepts that will be used later.  It&#8217;s a little extraneous, as you&#8217;ve noticed, but the understanding will serve you well in the future.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-95061">
		<div id="div-comment-95061" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/7fe3b4ca2120fdb1cb1b23cd50f2be7a?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/7fe3b4ca2120fdb1cb1b23cd50f2be7a?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">prafull.badyal</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-95061">
		December 20, 2010 at 6:19 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=95061#respond' onclick='return addComment.moveForm( "comment-95061", "95061", "respond", "37" )' aria-label='Reply to prafull.badyal'> &middot; Reply</a></span>		 
		</div>
		<p>gud..thanks to sir alex</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 clearfix" id="comment-95888">
		<div id="div-comment-95888" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/224996895a2f35fc3320ce3e58c867b3?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/224996895a2f35fc3320ce3e58c867b3?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Kostas81</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-95888">
		August 20, 2011 at 5:59 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=95888#respond' onclick='return addComment.moveForm( "comment-95888", "95888", "respond", "37" )' aria-label='Reply to Kostas81'> &middot; Reply</a></span>		 
		</div>
		<p>A quick question:</p>
<p>Alex wrote: &#8220;The last mistake is the dangerous case. In this case, the programmer mistakenly tries to initialize both variables by using one assignment statement. </p>
<p>1  int nValue1, nValue2 = 5; // wrong (nValue1 is uninitialized!)<br />
2<br />
3  int nValue1 = 5, nValue2 = 5; // correct</p>
<p>In the top statement, the nValue1 variable will be left uninitialized, and the compiler will NOT complain. This is a great way to have your program intermittently crash and produce sporadic results.&#8221;</p>
<p>But in section 1.3, &#8220;A first look at variables (and cin)&#8221; Alex had wrote:</p>
<p>&#8220;A variable that has not been assigned a value is called an uninitialized variable. Uninitialized variables are very dangerous because they cause intermittent problems (due to having different values each time you run the program). This can make them very hard to debug. Most modern compilers WILL print warnings at compile-time if they can detect a variable that is used without being initialized.&#8221;</p>
<p>And few lines before he wrote:</p>
<p>&#8220;Some newer compilers, such as Visual Studio 2005 Express will pop up a debug error message if you run this program from within the IDE.&#8221; (He means a program with an uninitialized variable.)</p>
<p>So, why here the compiler will not complain about the uninitialized variable???<br />
(And can someone tell me, &#8220;wrote&#8221; is the past tense for &#8220;write&#8221; or not? :D)</p>
		</div>
<ul class="children">
		<li class="comment even depth-2 clearfix" id="comment-95891">
		<div id="div-comment-95891" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/21b2deaaa0bcf172aa88051b6cf7ba1f?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='http://127.0.0.1/' rel='external nofollow' class='url'>zingmars</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-95891">
		August 20, 2011 at 7:22 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=95891#respond' onclick='return addComment.moveForm( "comment-95891", "95891", "respond", "37" )' aria-label='Reply to zingmars'> &middot; Reply</a></span>		 
		</div>
		<p>yes, &#8216;wrote&#8217; is indeed the past tense for &#8216;write&#8217;.<br />
Anyway, I guess it depends on the compiler, because mine will pop up a warning in either case. I suppose VS05 did stuff differently.</p>
		</div>
<ul class="children">
		<li class="comment odd alt depth-3 clearfix" id="comment-95904">
		<div id="div-comment-95904" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/224996895a2f35fc3320ce3e58c867b3?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/224996895a2f35fc3320ce3e58c867b3?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Kostas81</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-95904">
		August 20, 2011 at 12:15 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=95904#respond' onclick='return addComment.moveForm( "comment-95904", "95904", "respond", "37" )' aria-label='Reply to Kostas81'> &middot; Reply</a></span>		 
		</div>
		<p>Thank you zingmars once again for your answer! (and for the little grammar help &#8230; <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /> )</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alex bypostauthor even depth-3 clearfix" id="comment-251480">
		<div id="div-comment-251480" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251480">
		February 11, 2015 at 3:33 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251480#respond' onclick='return addComment.moveForm( "comment-251480", "251480", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>I&#8217;ve found that Visual Studio is capable of showing uninitialized variable warnings for simple cases, but may or may not for slightly more complicated cases.</p>
<p>For example, Visual Studio 2013 gives an unassigned variable compiler error for this code:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7438987b7198729272" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7438987b7198729272-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987b7198729272-2">2</div><div class="crayon-num" data-line="crayon-555d7438987b7198729272-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987b7198729272-4">4</div><div class="crayon-num" data-line="crayon-555d7438987b7198729272-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987b7198729272-6">6</div><div class="crayon-num" data-line="crayon-555d7438987b7198729272-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987b7198729272-8">8</div><div class="crayon-num" data-line="crayon-555d7438987b7198729272-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987b7198729272-10">10</div><div class="crayon-num" data-line="crayon-555d7438987b7198729272-11">11</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7438987b7198729272-1"><span class="crayon-t">void</span><span class="crayon-h"> </span><span class="crayon-e">writeValue</span><span class="crayon-sy">(</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">)</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987b7198729272-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7438987b7198729272-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"The value is "</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987b7198729272-4"><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-555d7438987b7198729272-5">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987b7198729272-6"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-555d7438987b7198729272-7"><span class="crayon-sy">{</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987b7198729272-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">a</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// uh oh, forgot to initialize a</span></div><div class="crayon-line" id="crayon-555d7438987b7198729272-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-e">writeValue</span><span class="crayon-sy">(</span><span class="crayon-v">a</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987b7198729272-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7438987b7198729272-11"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0020 seconds] -->
<p></p>
<p>But NOT for this code:</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d7438987c4496892757" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d7438987c4496892757-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987c4496892757-2">2</div><div class="crayon-num" data-line="crayon-555d7438987c4496892757-3">3</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987c4496892757-4">4</div><div class="crayon-num" data-line="crayon-555d7438987c4496892757-5">5</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987c4496892757-6">6</div><div class="crayon-num" data-line="crayon-555d7438987c4496892757-7">7</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987c4496892757-8">8</div><div class="crayon-num" data-line="crayon-555d7438987c4496892757-9">9</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d7438987c4496892757-10">10</div><div class="crayon-num" data-line="crayon-555d7438987c4496892757-11">11</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d7438987c4496892757-1"><span class="crayon-t">void</span><span class="crayon-h"> </span><span class="crayon-e">writeValue</span><span class="crayon-sy">(</span><span class="crayon-m">const</span><span class="crayon-h"> </span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">&amp;x</span><span class="crayon-sy">)</span><span class="crayon-h"> </span><span class="crayon-c">// note: this case uses a reference parameter</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987c4496892757-2"><span class="crayon-sy">{</span></div><div class="crayon-line" id="crayon-555d7438987c4496892757-3"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-s">"The value is "</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-v">endl</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987c4496892757-4"><span class="crayon-sy">}</span></div><div class="crayon-line" id="crayon-555d7438987c4496892757-5">&nbsp;</div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987c4496892757-6"><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-e">main</span><span class="crayon-sy">(</span><span class="crayon-sy">)</span></div><div class="crayon-line" id="crayon-555d7438987c4496892757-7"><span class="crayon-sy">{</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987c4496892757-8"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-t">int</span><span class="crayon-h"> </span><span class="crayon-v">a</span><span class="crayon-sy">,</span><span class="crayon-h"> </span><span class="crayon-v">b</span><span class="crayon-h"> </span><span class="crayon-o">=</span><span class="crayon-h"> </span><span class="crayon-cn">5</span><span class="crayon-sy">;</span><span class="crayon-h"> </span><span class="crayon-c">// uh oh, forgot to initialize a</span></div><div class="crayon-line" id="crayon-555d7438987c4496892757-9"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-e">writeValue</span><span class="crayon-sy">(</span><span class="crayon-v">a</span><span class="crayon-sy">)</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d7438987c4496892757-10"><span class="crayon-h">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="crayon-st">return</span><span class="crayon-h"> </span><span class="crayon-cn">0</span><span class="crayon-sy">;</span></div><div class="crayon-line" id="crayon-555d7438987c4496892757-11"><span class="crayon-sy">}</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0018 seconds] -->
<p></p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 clearfix" id="comment-104869">
		<div id="div-comment-104869" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://0.gravatar.com/avatar/99dc479a54fb030ea360f76a20bd17e6?s=65&#038;d=mm&#038;r=g' srcset='http://0.gravatar.com/avatar/99dc479a54fb030ea360f76a20bd17e6?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname"><a href='https://www.facebook.com/mahmoud.badawy2013?ref=tn_tnmn' rel='external nofollow' class='url'>mahmoudbadawy123</a></span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-104869">
		September 16, 2013 at 7:28 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=104869#respond' onclick='return addComment.moveForm( "comment-104869", "104869", "respond", "37" )' aria-label='Reply to mahmoudbadawy123'> &middot; Reply</a></span>		 
		</div>
		<p>i think it is better and easier</p>
		</div>
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-251131">
		<div id="div-comment-251131" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/e50a5c11f1fe84369506e827a3b51190?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/e50a5c11f1fe84369506e827a3b51190?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">M Harran</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251131">
		January 12, 2015 at 4:00 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251131#respond' onclick='return addComment.moveForm( "comment-251131", "251131", "respond", "37" )' aria-label='Reply to M Harran'> &middot; Reply</a></span>		 
		</div>
		<p>Alex, I&#8217;m coming late to the party but you should take pride that your tutorial is still proving useful to people 6 years down the road <img src="http://www.learncpp.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>I&#8217;m coming from a C# background so I&#8217;m well used to the idea of employing something like </p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743898c2b008231377" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743898c2b008231377-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743898c2b008231377-1"><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-t">namespace</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0003 seconds] -->
<p></p>
<p>Reading around places like stackoverflow, however, a lot of programmers say this is a bad idea, that you should specifically state the parts of the library that you are using i.e. </p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743898c36315414650" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743898c36315414650-1">1</div><div class="crayon-num crayon-striped-num" data-line="crayon-555d743898c36315414650-2">2</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743898c36315414650-1"><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-v">cin</span><span class="crayon-sy">;</span></div><div class="crayon-line crayon-striped-line" id="crayon-555d743898c36315414650-2"><span class="crayon-r">using</span><span class="crayon-h"> </span><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-r">cout</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>Their argument is that by using the whole namespace, you may cause a conflict between a function in some other file that you are including which happens to have the same name as something in the standard library.</p>
<p>Any comment on that argument?</p>
<p>Thanks for a brilliant tutorial by the way, coming from C# and Visual Studio, it is perfect for me.</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251136">
		<div id="div-comment-251136" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251136">
		January 12, 2015 at 1:31 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251136#respond' onclick='return addComment.moveForm( "comment-251136", "251136", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Sure.  The folks at Stack Overflow are correct -- the looser you are with your using statements, the more likely a naming conflict becomes.  Explicitly including the classes you want from the library (e.g. using std::cin) is safer than including the whole library (using namespace std;).  If you&#8217;re really concerned about naming conflicts, you can even go one step further and avoid &#8220;using&#8221; statements altogether and explicitly qualify everything.  e.g.</p>
<p></p><!-- Crayon Syntax Highlighter v2.7.1 -->

		<div id="crayon-555d743898b60613118942" class="crayon-syntax crayon-theme-familiar-learncppcom crayon-font-monaco crayon-os-pc print-yes notranslate" data-settings=" no-popup minimize scroll-mouseover wrap" style=" margin-top: 12px; margin-bottom: 12px; font-size: 12px !important; line-height: 15px !important;">
		
			<div class="crayon-plain-wrap"></div>
			<div class="crayon-main" style="">
				<table class="crayon-table">
					<tr class="crayon-row">
				<td class="crayon-nums " data-settings="show">
					<div class="crayon-nums-content" style="font-size: 12px !important; line-height: 15px !important;"><div class="crayon-num" data-line="crayon-555d743898b60613118942-1">1</div></div>
				</td>
						<td class="crayon-code"><div class="crayon-pre" style="font-size: 12px !important; line-height: 15px !important; -moz-tab-size:4; -o-tab-size:4; -webkit-tab-size:4; tab-size:4;"><div class="crayon-line" id="crayon-555d743898b60613118942-1"><span class="crayon-v">std</span><span class="crayon-o">::</span><span class="crayon-r">cout</span><span class="crayon-h"> </span><span class="crayon-o">&lt;&lt;</span><span class="crayon-h"> </span><span class="crayon-v">x</span><span class="crayon-sy">;</span></div></div></td>
					</tr>
				</table>
			</div>
		</div>
<!-- [Format Time: 0.0004 seconds] -->
<p></p>
<p>Generally, I&#8217;ve found that as long as your using statements are declared within functions (and not done at the global scope) the potential for conflicts is fairly minimal.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-251220">
		<div id="div-comment-251220" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/d6e7753199515b959ef0a06da631ab7c?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/d6e7753199515b959ef0a06da631ab7c?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">PrimalKyogreOVER9000!!!!</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251220">
		January 22, 2015 at 1:00 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251220#respond' onclick='return addComment.moveForm( "comment-251220", "251220", "respond", "37" )' aria-label='Reply to PrimalKyogreOVER9000!!!!'> &middot; Reply</a></span>		 
		</div>
		<p>Great tutorial Alex! Really enjoying so far.</p>
<p>Can you please explain what bool, char, float and double variable types mean? And what are they used for?</p>
<p>Thanks</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251481">
		<div id="div-comment-251481" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251481">
		February 11, 2015 at 3:36 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251481#respond' onclick='return addComment.moveForm( "comment-251481", "251481", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Keep reading.  All of those are explained in the upcoming lessons.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-251430">
		<div id="div-comment-251430" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/148109f53d1d11e5b29ff47dcfa69cfc?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/148109f53d1d11e5b29ff47dcfa69cfc?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Woopsie</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251430">
		February 9, 2015 at 12:01 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251430#respond' onclick='return addComment.moveForm( "comment-251430", "251430", "respond", "37" )' aria-label='Reply to Woopsie'> &middot; Reply</a></span>		 
		</div>
		<p>Third paragraph, second-to-last sentence, &#8220;it&#8217;s&#8221; should be &#8220;its&#8221;</p>
<p>Also, last sentence before &#8220;Declaring a variable&#8221;, another it&#8217;s/its</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251431">
		<div id="div-comment-251431" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251431">
		February 9, 2015 at 12:38 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251431#respond' onclick='return addComment.moveForm( "comment-251431", "251431", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Updated, thanks.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-251584">
		<div id="div-comment-251584" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/27762c9658114d8f243a958772f47f34?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/27762c9658114d8f243a958772f47f34?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Adam</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251584">
		February 21, 2015 at 11:23 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251584#respond' onclick='return addComment.moveForm( "comment-251584", "251584", "respond", "37" )' aria-label='Reply to Adam'> &middot; Reply</a></span>		 
		</div>
		<p>Alex,</p>
<p>My background is in mechanical engineering. I&apos;ve some experience with Python, MATLAB, and some Visual Basic in high school. I am telling you that as I believe my question stems from the experience I&apos;ve had writing code for these applications as opposed to commercial software. </p>
<p>In engineering and math it is often helpful to declare certain variables at the top. For instance a value for friction that is used in many equations and places throughout the code. The value can then be easily found and changed. This is not only easier but prevents mistakes by eliminating the need to find each use of the variable and change it locally. </p>
<p>Is this a case where using an upfront declaration is appropriate? If not how would you handle a situation like this?</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251614">
		<div id="div-comment-251614" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251614">
		February 23, 2015 at 5:25 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251614#respond' onclick='return addComment.moveForm( "comment-251614", "251614", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Great question!  Values like mathematical and physics constants, or that define per-application &#8220;tuning&#8221; parameters are good candidates to be declared in a central location, so you can define them once and use them many times.  I cover this case in more detail in section <a href="http://www.learncpp.com/cpp-tutorial/2-8a-symbolic-constants-and-the-const-keyword/" rel="nofollow">2.8a -- Symbolic constants and the const keyword</a>.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 clearfix" id="comment-251790">
		<div id="div-comment-251790" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/b4bcdb0257ebf101ed3453b2650d5996?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/b4bcdb0257ebf101ed3453b2650d5996?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Chance Meser</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251790">
		March 12, 2015 at 3:57 pm</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251790#respond' onclick='return addComment.moveForm( "comment-251790", "251790", "respond", "37" )' aria-label='Reply to Chance Meser'> &middot; Reply</a></span>		 
		</div>
		<p>My code is saying: </p>
<p>&#8216;main.exe': Loaded &#8216;C:\Users\Chance\Documents\Visual Studio 2010\Projects\main\Debug\main.exe&#8217;, Symbols loaded.<br />
&#8216;main.exe': Loaded &#8216;C:\Windows\SysWOW64\ntdll.dll&#8217;, Cannot find or open the PDB file<br />
&#8216;main.exe': Loaded &#8216;C:\Windows\SysWOW64\kernel32.dll&#8217;, Cannot find or open the PDB file<br />
&#8216;main.exe': Loaded &#8216;C:\Windows\SysWOW64\KernelBase.dll&#8217;, Cannot find or open the PDB file<br />
&#8216;main.exe': Loaded &#8216;C:\Program Files (x86)\Norton 360\NortonData\21.6.0.32\Definitions\BASHDefs\20150309.001\UMEngx86.dll&#8217;, Cannot find or open the PDB file<br />
&#8216;main.exe': Loaded &#8216;C:\Windows\SysWOW64\msvcp100d.dll&#8217;, Symbols loaded.<br />
&#8216;main.exe': Loaded &#8216;C:\Windows\SysWOW64\msvcr100d.dll&#8217;, Symbols loaded.<br />
The thread &#8216;Win32 Thread&#8217; (0xa24) has exited with code 0 (0x0).<br />
The program &#8216;[3856] main.exe: Native&#8217; has exited with code 0 (0x0).</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-251795">
		<div id="div-comment-251795" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-251795">
		March 13, 2015 at 9:46 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=251795#respond' onclick='return addComment.moveForm( "comment-251795", "251795", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Probably a better question for Google or Stack Overflow.  Try <a href="http://stackoverflow.com/questions/15937707/error-message-cannot-find-or-open-the-pdb-file" onclick="_gaq.push(['_trackEvent', 'outbound-comment', 'http://stackoverflow.com/questions/15937707/error-message-cannot-find-or-open-the-pdb-file', 'this thread']);" rel="nofollow">this thread</a>.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 clearfix" id="comment-252334">
		<div id="div-comment-252334" class="clearfix comment-container">
		<div class="comment-author vcard">
		<img alt='' src='http://2.gravatar.com/avatar/e1ed0824147c30535949adbb296096b6?s=65&#038;d=mm&#038;r=g' srcset='http://2.gravatar.com/avatar/e1ed0824147c30535949adbb296096b6?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Win</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-252334">
		May 4, 2015 at 7:18 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=252334#respond' onclick='return addComment.moveForm( "comment-252334", "252334", "respond", "37" )' aria-label='Reply to Win'> &middot; Reply</a></span>		 
		</div>
		<p>How does memory know what&nbsp;&nbsp;type is stored there in memory. I mean how does it identify that this byte is type of int, and maybe another byte is type of char ,etc. Is there any value that tell the memory what type of this byte is.</p>
<p>I&#8217;m sorry for my bad English. I hope you can understand what I mean.</p>
<p>Thank you.</p>
		</div>
<ul class="children">
		<li class="comment byuser comment-author-alex bypostauthor odd alt depth-2 clearfix" id="comment-252335">
		<div id="div-comment-252335" class="clearfix comment-container bypostauthor">
		<div class="comment-author vcard">
		<img alt='' src='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=65&#038;d=mm&#038;r=g' srcset='http://1.gravatar.com/avatar/a4e62d28c29f6c864923207d4c17993b?s=130&amp;d=mm&amp;r=g 2x' class='avatar avatar-65 photo' height='65' width='65' />		<span class="authorname">Alex</span>
		</div>
				<div class="comment-meta commentmetadata">
		<a href="http://www.learncpp.com/cpp-tutorial/21-basic-addressing-and-variable-declaration/#comment-252335">
		May 4, 2015 at 10:47 am</a>
        <span class="comment-reply-link"><a class='comment-reply-link' href='/cpp-tutorial/21-basic-addressing-and-variable-declaration/?replytocom=252335#respond' onclick='return addComment.moveForm( "comment-252335", "252335", "respond", "37" )' aria-label='Reply to Alex'> &middot; Reply</a></span>		 
		</div>
		<p>Memory doesn&#8217;t know what type of data is stored in it.  It&#8217;s just dumb storage.</p>
<p>All variables have an associated address that gets assigned to the variable, either by the compiler at compile time or by the OS at runtime.</p>
<p>The program also keeps a separate table of meta-information (called a symbol table) that includes things like the variable&#8217;s name, type, size, and scope.</p>
<p>Between the address and the symbol table, the program has everything it needs to read/write values of a particular data type into memory.</p>
		</div>
</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
	
	</ul>
	<!-- / Comment List -->

	



						<div id="respond" class="comment-respond">
				<h3 id="reply-title" class="comment-reply-title">Leave a Comment <small><a rel="nofollow" id="cancel-comment-reply-link" href="/cpp-tutorial/21-basic-addressing-and-variable-declaration/#respond" style="display:none;">Cancel reply</a></small></h3>
									<form action="http://www.learncpp.com/blog/wp-comments-post.php" method="post" id="commentform" class="comment-form">
																										<p><input class="text author" id="author" name="author" type="text" value="" size="30" tabindex="1" />&nbsp;&nbsp;<label for="author"><strong>Name </strong> (required)</label></p>
<p><input class="text email" id="email" name="email" type="text" value="" size="30"  tabindex="2" />&nbsp;&nbsp;<label for="email"><strong>Email</strong> (will not be published) (required)</label></p>
<p><input class="text url" id="url" name="url" type="text" value="" size="30"  tabindex="3" />&nbsp;&nbsp;<label for="url">Website</label></p>
<p class="aiowps-captcha"><label>Please enter an answer in digits:</label><div class="aiowps-captcha-equation"><strong>5 &#215; one = <input type="hidden" name="aiowps-captcha-string-info" id="aiowps-captcha-string-info" value="MTQzMjE4Nzk2MXR5bTdtZjVxZ3o3ZGJwYWozMW04NQ==" /><input type="hidden" name="aiowps-captcha-temp-string" id="aiowps-captcha-temp-string" value="1432187961" /><input type="text" size="2" length="2" id="aiowps-captcha-answer" name="aiowps-captcha-answer" value="" /></strong></div></p>												<p><textarea name="comment" id="comment" rows="10" cols="10" tabindex="4"></textarea></p>						<div class="useCode">Put C++ code inside [code][/code] tags to use the syntax highlighter</div>
						<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='37' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="8fc9466b3e" /></p>		<p class="antispam-group antispam-group-q" style="clear: both;">
			<label>Current ye@r <span class="required">*</span></label>
			<input type="hidden" name="antspm-a" class="antispam-control antispam-control-a" value="2015" />
			<input type="text" name="antspm-q" class="antispam-control antispam-control-q" value="3.5" />
		</p>
		<p class="antispam-group antispam-group-e" style="display: none;">
			<label>Leave this field empty</label>
			<input type="text" name="antspm-e-email-url-website" class="antispam-control antispam-control-e" value="" />
		</p>
<p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="178"/></p>					</form>
							</div><!-- #respond -->
			<div class='code-block code-block-7' style='margin:8px 0px;'><div class="cf_monitor">
<div id="Content Below Comment">
    <script type="text/javascript">
    var width = 0;
    if (document.getElementById('middle'))
        width = document.getElementById('middle').clientWidth;
    else
        width = document.innerWidth;

    if (width >= 768)
    {
        try {
            window._mNHandle.queue.push(function () {
		        window._mNDetails.loadTag("Content Below Comment", "728x90", "287758258");
		        });
		    }
        catch (error) {}
    }
	</script>
</div>
</div></div>		
    

</td>
<!-- / Main Column -->

<!-- Right Inner Sidebar -->

<!-- Right Sidebar -->
<td id="right">

	<div id="text-7" class="widget widget_text">			<div class="textwidget"><div class="cf_monitor">
<!-- Post - Right Sidebar - Wide Sky -->
<script type="text/javascript">
    google_ad_client = "ca-pub-0588844875925051";
    google_ad_slot = "0955932809";
    google_ad_width = 160;
    google_ad_height = 600;
</script>
<!-- Post - Right Sidebar - Wide Sky -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
		</div>
</td>
<!-- / Right Sidebar -->

</tr>
<!-- / Main Body -->


</table><!-- / layout -->
</div><!-- / container -->
</div><!-- / wrapper -->
		<!-- Full Width Footer -->
		<div id="footer" class="full-width">
    LearnCpp.com -- Teaching you how to program in C++ since May 25, 2007.&nbsp;&nbsp;Copyright &copy; 2015 <a href="http://www.learncpp.com/">Learn C++</a> - All Rights Reserved<br />Powered by <a href="http://wordpress.org/">WordPress</a> &amp; <a href="http://forum.bytesforall.com/">Atahualpa</a>    
    
    
	<script type="text/javascript">
		window.WPCOM_sharing_counts = {"http:\/\/www.learncpp.com\/cpp-tutorial\/21-basic-addressing-and-variable-declaration\/":37};
		window.WPCOM_jetpack = true;
				window.WPCOM_site_ID = 3928254;
			</script>
	<div id="sharing_email" style="display: none;">
		<form action="/cpp-tutorial/21-basic-addressing-and-variable-declaration/" method="post">
			<label for="target_email">Send to Email Address</label>
			<input type="email" name="target_email" id="target_email" value="" />

			
				<label for="source_name">Your Name</label>
				<input type="text" name="source_name" id="source_name" value="" />

				<label for="source_email">Your Email Address</label>
				<input type="email" name="source_email" id="source_email" value="" />

						<input type="text" id="jetpack-source_f_name" name="source_f_name" class="input" value="" size="25" autocomplete="off" />
			<script> document.getElementById('jetpack-source_f_name').value = ''; </script>
			
			<img style="float: right; display: none" class="loading" src="http://www.learncpp.com/blog/wp-content/plugins/jetpack/modules/sharedaddy/images/loading.gif" alt="loading" width="16" height="16" />
			<input type="submit" value="Send Email" class="sharing_send" />
			<a rel="nofollow" href="#cancel" class="sharing_cancel">Cancel</a>

			<div class="errors errors-1" style="display: none;">
				Post was not sent - check your email addresses!			</div>

			<div class="errors errors-2" style="display: none;">
				Email check failed, please try again			</div>

			<div class="errors errors-3" style="display: none;">
				Sorry, your blog cannot share posts by email.			</div>
		</form>
	</div>
		<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script>
				<script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-google-plus-1' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomgoogle-plus-1', 'menubar=1,resizable=1,width=480,height=550' );
				return false;
			});
		});
		</script>
							<script type="text/javascript">
			jQuery(document).on('ready', function(){
				jQuery('body').on('click', 'a.share-pinterest', function(e){
					e.preventDefault();

					// Load Pinterest Bookmarklet code
					var s = document.createElement("script");
					s.type = "text/javascript";
					s.src = window.location.protocol + "//assets.pinterest.com/js/pinmarklet.js?r=" + ( Math.random() * 99999999 );
					var x = document.getElementsByTagName("script")[0];
					x.parentNode.insertBefore(s, x);

					// Trigger Stats
					var s = document.createElement("script");
					s.type = "text/javascript";
					s.src = this + ( this.toString().indexOf( '?' ) ? '&' : '?' ) + 'js_only=1';
					var x = document.getElementsByTagName("script")[0];
					x.parentNode.insertBefore(s, x);
				});
			});
			</script>
		<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/akismet/_inc/form.js?ver=3.1.1'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-includes/js/comment-reply.min.js?ver=4.2.2'></script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/anti-spam/js/anti-spam-3.5.js'></script>
<script type='text/javascript' src='http://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201521'></script>
<script type='text/javascript'>
/* <![CDATA[ */
var sharing_js_options = {"lang":"en","counts":"1"};
/* ]]> */
</script>
<script type='text/javascript' src='http://www.learncpp.com/blog/wp-content/plugins/jetpack/modules/sharedaddy/sharing.js?ver=3.5.3'></script>
<script type='text/javascript' src='http://stats.wp.com/e-201521.js' async defer></script>
<script type='text/javascript'>
	_stq = window._stq || [];
	_stq.push([ 'view', {v:'ext',j:'1:3.5.3',blog:'3928254',post:'37',tz:'-8',srv:'www.learncpp.com'} ]);
	_stq.push([ 'clickTrackerInit', '3928254', '37' ]);
</script>
		</div>
		<!-- / Full Width Footer -->

</body>
</html>
<!-- Dynamic page generated in 0.903 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2015-05-20 21:59:21 -->

<!-- Compression = gzip -->
<!-- super cache -->

