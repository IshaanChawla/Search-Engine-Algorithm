<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
      <title>Introduction to Java programming - Tutorial</title>
      <script type='text/javascript'>window.mod_pagespeed_start = Number(new Date());</script><link rel="stylesheet" type="text/css" href="http://www.vogella.com/css/A.articles.css.pagespeed.cf.R8TsdYc8Ks.css">
      <meta name="generator" content="DocBook XSL Stylesheets V1.77.1">
      <meta name="description" content="Introduction to Java programming This tutorial explains the installation and usage of the Java programming language. It also contains examples for standard programming tasks.">
      <link rel="shortcut icon" href="http://www.vogella.com/favicon.ico">
      <meta name="viewport" content="width=device-width, initial-scale=1">
   </head>
   <body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF">
      
      
      <!-- Google analytics (Jennifer) -->
      
      <script type="text/javascript">var _gaq=_gaq||[];_gaq.push(['_setAccount','UA-3967758-1']);_gaq.push(['_setDomainName','vogella.com']);_gaq.push(['_setAllowLinker',true]);_gaq.push(['_trackPageview']);(function(){var ga=document.createElement('script');ga.type='text/javascript';ga.async=true;ga.src=('https:'==document.location.protocol?'https://ssl':'http://www')+'.google-analytics.com/ga.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(ga,s);})();</script>
      
      
      
      <!-- Load jQuery -->
      <script type="text/javascript" src="http://www.vogella.com/javascript/jquery/jquery.js.pagespeed.jm.LynoS8h5RR.js"></script>
      
      <!-- jQuery Hide Buttons -->
      <script type="text/javascript">//<![CDATA[
var fixed=false;$(document).scroll(function(){if($(this).scrollTop()>955){if(!fixed){fixed=true;$('.bottom_left').css({display:'block'});$('.bottom_right').css({display:'block'});}}else{if(fixed){fixed=false;$('.bottom_left').css({display:'none'});$('.bottom_right').css({display:'none'});}}});
//]]></script>
      
      
      <!-- Lake Quincy Ads - old way now replaced with Lake Quincy Ads Responsive
<script type='text/javascript'>
	function _dmBootstrap(file) {
		var _dma = document.createElement('script');
		_dma.type = 'text/javascript';
		_dma.async = true;
		_dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
	}
	function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js');}
	(function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000);})();
</script>-->
      
      
      <!-- Lake Quincy Ads Responsive -->  
      <script type="text/javascript">var googletag=googletag||{};googletag.cmd=googletag.cmd||[];(function(){var gads=document.createElement('script');gads.async=true;gads.type='text/javascript';var useSSL='https:'==document.location.protocol;gads.src=(useSSL?'https:':'http:')+'//www.googletagservices.com/tag/js/gpt.js';var node=document.getElementsByTagName('script')[0];node.parentNode.insertBefore(gads,node);})();</script>
      
      <script type="text/javascript">googletag.cmd.push(function(){var mapping=googletag.sizeMapping().addSize([320,700],[300,250]).addSize([750,200],[300,250]).addSize([1170,200],[728,90]).build();googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/right',[160,600],'ad-left').addService(googletag.pubads()).setTargeting('left');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/beforeTOC',[[300,250],[728,90]],'ad-beforeTOC').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('beforeTOC');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/inBetween01',[[300,250],[728,90]],'ad-inBetween01').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('inBetween01');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/inBetween02',[[300,250],[728,90]],'ad-inBetween02').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('inBetween02');googletag.defineSlot('/6839/lqm.javaeclipseandroid.site/inBetween03',[[300,250],[728,90]],'ad-inBetween03').defineSizeMapping(mapping).addService(googletag.pubads()).setTargeting('inBetween03');googletag.pubads().enableSingleRequest();googletag.enableServices();});</script>
      
      <div id="headerpart">
         
         	
         <div id="logo">
            		<a title="vogella.com" href="http://www.vogella.com">
               			<img src="http://www.vogella.com/img/logo/xindex_logo.png.pagespeed.ic.W70tcDQqll.png" alt="vogella.com"> 
               		</a>
            	
         </div> 
         <!-- logo -->
         	
         	
         <div id="topnav">
            		
            <ul id="home" class="topnav">
               			
               <li id="home-icon"><a href="http://www.vogella.com/"></a></li>
               			
               <li class="currentpage"> <a href="http://www.vogella.com/tutorials/">Tutorials</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/tutorials/android.html">Android Programming</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/eclipseide.html">Eclipse IDE</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/eclipse.html">Eclipse RCP/Plug-ins</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/versioncontrol.html">Version Control</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/web.html">Web</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/java.html">Java</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/technology.html">Technology</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/google.html">Google</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/algorithms.html">Algorithms</a></li>
                     					
                     <li><a href="http://www.vogella.com/tutorials/designpattern.html">Design Pattern</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               			
               <li><a href="http://www.vogella.com/training/">Services</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/training/android/index.html">Android Development Training</a>
                        						
                        <ul>
                           							
                           <li><a href="http://www.vogella.com/training/android/androidprofessional.html">Android Professional</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/android/androidtesting.html">Android Testing and Appl. Optimization</a></li>
                           						
                        </ul>
                        					
                     </li>
                     					
                     <li><a href="http://www.vogella.com/training/eclipse/index.html">Eclipse Development Training</a>
                        						
                        <ul>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsercp.html">Eclipse RCP</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipseide.html">Eclipse IDE Expert</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsercpmigration.html">Eclipse RCP Migration</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsecontribution.html">	Contributing to Eclipse</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipseplugin.html">Eclipse IDE Plug-in Development</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/tycho.html">Maven/Tycho</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/rcpjavaeespring.html">Eclipse RCP with Java EE and Spring</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipseoxygen.html">oXygen in Eclipse</a></li>
                           							
                           <li><a href="http://www.vogella.com/training/eclipse/eclipsenattable.html">NatTable</a></li>
                           						
                        </ul>
                        					
                     </li>
                     					
                     <li><a href="http://www.vogella.com/training/git.html">Git Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/groovy.html">Groovy Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/gradle.html">Gradle Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/java.html">Java Training</a></li>
                     					
                     <li><a href="http://www.vogella.com/training/spring.html">Spring Workshop</a></li>
                     					
                     <li><a href="http://www.vogella.com/consulting/">Expert Consulting</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/products/">Products</a>
                  				
                  <ul>
                     					
                     <li><a href="http://saneclipse.vogella.com">saneclipse</a></li>
                     					
                     <li><a href="http://codemodify.vogella.com">CodeModify</a></li>
                     					
                     <li><a href="http://preferencespy.vogella.com">PreferenceSpy</a></li>
                     					
                     <!--<li><a href="http://e4tools.vogella.com">e4 tools</a></li>
					<li><a href="http://e4perspectiveswitcher.vogella.com">e4 perspectiveSwitcher</a></li>-->
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/books/">Books</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/books/eclipsecontribution.html">Contributing to the Eclipse Project</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/eclipsercp.html">Eclipse RCP</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/eclipseide.html">Eclipse IDE</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/git.html">Git</a></li>
                     					
                     <li><a href="http://www.vogella.com/books/android.html">Android SQlite and ContentProvider</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/company/">Company</a>
                  				
                  <ul>
                     					
                     <li><a href="http://www.vogella.com/aboutvogella.html">About us</a></li>
                     					
                     <li><a href="http://www.vogella.com/people/index.html">People at vogella</a></li>
                     					
                     <li><a href="http://www.vogella.com/customers.html" onclick="_gaq.push(['_trackEvent', 'Customers', 'clicked', 'Header']);">Reference Customers</a></li>
                     					
                     <li><a href="http://blog.vogella.com/">Blog</a></li>
                     					
                     <li><a href="http://www.vogella.com/jobs/">Jobs</a></li>
                     					
                     <li><a href="http://www.vogella.com/faq.html">FAQ</a></li>
                     					
                     <li><a href="http://www.vogella.com/legal.html">Legal</a></li>
                     				
                  </ul>
                  			
               </li>
               			
               <li><a href="http://www.vogella.com/support.html">Donate</a></li>
               			
               <li><a href="http://www.vogella.com/contact.html">Contact us</a></li>
               		
            </ul>
            	
         </div>
         <!-- topnav -->
         	
         
         	
         <div id="searchfixed">
            		
            <form action="http://www.vogella.com/search.html" id="cse-search-box">
               			
               <div id="searchwrapper">
                  
                  				<input type="hidden" name="cx" value="partner-pub-3851443674951530:3991491935">
                  				<input type="hidden" name="cof" value="FORID:10">
                  				<input type="hidden" name="ie" value="UTF-8">
                  				<input type="text" placeholder="Search" id="search_field" name="q" size="55">
                  				<input type="image" src="http://www.vogella.com/img/icons/xsrch.png.pagespeed.ic.BP8TtuQRzJ.png" id="search_button" name="sa" alt="Search">
                  			
               </div>
               		
            </form>
            	
         </div> 
         <!-- searchfixed -->
         
         
      </div> 
      <!-- headerpart -->
      
      
      <div id="leftcol">
         
         	<br>
         	<br>
         	
         	<a href="http://www.vogella.com/support.html">
            		<img src="http://www.vogella.com/img/common/140x150xvogella-donate.png.pagespeed.ic.gMuY8kQC6X.png" width="140" height="150" alt="Support free tutorials" title="Support free tutorials" onclick="_gaq.push(['_trackEvent', 'Donations', 'clicked', 'Top tutorial']);"></a>
         
         	<br>
         	<br>
         
         	<script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
         	
         <!-- LeftColumn -->
         	<ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-3851443674951530" data-ad-slot="6294971031"></ins>
         	<script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
         
         	<p></p>
         	
         	<br>
         	<br>
         
         	
         <!-- Nonresponsive Lake Quincy 160x600 Wide Skycraper code
	<div data-type="ad" data-publisher="lqm.javaeclipseandroid.site" data-zone="right" data-format="160x600"></div>-->
         	
         	
         <!-- Responsive Lake Quincy Ads -->
         	
         <div id="ad-left">
            		<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-left');});</script>
            	</div>
         
      </div> 
      <!-- leftcolumn -->
      
      
      <div id="rightcol">
         
         	
         <!-- vogellas own advertising for training and books --> 	
         	
         <p class="training-bg">
            		<a class="image-z" href="http://www.vogella.com/training/" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'whole Box']);">
               			<img src="http://www.vogella.com/img/training/200x364xvogellatraining_ad.png.pagespeed.ic.KQGlbyMRAP.png" height="364" width="200" alt="vogella training">
               		</a>
            		<a class="btn-training button1" href="http://www.vogella.com/training/" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'training']);">Training</a>
            		<a class="btn-training button2" href="http://www.vogella.com/books/index.html" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'books']);">Books</a>
            	
         </p> 
         	
         	
         <div class="bottom_right">
            		
            <div class="social_media">
               			<a href="http://www.twitter.com/vogellacompany">
                  				
                  <h1>FOLLOW<br>ME ON
                  </h1> 
                  				<img src="http://www.vogella.com/img/tutoriallinks/xtwitter.png.pagespeed.ic.5z4YhYIkb2.png" alt="Follow me on twitter">
                  			</a>
               		
            </div>
            <!-- social_media -->
            
            		
            <div class="social_media">
               			<a rel="me" href="https://profiles.google.com/104044918586174763681">
                  				
                  <h1>FOLLOW<br>ME ON
                  </h1> 
                  				<img src="http://www.vogella.com/img/tutoriallinks/xgoogle_plus.png.pagespeed.ic.d6W0KZShGF.png" alt="Follow me on Google+">
                  			</a>
               		
            </div>
            <!-- social_media -->
            	
         </div> 
         <!-- bottom_right -->
         	
         	
         <div class="bottom_left">
            	
            <div class="services">
               		<a href="http://www.vogella.com/training/index.html">
                  	<img src="http://www.vogella.com/img/tutoriallinks/xtraining.png.pagespeed.ic.xjFDFI8z_E.png" alt="Get training" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'Fix buttom left training']);">
                  	
                  <h1>GET TRAINING</h1>
                  	</a>
               
            </div>
            <!-- services -->
            	
            <div class="services">
               	<a href="http://www.vogella.com/books/index.html">
                  	<img src="http://www.vogella.com/img/tutoriallinks/books.png.pagespeed.ce.iDpNUUudib.png" alt="Purchase books" onclick="_gaq.push(['_trackEvent', 'vogella Services', 'clicked', 'Fix buttom left books']);">
                  	
                  <h1>PURCHASE BOOKS</h1>
                  	</a>
               
            </div>
            <!-- services -->
            	
            <div class="services">	
               	<a href="http://www.vogella.com/support.html">
                  	<img src="http://www.vogella.com/img/tutoriallinks/xdonate.png.pagespeed.ic.DDVinfleA6.png" alt="Support free tutorials" onclick="_gaq.push(['_trackEvent', 'Donations', 'clicked', 'Fix buttom left']);">
                  	
                  <h1>SUPPORT FREE TUTORIAL</h1>
                  	</a>
               
               
            </div> 
            <!-- services -->       
            
         </div> 
         <!-- bottom_left -->
         
         
      </div> 
      <!--rightcol-->
      
      
      <div class="article">
         <div class="titlepage">
            <div>
               <div>
                  <h2 class="title"><a name="d421206e1"></a>Introduction to Java programming - Tutorial
                  </h2>
               </div>
               <div>
                  <div class="author">
                     <h3 class="author"><span class="firstname">Lars</span> <span class="surname">Vogel</span></h3>
                  </div>
               </div>
               <div>
                  <p class="releaseinfo">
                     
                  </p>
                  <p>Version 2.6</p>
                  <p class="releaseinfo">
                     
                  </p>
               </div>
               <div>
                  <p class="copyright">Copyright ? 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 vogella GmbH</p>
               </div>
               <div>
                  <p class="pubdate">02.04.2015</p>
               </div>
               <div>
                  <div class="abstract"><a name="abstract"></a><p class="title"><b>Introduction to Java programming</b></p>
                     <p>
                        This tutorial explains the installation and usage of the Java
                        programming language. It also
                        contains examples
                        for standard
                        programming tasks.
                        
                     </p>
                  </div>
               </div>
            </div>
            <div>
               <div xmlns:fo="http://www.w3.org/1999/XSL/Format" id="ad-beforeTOC"><script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-beforeTOC');});</script></div>
            </div>
            <hr>
         </div>
         <div class="toc">
            <p><b>Table of Contents</b></p>
            <dl>
               <dt><span class="section"><a href="#javaintroduction">1. Introduction to Java</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javahistory">1.1. History</a></span></dt>
                     <dt><span class="section"><a href="#javaoverview_openjdk">1.2. Java and open source software</a></span></dt>
                     <dt><span class="section"><a href="#javaoverview">1.3. Java virtual machine</a></span></dt>
                     <dt><span class="section"><a href="#javaoverview_jrejdk">1.4. Java Runtime Environment vs. Java Development Kit</a></span></dt>
                     <dt><span class="section"><a href="#javacharacteristics">1.5. Characteristics of Java</a></span></dt>
                     <dt><span class="section"><a href="#javadevelopmend">1.6. Development Process with Java</a></span></dt>
                     <dt><span class="section"><a href="#java_garbagecollector">1.7. Garbage collector</a></span></dt>
                     <dt><span class="section"><a href="#java_classpath">1.8. Classpath</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#java_installation">2. Installation of Java</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#java_installation1">2.1. Check installation</a></span></dt>
                     <dt><span class="section"><a href="#java_installation_ubuntu">2.2. Install Java on Ubuntu</a></span></dt>
                     <dt><span class="section"><a href="#java_installation_windows">2.3. Install Java on MS Windows</a></span></dt>
                     <dt><span class="section"><a href="#java_installation_other">2.4. Installation problems and other operating systems</a></span></dt>
                     <dt><span class="section"><a href="#java_installation3">2.5. Validate installation</a></span></dt>
                     <dt><span class="section"><a href="#java_installation_32or64">2.6. How can you tell you are using a 32 bit or 64 bit version of
                              Java?
                              </a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#firstjava">3. Exercise: Write, compile and run a Java program</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#firstjava_source">3.1. Write source code</a></span></dt>
                     <dt><span class="section"><a href="#firstjava_compile">3.2. Compile and run your Java program</a></span></dt>
                     <dt><span class="section"><a href="#firstjava_classpath">3.3. Using the classpath</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#java_types">4. Java language structure</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javadef_basics">4.1. Basics: Package, Class and Object</a></span></dt>
                     <dt><span class="section"><a href="#javadef_package">4.2. Package</a></span></dt>
                     <dt><span class="section"><a href="#javadef_class">4.3. Class</a></span></dt>
                     <dt><span class="section"><a href="#javadef_object">4.4. Object</a></span></dt>
                     <dt><span class="section"><a href="#javadef_inheritance">4.5. Inheritance</a></span></dt>
                     <dt><span class="section"><a href="#javadef_objectsuperclass">4.6. Object as superclass</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#java_interfaces">5. Java interfaces</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javadef_interface">5.1. What is an interface in Java?</a></span></dt>
                     <dt><span class="section"><a href="#javadef_interfacemethods">5.2. Abstract, default and static methods in Interfaces</a></span></dt>
                     <dt><span class="section"><a href="#javadef_interfaceimplementing">5.3. Implementing Interfaces</a></span></dt>
                     <dt><span class="section"><a href="#javadef_interfaceevolving">5.4. Evolving interfaces</a></span></dt>
                     <dt><span class="section"><a href="#javadef_interface_multiple">5.5. Multiple inheritance of methods</a></span></dt>
                     <dt><span class="section"><a href="#javadef_functionalinterfaces">5.6. Functional interfaces</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#javadef">6. Java basic terms</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javadef_override">6.1. Override methods and the @Override annotation</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#javadef_types">7. The type system of Java</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javadef_types1">7.1. Primitives and references</a></span></dt>
                     <dt><span class="section"><a href="#javadef_types_primitives">7.2. Primitives </a></span></dt>
                     <dt><span class="section"><a href="#javadef_types_references">7.3. Reference types </a></span></dt>
                     <dt><span class="section"><a href="#javadef_types_autoboxing">7.4. Autoboxing and wrapper types</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#javadef_variables">8. Variables and methods</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javadef_variable">8.1. Variable</a></span></dt>
                     <dt><span class="section"><a href="#javadef_instancevariable">8.2. Instance variable</a></span></dt>
                     <dt><span class="section"><a href="#javadef_localvariable">8.3. Local variable</a></span></dt>
                     <dt><span class="section"><a href="#javadef_method">8.4. Methods</a></span></dt>
                     <dt><span class="section"><a href="#javadef_mainmethod">8.5. Main method</a></span></dt>
                     <dt><span class="section"><a href="#javadef_constructor">8.6. Constructor</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#modifier">9. Modifiers</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javadef_accessmodifier">9.1. Access modifiers</a></span></dt>
                     <dt><span class="section"><a href="#javadefinitions_othermodifiers">9.2. Other modifiers</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#javaimports">10. Import statements</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javaimports_definition">10.1. Usage of import statements</a></span></dt>
                     <dt><span class="section"><a href="#javaimport_staticimports">10.2. Static imports</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#java_additionaldefinition">11. More Java language constructs</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javadef_classmethod">11.1. Class methods and class variables</a></span></dt>
                     <dt><span class="section"><a href="#javadef_abstractclass">11.2. Abstract class and methods</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#cheatsheets">12. Cheat Sheets</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#cheatsheets_class">12.1. Working with classes</a></span></dt>
                     <dt><span class="section"><a href="#cheatsheets_localvariable">12.2. Working with local variable</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#ide">13. Integrated Development Environment</a></span></dt>
               <dt><span class="section"><a href="#exercises_starter">14. Exercises - Creating Java objects and methods</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#exercises_starter1">14.1. Create a Person class and instantiate it</a></span></dt>
                     <dt><span class="section"><a href="#exercises_starter2">14.2. Use constructor</a></span></dt>
                     <dt><span class="section"><a href="#exercises_starter3">14.3. Define getter and setter methods</a></span></dt>
                     <dt><span class="section"><a href="#exercises_starter4">14.4. Create an Address object</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#exercises_starter_solution">15. Solution - Creating Java objects and methods</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#exercises_starter1_solution">15.1. Create a Person class and instantiate it</a></span></dt>
                     <dt><span class="section"><a href="#exercises_starter2_solution">15.2. Use constructor</a></span></dt>
                     <dt><span class="section"><a href="#exercises_starter3solution">15.3. Define getter and setter methods</a></span></dt>
                     <dt><span class="section"><a href="#exercises_starter4solution">15.4. Solution - Create an Address object</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#languageconstructs">16. Java statements</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javalang_if">16.1. if-then and if-then-else</a></span></dt>
                     <dt><span class="section"><a href="#languageconstructsss1as2b">16.2. Switch</a></span></dt>
                     <dt><span class="section"><a href="#languageconstructs_comparison">16.3. Boolean Operations</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#loops">17. Loops in Java</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javalang_for">17.1. The for loop</a></span></dt>
                     <dt><span class="section"><a href="#javalang_while">17.2. The while loop</a></span></dt>
                     <dt><span class="section"><a href="#javalang_dowhile">17.3. The do while loop</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#arrays">18. Arrays</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#arrays_definition">18.1. Arrays in Java</a></span></dt>
                     <dt><span class="section"><a href="#arrays_forloop">18.2. Enhanced for loop for Arrays and Collections</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#javastring">19. Strings</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#javastringdefinition">19.1. Strings in Java</a></span></dt>
                     <dt><span class="section"><a href="#javastringpool">19.2. String pool in Java</a></span></dt>
                     <dt><span class="section"><a href="#javastringcompare">19.3. Compare Strings in Java</a></span></dt>
                     <dt><span class="section"><a href="#javastringhandling">19.4. Working with Strings</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#lambdas">20. Lambdas</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#lambdas_definition">20.1. What are lambdas?</a></span></dt>
                     <dt><span class="section"><a href="#lambdas_closures">20.2. Difference between a lambda expression and a closure</a></span></dt>
                     <dt><span class="section"><a href="#lambdas_purpose">20.3. Purpose of lambda expressions</a></span></dt>
                     <dt><span class="section"><a href="#lambdas_methodreferences">20.4. Using method references</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#streams">21. Streams</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#lambdas_definition">21.1. What are Streams in Java 8?</a></span></dt>
                     <dt><span class="section"><a href="#lambdas_closures">21.2. IntStream</a></span></dt>
                     <dt><span class="section"><a href="#lambdas_reduction">21.3. Reduction operations with streams and lambdas</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#conversion">22. Type Conversion</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#Conversion_tostring">22.1. Conversion to String</a></span></dt>
                     <dt><span class="section"><a href="#conversion_tonumber">22.2. Conversion from String to Number</a></span></dt>
                     <dt><span class="section"><a href="#conversion_toint">22.3. Double to int</a></span></dt>
                     <dt><span class="section"><a href="#conversion_sqldate">22.4. SQL Date conversions</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#scheduletasks">23. Schedule tasks</a></span></dt>
               <dt><span class="section"><a href="#supportandlicense">24. About this website</a></span></dt>
               <dd>
                  <dl>
                     <dt><span class="section"><a href="#thankyou">24.1. Donate to support free tutorials</a></span></dt>
                     <dt><span class="section"><a href="#questions">24.2. Questions and discussion</a></span></dt>
                     <dt><span class="section"><a href="#thankyou">24.3. License for this tutorial and its code</a></span></dt>
                  </dl>
               </dd>
               <dt><span class="section"><a href="#resources">25. Links and Literature</a></span></dt>
            </dl>
         </div>
         <script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
         
         <!-- Responsive - After Table of Content -->
         <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-3851443674951530" data-ad-slot="4470606330" data-ad-format="auto"></ins>
         <script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="javaintroduction"></a>1.&nbsp;Introduction to Java
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javahistory"></a>1.1.&nbsp;History
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Java is a programming language created by James Gosling from
                  Sun Microsystems (Sun) in 1991. The first publicly available version
                  of
                  Java
                  (Java 1.0) was released in 1995.
                  
               </p>
               <p>
                  Sun Microsystems was
                  acquired by the Oracle
                  Corporation in 2010.
                  Oracle has now the
                  steermanship for Java.
                  
               </p>
               <p>
                  Over time new enhanced versions of Java have been
                  released.
                  The current
                  version of Java is Java 1.7 which is also known
                  as
                  <em class="wordasword">Java 7</em>.
                  
               </p>
               <p>
                  From the Java programming language the
                  <em class="wordasword">Java platform</em>
                  evolved.
                  The Java platform allows software developers to write program
                  code in
                  other
                  languages than
                  the Java programming language
                  which still runs
                  on
                  the
                  Java virtual
                  machine. The
                  <em class="wordasword">Java platform</em>
                  is usually associated with the
                  <em class="wordasword">Java virtual machine</em>
                  and the
                  <em class="wordasword">Java core libraries</em>.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javaoverview_openjdk"></a>1.2.&nbsp;Java and open source software
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  In 2006 Sun started to make Java available under the GNU General
                  Public License (GPL). Oracle continues this project called
                  <em class="wordasword">OpenJDK</em>.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javaoverview"></a>1.3.&nbsp;Java virtual machine
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The Java
                  virtual
                  machine (JVM) is a software implementation of a
                  computer that
                  executes programs like a real machine.
                  
               </p>
               <p>
                  The Java virtual machine is written specifically for a
                  specific
                  operating system, e.g., for Linux a special implementation is required
                  as well as for Windows.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xjvmintroduction10.png.pagespeed.ic.BuOJYCakv4.png" alt=""></div>
               <p>
                  
               </p>
               <p>
                  Java programs are compiled by the Java compiler into
                  <em class="wordasword">bytecode</em>.
                  The Java virtual machine interprets this
                  <em class="wordasword">bytecode</em>
                  and
                  executes
                  the Java program.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javaoverview_jrejdk"></a>1.4.&nbsp;Java Runtime Environment vs. Java Development Kit
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A Java distribution typically comes in two flavors, the
                  <em class="wordasword">Java Runtime Environment</em>
                  (JRE)
                  and the
                  <em class="wordasword">Java Development Kit</em>
                  (JDK).
                  
               </p>
               <p>
                  The Java runtime environment (JRE) consists of the JVM and the
                  Java class libraries. Those contain the
                  necessary functionality to start
                  Java
                  programs.
                  
               </p>
               <p>
                  The JDK additionally contains
                  the development tools necessary to
                  create Java programs. The JDK therefore consists of a
                  Java compiler,
                  the
                  Java
                  virtual machine and the Java class libraries.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javacharacteristics"></a>1.5.&nbsp;Characteristics of Java
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The target of Java is to write a program once and then run
                  this
                  program on multiple operating systems.
                  
               </p>
               <p>
                  Java has the following properties:
                  
               </p>
               <div class="itemizedlist">
                  <ul class="itemizedlist" type="disc">
                     <li class="listitem">
                        <p>Platform independent: Java programs use the Java virtual
                           machine
                           as
                           abstraction and do not access the operating system
                           directly. This makes Java programs highly portable. A Java
                           program
                           (which is standard-compliant and follows certain rules) can
                           run
                           unmodified on all supported platforms, e.g., Windows or Linux.
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>Object-orientated programming language:
                           Except the primitive
                           data types, all elements in Java are objects.
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>Strongly-typed programming language: Java is
                           strongly-typed,
                           e.g., the types of the used variables must be pre-defined and
                           conversion to
                           other objects is relatively strict, e.g., must be done
                           in most cases by the programmer.
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>Interpreted and compiled language: Java source
                           code is
                           transferred into the bytecode format which does not depend on the
                           target
                           platform. These bytecode instructions will be interpreted by
                           the Java
                           Virtual
                           machine (JVM). The JVM contains a so called
                           Hotspot-Compiler which
                           translates performance critical bytecode
                           instructions
                           into native
                           code instructions.
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>Automatic memory management: Java manages the memory
                           allocation and de-allocation for creating new objects. The
                           program
                           does not have direct access to the memory. The so-called garbage
                           collector automatically deletes objects to which no active pointer
                           exists.
                           
                        </p>
                     </li>
                  </ul>
               </div>
               <p>
                  
               </p>
               <p>
                  The Java syntax is similar to C++. Java is case-sensitive,
                  e.g.,
                  variables called
                  <code class="code">myValue</code>
                  and
                  <code class="code">myvalue</code>
                  are treated as different
                  variables.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadevelopmend"></a>1.6.&nbsp;Development Process with Java
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Java source files are written as plain text documents.
                  The programmer
                  typically writes Java source code in an
                  <em class="wordasword">Integrated Development Environment</em>
                  (IDE) for
                  programming. An IDE supports the programmer in the task of
                  writing code, e.g.,
                  it provides auto-formating of the source code,
                  highlighting of the
                  important keywords, etc.
                  
               </p>
               <p>
                  At some point the programmer (or the IDE) calls the Java
                  compiler
                  (<code class="filename">javac</code>).
                  The Java compiler creates the
                  <em class="wordasword">bytecode</em>
                  instructions.
                  These instructions are
                  stored in
                  <code class="filename">.class</code>
                  files and can be executed by the Java Virtual Machine.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="java_garbagecollector"></a>1.7.&nbsp;Garbage collector
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The JVM automatically re-collects the memory which is not
                  referred to
                  by other objects.
                  The Java
                  <em class="wordasword">garbage collector</em>
                  checks all object references and finds the objects which can be
                  automatically released.
                  
               </p>
               <p>
                  While the garbage collector relieves the programmer from the
                  need to
                  explicitly manage memory, the programmer still need to ensure
                  that he
                  does not keep unneeded object references, otherwise the
                  garbage
                  collector cannot release the associated memory. Keeping unneeded
                  object references are typically called
                  <em class="wordasword">memory leaks</em>.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="java_classpath"></a>1.8.&nbsp;Classpath
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The
                  <em class="wordasword">classpath</em>
                  defines where the Java compiler and Java runtime look
                  for
                  <code class="filename">.class</code>
                  files to
                  load. These instructions can be used in the Java program.
                  
               </p>
               <p>
                  For
                  example, if you want to use an external Java
                  library
                  you have to
                  add
                  this
                  library to your classpath to use it in your
                  program.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="java_installation"></a>2.&nbsp;Installation of Java
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="java_installation1"></a>2.1.&nbsp;Check installation
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  To run Java programs on your computer you must at least have the Java
                  runtime environment (JRE) installed. This might already be the case
                  on your machine.
                  You can test
                  is the JRE is installed and in your
                  current path by
                  opening a console
                  (if you are using
                  Windows: Win+R,
                  enter
                  <span class="guilabel">cmd</span>
                  and press Enter) and by typing in the
                  following command:
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">java -version </pre><p>
                  
               </p>
               <p>
                  If the JRE is installed and within your path, this commands
                  print
                  information about your Java installation. In this case you can skip
                  the Java installation description. You may want to note down if you
                  have a 32 bit or 64 bit version of Java, see
                  <a class="xref" href="#java_installation_32or64" title="2.6.&nbsp;How can you tell you are using a 32 bit or 64 bit version of Java?">Section&nbsp;2.6, &#8220;How can you tell you are using a 32 bit or 64 bit version of
                     Java?
                     &#8221;</a>.
                  
               </p>
               <p>
                  
               </p>
               <p>
                  If the command line
                  returns
                  the
                  information that the program could not
                  be
                  found,
                  you
                  have to
                  install
                  Java.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="java_installation_ubuntu"></a>2.2.&nbsp;Install Java on Ubuntu
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  On Ubuntu you can install Java 7 via the following command on
                  the
                  command line.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">sudo apt-get install openjdk-<span class="hl-number">7</span>-jdk </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="java_installation_windows"></a>2.3.&nbsp;Install Java on MS Windows
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  For Microsofts Windows, Oracle provides a native installer which
                  can be found on the Oracle website. The
                  central website for
                  installing
                  Java is located under the following URL and also contains
                  instructions how to install Java for other platforms.
                  
               </p>
               <p>
                  <a class="ulink" href="http://java.com" target="_top">java.com</a>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="java_installation_other"></a>2.4.&nbsp;Installation problems and other operating systems
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  If you have problems installing Java on your system,
                  search via Google
                  for
                  <span class="guilabel">
                     How to install JDK on
                     <em class="parameter"><code>YOUR_OS</code></em>
                     </span>.
                  This
                  should result
                  in
                  helpful links. Replace
                  <em class="parameter"><code>YOUR_OS</code></em>
                  with your
                  operating
                  system, e.g.,
                  Windows,
                  Ubuntu, Mac OS X, etc.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="java_installation3"></a>2.5.&nbsp;Validate installation
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Switch again to the command line and run the following command.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">java -version </pre><p>
                  
               </p>
               <p>The output should be similar to the following output.</p>
               <p>
                  
               </p><pre class="programlisting">java version "1.7.0_25"
OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.13.04.2)
OpenJDK 64-Bit Server VM (build 23.7-b01, mixed mode) </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="java_installation_32or64"></a>2.6.&nbsp;How can you tell you are using a 32 bit or 64 bit version of
                           Java?
                           
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  You can run a 32 bit or a 64 bit version of Java on a 64 bit system.
                  If you use
                  <code class="code">java -version</code>
                  and the output contains the "64-Bit" string you are using the 64 bit
                  version of Java otherwise your are using the 32 bit version. The
                  following is the output of a 64-bit version.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">java version "1.7.0_25"
OpenJDK Runtime Environment (IcedTea 2.3.10) (7u25-2.3.10-1ubuntu0.13.04.2)
OpenJDK 64-Bit Server VM (build 23.7-b01, mixed mode) </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="firstjava"></a>3.&nbsp;Exercise: Write, compile and run a Java program
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="firstjava_source"></a>3.1.&nbsp;Write source code
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The following Java program is developed under Linux using a text
                  editor and the command line.
                  The
                  process on other operating system
                  should be similar, but
                  is not
                  covered
                  in this description.
                  
               </p>
               <p>
                  Select or create a new directory which will be used for your Java
                  development. In this description the path
                  <code class="filename">\home\vogella\javastarter</code>
                  is used. On Microsoft Windows
                  you might want to use
                  <code class="filename">c:\temp\javastarter</code>.
                  This path is
                  called
                  <em class="wordasword">javadir</em>
                  in the following description.
                  
               </p>
               <p>
                  Open a text editor which supports plain text, e.g.,
                  <em class="wordasword">gedit</em>
                  under Linux or
                  <em class="wordasword">Notepad</em>
                  under Windows
                  and write the following source code.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><em class="hl-comment" style="color: #080">// a small Java program </em>
<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> HelloWorld {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    System.out.println(<span class="hl-string" style="color:blue">"Hello World"</span>);
  }
} </pre><p>
                  
               </p>
               <div class="warning" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Warning</h3>
                  <p>
                     Do not use a rich editor like Microsoft Word or LibreOffice for
                     writing Java code. If in doubt, google for "Plain text editor for
                     [your_OS]".
                     
                  </p>
               </div>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xfirstjava10.png.pagespeed.ic.-1pEz75_iy.png" alt="Writing Java programs in a text editor"></div>
               <p>
                  
               </p>
               <p>
                  Save the source code in your
                  <em class="wordasword">javadir</em>
                  directory with the
                  <code class="filename">HelloWorld.java</code>
                  filename. The name of a Java source
                  file must always equal
                  the class
                  name (within the source code)
                  and end
                  with the
                  <code class="filename">.java</code>
                  extension. In this example
                  the
                  filename must be
                  <code class="filename">HelloWorld.java</code>,
                  because
                  the
                  class is called
                  <code class="code">HelloWorld</code>.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="firstjava_compile"></a>3.2.&nbsp;Compile and run your Java program
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Open a shell for command line access.
                  
               </p>
               <div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Tip</h3>
                  <p>
                     If you don't know how to do this, google for "How to open a
                     shell under [your_OS]".
                     
                  </p>
               </div>
               <p>
                  Switch to the
                  <em class="wordasword">javadir</em>
                  directory with the command
                  <code class="code">cd javadir</code>,
                  for
                  example, in the above example
                  via the
                  <code class="code">
                     cd \home\vogella\javastarter
                     </code>
                  command.
                  Use the
                  <code class="code">ls</code>
                  command (<code class="code">dir</code>
                  under Microsoft Windows) to verify
                  that
                  the source file is in the
                  directory.
                  
               </p>
               <p>
                  Compile your Java source file into a class file with the
                  following command.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">javac HelloWorld.java </pre><p>
                  
               </p>
               <p>
                  Afterwards list again the content of the directory with the
                  <code class="code">ls</code>
                  or
                  <code class="code">dir</code>
                  command. The
                  directory contains now a file
                  <code class="filename">HelloWorld.class</code>. If you
                  see
                  this
                  file, you have successfully compiled your first Java source
                  code
                  into
                  bytecode.
                  
               </p>
               <div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Tip</h3>
                  <p>
                     By default, the compiler puts each class file in the same
                     directory as its source file. You can specify a separate destination
                     directory with the <em class="parameter"><code>-d</code></em> compiler flag.
                     
                  </p>
               </div>
               <p>
                  You can now start your compiled Java program. Ensure that you are
                  still in the
                  <em class="wordasword">jardir</em>
                  directory and enter the following command to start your Java program.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">java HelloWorld </pre><p>
                  
               </p>
               <p>
                  The system should write "Hello World" on the command line.
                  
               </p>
               <p>
                  
               </p>
               <div class="mediaobject"><img src="images/xfirstjava20.png.pagespeed.ic.FtIGJGzHWD.png" alt="Compiling and running Java programs on the command line"></div>
               <p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="firstjava_classpath"></a>3.3.&nbsp;Using the classpath
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  You can use the classpath to run the program from another place
                  in your directory.
                  
               </p>
               <p>
                  Switch to the command line, e.g., under
                  <span class="guimenu">Windows Start</span> &#8594; <span class="guisubmenu">Run</span>
                  <code class="code">cmd</code>.
                  Switch to any directory you want. Type:
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">java HelloWorld </pre><p>
                  
               </p>
               <p>
                  If you are not in the directory in which the compiled class is stored,
                  then the system will show an error message:
                  <span class="command"><strong>
                        Exception in thread "main" java.lang.NoClassDefFoundError:
                        test/TestClass
                        </strong></span>
                  
               </p>
               <p>
                  To use the class, type the following command. Replace
                  "mydirectory" with the directory which contains the test
                  directory.
                  You should again see the "HelloWorld" output.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">java -classpath <span class="hl-string" style="color:blue">"mydirectory"</span> HelloWorld </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="java_types"></a>4.&nbsp;Java language structure
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_basics"></a>4.1.&nbsp;Basics: Package, Class and Object
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  It is important to understand the base terminology of Java in
                  terms of
                  <em class="wordasword">packages</em>,
                  <em class="wordasword">classes</em>
                  and
                  <em class="wordasword">objects</em>.
                  This section gives an overview of these terms.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_package"></a>4.2.&nbsp;Package
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Java groups classes into functional
                  <em class="wordasword">packages</em>.
                  
               </p>
               <p>
                  Packages are typically used to group
                  classes into logical
                  units.
                  For
                  example, all graphical views of an application might be placed in
                  the
                  same package called
                  <code class="code">com.vogella.webapplication.views</code>.
                  
               </p>
               <p>
                  It is
                  common practice to use the
                  reverse
                  domain name of the company as
                  top
                  level package. For example,
                  the
                  company might own the domain,
                  vogella.com and in this example
                  the
                  Java
                  packages of this company starts
                  with
                  <code class="code">com.vogella</code>.
                  
               </p>
               <p>
                  Other main reason for the usage of packages is to avoid name
                  collisions of classes.
                  A
                  name collision occurs if two programmers give
                  the same
                  <em class="wordasword">fully qualified name</em>
                  to a class. The
                  <em class="wordasword">fully qualified name</em>
                  of a class in Java consists of the package name followed by a
                  dot
                  (.) and the class name.
                  
               </p>
               <p>
                  Without packages, a programmer
                  may
                  create a Java class
                  called
                  <code class="code">Test</code>.
                  Another programmer may create
                  a class with the same name. With
                  the
                  usage of packages you can
                  tell the system which class to call.
                  For
                  example, if the first programmer puts
                  the
                  <code class="code">Test</code>
                  class into package
                  <code class="code">report</code>
                  and the second programmer
                  puts his class into package
                  <code class="code">xmlreader</code>
                  you can distinguish between these classes by using the
                  <em class="wordasword">fully qualified name</em>,
                  e.g,
                  <code class="code">xmlreader.Test</code>
                  or
                  <code class="code">report.Test</code>.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_class"></a>4.3.&nbsp;Class
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  <span class="emphasis"><em>
                        Def.: Template that describes the data and behavior
                        associated with an instance of that class.
                        </em></span>
                  
               </p>
               <div class="note" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Note</h3>
                  <p>
                     The class can be seen as the blueprint of an object. It
                     describes how an object is created.
                     
                  </p>
               </div>
               <p>
                  In Java source code a class is
                  defined by the
                  <em class="wordasword">class</em>
                  keyword and must start with a capital letter. The body of a class is
                  surrounded by {}.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> test;

<span class="hl-keyword">class</span> MyClass {
  
} </pre><p>
                  
               </p>
               <p>
                  The data associated with a class is stored in
                  <em class="wordasword">variables</em>;
                  the
                  behavior associated to a class or object is implemented
                  with
                  <em class="wordasword">methods</em>.
                  
               </p>
               <p>
                  A class is contained in a Java source file with the same name as
                  the class plus the <code class="filename">.java</code> extension.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_object"></a>4.4.&nbsp;Object
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  <span class="emphasis"><em> Def.: An object is an instance of a class.</em></span>
                  
               </p>
               <p>
                  The object is the real element which
                  has
                  data and can perform
                  actions. Each object is created based on the class definition.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_inheritance"></a>4.5.&nbsp;Inheritance
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A class can be derived from another class. In this case this
                  class is
                  called a
                  <em class="wordasword">subclass</em>.
                  Another common phrase is that
                  <em class="wordasword">a class extends another class.</em>
                  
               </p>
               <p>
                  The class
                  from which the subclass is derived is called a
                  <em class="wordasword">superclass</em>.
                  
               </p>
               <p>
                  Inheritance allows a class to inherit the behavior and data
                  definitions of another class.
                  
               </p>
               <p>
                  The following codes demonstrates how a class can extend another
                  class. In Java a class can only extend a maximum of one class.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">class</span> MyBaseClass {
  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> hello() {
    System.out.println(<span class="hl-string" style="color:blue">"Hello from MyBaseClass"</span>);
  }
} </pre><p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">class</span> MyExtensionClass <span class="hl-keyword">extends</span> MyBaseClass {
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_objectsuperclass"></a>4.6.&nbsp;Object as superclass
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Every object in Java implicitly extends the
                  <code class="code">Object</code>
                  class. The class defines the following methods for every Java
                  object:
                  
               </p>
               <div class="itemizedlist">
                  <ul class="itemizedlist" type="disc">
                     <li class="listitem">
                        <p><code class="code">equals(o1)</code>
                           allows checking if the current object is equal to o1
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p><code class="code">getClass()</code>
                           returns the class of the object
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p><code class="code">hashCode()</code>
                           returns an identifier of the current object
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p><code class="code">toString()</code>
                           gives a string representation of the current object
                           
                        </p>
                     </li>
                  </ul>
               </div>
               <p>
                  
               </p>
            </div>
         </div>
         <!-- Non responsive Lake Quincy Ads
<div data-type="ad" data-publisher="lqm.javaeclipseandroid.site" data-zone="inBetween01" data-format="728x90">
</div> -->
         <!-- Responsive Lake Quincy Ads -->
         <div id="ad-inBetween01">
            	<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-inBetween01');});</script>
            </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="java_interfaces"></a>5.&nbsp;Java interfaces
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_interface"></a>5.1.&nbsp;What is an interface in Java?
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  An
                  <em class="wordasword">interfaces</em>
                  is a type similar to a class and is defined via the
                  <code class="code">interface</code>
                  keyword. Like a class an
                  interface defines
                  methods. Classes can
                  implement the interfaces and by this they must
                  obey the contract
                  defined
                  in the interface, e.g., the clast provide
                  implementation for
                  all abstract methods defined in the interface.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_interfacemethods"></a>5.2.&nbsp;Abstract, default and static methods in Interfaces
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  An interface can have abstract methods and
                  <em class="wordasword">default</em>
                  methods. A default method is defined via the
                  <code class="code">default</code>
                  keyword at the beginning of the method signature. All other methods
                  defined in an interfaces are public
                  and
                  abstract &#8211; explicit
                  declaration
                  of these modifiers is optional.
                  
               </p>
               <p>
                  Interfaces can have constants which are always implicitly
                  public, static and final.
                  
               </p>
               <p>
                  The following code shows an example implementation of an
                  interface.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> testing;

<span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> MyInterface {

    <em class="hl-comment" style="color: #080">// constant definition</em>
    String URL = <span class="hl-string" style="color:blue">"http://www.vogella.com"</span>;

    <em class="hl-comment" style="color: #080">// public abstract methods</em>
    <span class="hl-keyword">void</span> test();
    <span class="hl-keyword">void</span> write(String s);
    
    <em class="hl-comment" style="color: #080">// default method</em>
    <span class="hl-keyword">default</span> String reserveString(String s){
      <span class="hl-keyword">return</span> <span class="hl-keyword">new</span> StringBuilder(s).reverse().toString();
    }
} </pre><p>
                  
               </p>
               <p>The following class implements this interface, its must
                  implement the abstract method and can use the default methods.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_interfaceimplementing"></a>5.3.&nbsp;Implementing Interfaces
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A class can implement an interface. In this case it must provide
                  concrete implementations of the abstract interface methods.
                  If you
                  implement a method defined by an interface, you can use
                  <code class="code">@Override</code>
                  annotation to indicate to the Java compiler that you actually want to
                  implement a method defined by this interface. This way the compiler
                  can give you an error in you mis-typed the name of the method or in
                  the number of arguments.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyClassImpl <span class="hl-keyword">implements</span> MyInterface {

  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> test() {
  }

  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> write(String s) {
  }
  
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    MyClassImpl impl = <span class="hl-keyword">new</span> MyClassImpl();
    System.out.println(impl.reserveString(<span class="hl-string" style="color:blue">"Lars Vogel"</span>));
  }

} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_interfaceevolving"></a>5.4.&nbsp;Evolving interfaces
                        </h3>
                     </div>
                  </div>
               </div>
               <p>Before Java 8 evolving interfaces, e.g., adding new methods to
                  an interface, was not possible because such a change would break
                  existing implementations. Java 8 introduced default methods, now you
                  can extend an interface without breaking clients by simply suppling a
                  default implementation with it. Adding such a default method is a
                  source an binary compatible change.
                  
               </p>
               <p>A class can always override a default method so supply a better
                  behavior.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_interface_multiple"></a>5.5.&nbsp;Multiple inheritance of methods
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  If a class implements two interfaces and if these interfaces provide
                  the same
                  default
                  method, Java resolves the correct method for the class
                  by the
                  following rules:
                  
                  
               </p>
               <div class="orderedlist">
                  <ol class="orderedlist" type="1">
                     <li class="listitem">
                        <p>Superclass wins always against the superinterface - If a
                           class can inherit a method from a superclass and a
                           superinterface,
                           the
                           class inherts
                           the superclass method. This is true for
                           concrete
                           and
                           abstract
                           superclass methods. This rule implies that default
                           methods are
                           not
                           used if this method is also declared in the
                           superclass chain.
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>Subtypes win over Supertypes - If a class can inherit a
                           method from two interfaces, and one is a subtype of the other,
                           the
                           class inherts the method from the subtype
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>In all other cases the class needs to implement the default
                           method
                           
                        </p>
                     </li>
                  </ol>
               </div>
               <p>
                  
               </p>
               <p>The following listing demonstrates listing number 3. </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> A {
  <span class="hl-keyword">default</span> <span class="hl-keyword">void</span> m() {}
}

<span class="hl-keyword">public</span> <span class="hl-keyword">interface</span> B {
  <span class="hl-keyword">default</span> <span class="hl-keyword">void</span> m() {}
}

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> C <span class="hl-keyword">implements</span> A, B {
  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> m() {}
} </pre><p>
                  
               </p>
               <p>In your implementation you can also call the super method you
                  prefer. 
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> C <span class="hl-keyword">implements</span> A, B {
  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> m() {A.<span class="hl-keyword">super</span>.m();}
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_functionalinterfaces"></a>5.6.&nbsp;Functional interfaces
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  All interfaces that have only one method are called
                  <em class="wordasword">functional interfaces</em>.
                  Functional interfaces have the advantage that they can be used
                  together with
                  <em class="wordasword">lambda expressions</em>. See
                  <a class="xref" href="#lambdas_definition" title="20.1.&nbsp;What are lambdas?">Section&nbsp;20.1, &#8220;What are lambdas?&#8221;</a>
                  to learn more about lambdas, e.g., the type of lambdas is a
                  functional interface.
                  
               </p>
               <p>
                  The Java compiler automatically identifies functional
                  interfaces. The
                  only requirement is that they have only one abstract method.
                  However,
                  is possible to capture the design
                  intent with a
                  <code class="code">@FunctionalInterface</code>
                  annotation.
                  
               </p>
               <p>
                  Several default Java interfaces are functional interfaces:
                  
               </p>
               <div class="itemizedlist">
                  <ul class="itemizedlist" type="disc">
                     <li class="listitem">
                        <p><code class="code">java.lang.Runnable</code>
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p><code class="code">java.util.concurrent.Callable</code>
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p><code class="code">java.io.FileFilter</code>
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p><code class="code">java.util.Comparator</code>
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p><code class="code">java.beans.PropertyChangeListener</code>
                           
                        </p>
                     </li>
                  </ul>
               </div>
               <p>
                  
               </p>
               <p>
                  Java also contains the
                  <code class="code">java.util.function</code>
                  package which contains functional interfaces which are frequently
                  used such as:
                  
               </p>
               <div class="itemizedlist">
                  <ul class="itemizedlist" type="disc">
                     <li class="listitem">
                        <p>Predicate&lt;T&gt;
                           - a boolean-valued property of an object
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>Consumer&lt;T&gt;
                           - an action to be performed on an object
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>Function&lt;T , R&gt;
                           - a function transforming a T to a R
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>Supplier&lt;T&gt;
                           - provides an instance of T (such as a factory)
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>UnaryOperator&lt;T&gt;
                           - a function from T to T
                           
                        </p>
                     </li>
                     <li class="listitem">
                        <p>BinaryOperator&lt;T&gt;
                           - a function from (T, T) to T
                           
                        </p>
                     </li>
                  </ul>
               </div>
               <p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="javadef"></a>6.&nbsp;Java basic terms
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_override"></a>6.1.&nbsp;Override methods and the @Override annotation
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  If a class extends another class, it inherits the methods from
                  its
                  superclass. If it wants to change these methods, it can
                  <em class="wordasword">override</em>
                  these methods. To override a method, you use the same method signature
                  in the source code of the subclass.
                  
               </p>
               <p>
                  To indicate to the reader of the source code and the Java compiler
                  that you have the intention to override a method, you can use the
                  <code class="code">@Override</code> annotation.
                  
               </p>
               <p>
                  The following code demonstrates how you can override a method
                  from a superclass.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">class</span> MyBaseClass {
  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> hello() {
    System.out.println(<span class="hl-string" style="color:blue">"Hello from MyBaseClass"</span>);
  }
} </pre><p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">class</span> MyExtensionClass2 <span class="hl-keyword">extends</span> MyBaseClass {
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> hello() {
    System.out.println(<span class="hl-string" style="color:blue">"Hello from MyExtensionClass2"</span>);
  }
} </pre><p>
                  
               </p>
               <div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Tip</h3>
                  <p>
                     It is good practice to always use the
                     <code class="code">@Override</code>
                     annotation. This way the Java compiler validates if you did override
                     all methods as intended and prevents errors.
                     
                  </p>
               </div>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="javadef_types"></a>7.&nbsp;The type system of Java
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_types1"></a>7.1.&nbsp;Primitives and references
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Java distinguishes between
                  <em class="wordasword">primitive types</em>
                  (such as boolean,
                  short, int, double, float,
                  char and byte) and
                  <em class="wordasword">reference types</em>
                  (such as Object and String).
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_types_primitives"></a>7.2.&nbsp;Primitives 
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Primitive types variables represents the number, true/false or
                  character. You cannot call
                  methods
                  on variables which have
                  a
                  primitive
                  types.
                  
               </p>
               <p>Operators such
                  as *, -, + or / are only supported for
                  primitive
                  types. Only + can also used for the reference type String to
                  concatenate strings.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_types_references"></a>7.3.&nbsp;Reference types 
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Reference types variables represents a reference to an
                  object, e.g.,
                  a
                  variable is a pointer to the real object.
                  If you
                  change
                  the value of a
                  reference type variable, the variable points to a
                  different object or
                  to
                  <code class="code">null</code>
                  which represents the non-existing object reference.
                  Changing the
                  value
                  of a reference type variable does not change the attributes
                  of
                  the
                  object is was pointing to.
                  Also changing the contents of an object
                  does
                  not affect
                  the value
                  of a
                  variable
                  referring to that
                  object.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_types_autoboxing"></a>7.4.&nbsp;Autoboxing and wrapper types
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Every
                  primitive type has in
                  Java
                  a fitting
                  reference type. This
                  reference
                  type allows to store the
                  value
                  of the
                  primitive
                  type in an
                  object. For
                  example you have
                  <code class="code">java.lang.Integer</code>
                  for int.
                  
               </p>
               <p>
                  Converting a
                  primitive value into
                  an instance
                  of a wrapper
                  type and
                  vice versa is
                  called
                  boxing / unboxing.
                  Java
                  performs these
                  operations
                  automatically of necessary. This allows you to use a primitive as
                  parameter in a method which expects an object of the wrapper type.
                  This
                  automatic
                  boxing and unboxing
                  is
                  known
                  as
                  autoboxing.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="javadef_variables"></a>8.&nbsp;Variables and methods
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_variable"></a>8.1.&nbsp;Variable
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  <em class="wordasword">Variables</em>
                  allow the Java program to store values during the
                  runtime of the
                  program.
                  
               </p>
               <p>
                  A variable can either be a
                  <em class="wordasword">primitive variable</em>
                  or a
                  <em class="wordasword">reference variable</em>.
                  A
                  primitive variable contains the value while the
                  reference variable
                  contains a reference (pointer) to the object.
                  Hence, if you compare
                  two
                  reference variables, you compare if both
                  point to the same
                  object. To
                  compare objects, use the
                  <code class="code">object1.equals(object2)</code>
                  method call.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_instancevariable"></a>8.2.&nbsp;Instance variable
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Instance variable is associated with an instance of
                  the class
                  (also called object). Access works over these objects.
                  
               </p>
               <p>
                  Instance variables can have any access control and can be
                  marked <code class="code">final</code> or <code class="code">transient</code>.
                  Instance variables marked as final cannot
                  be changed after a value has been assigned to them.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_localvariable"></a>8.3.&nbsp;Local variable
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Local (stack) variable declarations cannot have access
                  modifiers.
                  
               </p>
               <p>
                  <em class="wordasword">final</em>
                  is the only modifier available to local variables. This modifier
                  defines that the variable cannot be changed after the first assignment.
                  
               </p>
               <p>
                  Local variables do not get default values, so they must be
                  initialized before use.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_method"></a>8.4.&nbsp;Methods
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A method is a block of code with parameters and a return value.
                  It can be called on the object.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyMethodExample {
  <span class="hl-keyword">void</span> tester(String s) {
    System.out.println(<span class="hl-string" style="color:blue">"Hello World"</span>);
  }
} </pre><p>
                  
               </p>
               <p>
                  Methods can be declared with var-args.
                  In this case the method
                  declares a
                  parameter which
                  accepts everything
                  from zero to many arguments (syntax:
                  type ... name;) A method
                  can only
                  have one var-args parameter and this
                  must be the
                  last parameter
                  in the
                  method.
                  
               </p>
               <p>
                  Overwrite of a superclass method: A method must be of the
                  exact
                  same return parameter and the same arguments. Also the return
                  parameter must be the same. Overload methods: An overloaded method
                  is
                  a method with the same name, but different arguments. The return
                  type
                  can not be used to overload a method.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_mainmethod"></a>8.5.&nbsp;Main method
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A public static method with the following signature can be used
                  to
                  start a Java application. Such a method is typically called
                  <code class="code">main</code>
                  method.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {

} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_constructor"></a>8.6.&nbsp;Constructor
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A class contains
                  <em class="wordasword">constructors</em>
                  that are invoked to create objects
                  based on the class definition.
                  
               </p>
               <p>
                  Constructor declarations look like method
                  declarations except
                  that
                  they use the name of the class and have no
                  return type.
                  
               </p>
               <p>
                  A class can have several constructors with different parameters.
                  Each
                  class must define at least one constructor.
                  
               </p>
               <p>
                  In the following example the constructor of the class expects a
                  parameter.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyConstructorExample2 {

  String s;

  <span class="hl-keyword">public</span> MyConstructorExample2(String s) {
    <span class="hl-keyword">this</span>.s = s;
  }
} </pre><p>
                  
               </p>
               <p>
                  If
                  no
                  explicit
                  constructor is defined,
                  the compiler implicitly adds
                  a
                  constructor. If
                  the class is
                  sub-classed, then the constructor of the
                  super class is
                  always
                  called implicitly in this case.
                  
               </p>
               <p>
                  In the following example the definition of the constructor without
                  parameters (also known as the
                  <em class="wordasword">empty constructor</em>)
                  is unnecessary. If not specified, the compiler would create one.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyConstructorExample {

  <em class="hl-comment" style="color: #080">// unnecessary: would be created by the compiler if left out</em>
  <span class="hl-keyword">public</span> MyConstructorExample() {
  }
} </pre><p>
                  
               </p>
               <p>
                  The naming
                  convention for creating a constructor is
                  the following:
                  <code class="code">classname
                     (Parameter p1, ...) { }
                     </code>.
                  
               </p>
               <p>
                  Every object is created based on a constructor. This
                  constructor method is the first statement called before anything
                  else
                  can
                  be done with the object.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="modifier"></a>9.&nbsp;Modifiers
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_accessmodifier"></a>9.1.&nbsp;Access modifiers
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  There are three access modifiers keywords available in Java:
                  <em class="wordasword">public</em>,
                  <em class="wordasword">protected</em>
                  and
                  <em class="wordasword">private</em>.
                  
               </p>
               <p>
                  There are four access levels:
                  <em class="wordasword">public</em>,
                  <em class="wordasword">protected</em>,
                  <em class="wordasword">default</em>
                  and
                  <em class="wordasword">private</em>.
                  They define how the corresponding
                  element is visible to
                  other
                  components.
                  
               </p>
               <p>
                  If something is declared public, e.g., classes or methods can
                  be freely created or called by other Java objects. If something is
                  declared private, e.g., a method, it can only be accessed within the class
                  in which it is declared.
                  
               </p>
               <p>
                  The access levels
                  <em class="wordasword">protected</em>
                  and
                  <em class="wordasword">default</em>
                  are similar. A
                  <em class="wordasword">protected</em>
                  class can be
                  accessed from the package and sub-classes
                  outside the
                  package, while a
                  <em class="wordasword">default</em>
                  class can get accessed only via
                  the
                  same package.
                  
               </p>
               <p>
                  The following table describes the visibility:
                  
               </p>
               <div class="table"><a name="d421206e1020"></a><p class="title"><b>Table&nbsp;1.&nbsp;Access Level</b></p>
                  <div class="table-contents">
                     <table summary="Access Level" border="1">
                        <colgroup>
                           <col align="left" class="Modifier">
                           <col align="left" class="Class">
                           <col align="left" class="Package">
                           <col align="left" class="Subclass">
                           <col align="left" class="World">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Modifier</th>
                              <th align="left">Class</th>
                              <th align="left">Package</th>
                              <th align="left">Subclass</th>
                              <th align="left">World</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">public</td>
                              <td align="left">Y</td>
                              <td align="left">Y</td>
                              <td align="left">Y</td>
                              <td align="left">Y</td>
                           </tr>
                           <tr>
                              <td align="left">protected</td>
                              <td align="left">Y</td>
                              <td align="left">Y</td>
                              <td align="left">Y</td>
                              <td align="left">N</td>
                           </tr>
                           <tr>
                              <td align="left">no modifier</td>
                              <td align="left">Y</td>
                              <td align="left">Y</td>
                              <td align="left">N</td>
                              <td align="left">N</td>
                           </tr>
                           <tr>
                              <td align="left">private</td>
                              <td align="left">Y</td>
                              <td align="left">N</td>
                              <td align="left">N</td>
                              <td align="left">N</td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadefinitions_othermodifiers"></a>9.2.&nbsp;Other modifiers
                        </h3>
                     </div>
                  </div>
               </div>
               <p>final methods: cannot be overwritten in a subclass</p>
               <p>abstract method: no method body</p>
               <p>
                  synchronized method: thread safe, can be final and have any
                  access control
                  
               </p>
               <p>
                  native methods: platform dependent code, apply only to methods
                  
               </p>
               <p>strictfp: class or method</p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="javaimports"></a>10.&nbsp;Import statements
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javaimports_definition"></a>10.1.&nbsp;Usage of import statements
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  In Java you have to access a class always via its
                  full-qualified name, i.e., the package name and the class name.
                  
               </p>
               <p>
                  You can add
                  <code class="code">import</code>
                  statements for classes or packages into your class file, which allow
                  you to use the related classes in your code without the package
                  qualifier.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javaimport_staticimports"></a>10.2.&nbsp;Static imports
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Static import is a feature that allows members (fields and
                  methods)
                  which are defined in a class
                  with the
                  <code class="code">public static</code>
                  access modifier
                  to be used in Java code
                  without specifying the class
                  in
                  which the member
                  is defined.
                  
               </p>
               <p>
                  The feature
                  provides a typesafe mechanism to
                  include constants
                  into code
                  without
                  having to reference the class that
                  originally defined
                  the
                  field.
                  
               </p>
            </div>
         </div> 
         
         <!-- Responsive Lake Quincy Ads -->
         
         <div id="ad-inBetween02">
            	<script type="text/javascript">googletag.cmd.push(function(){googletag.display('ad-inBetween02');});</script>
            </div>
         
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="java_additionaldefinition"></a>11.&nbsp;More Java language constructs
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_classmethod"></a>11.1.&nbsp;Class methods and class variables
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Class methods and class variables are associated with the class
                  and not
                  an instance of the class, i.e., objects. To refer to these
                  elements, you can use the
                  classname and a dot (".") followed by the
                  class
                  method or class
                  variable name.
                  
               </p>
               <p>
                  Class methods and class variables are declared with the
                  <code class="code">static</code>
                  keyword. Class methods are also called
                  <em class="wordasword">static methods</em>
                  and class variables are also called
                  <em class="wordasword">static variables</em>
                  or
                  <em class="wordasword">static fields</em>.
                  
               </p>
               <p>
                  An example for the usage of a static field is
                  <code class="code">println</code>
                  of the following statement:
                  <code class="code">System.out.println("Hello World")</code>.
                  Hereby
                  <code class="code">out</code>
                  is a static field, an object of type
                  <code class="code">PrintStream</code>
                  and you call the
                  <code class="code">println()</code>
                  method on this object.
                  
               </p>
               <p>
                  If you define a static variable, the Java runtime
                  environment
                  associates
                  one class
                  variable for a class no matter how
                  many
                  instances
                  (objects)
                  exist. The static variable can therefore be seen as a
                  global
                  variable.
                  
               </p>
               <p>
                  The following code demonstrates the usage of
                  <code class="code">static</code>
                  fields.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyStaticExample {

  <span class="hl-keyword">static</span> String PLACEHOLDER = <span class="hl-string" style="color:blue">"TEST"</span>;

  <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> test() {
    System.out.println(<span class="hl-string" style="color:blue">"Hello"</span>);
  }
} </pre><p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Tester {

  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    System.out.println(MyStaticExample.PLACEHOLDER);
    MyStaticExample.test();
  }

} </pre><p>
                  
               </p>
               <p>
                  If a variable should be defined as constant, you declare it with the
                  <code class="code">static</code>
                  and the
                  <code class="code">final</code>
                  keyword.
                  
               </p>
               <p>
                  The static method runs without any instance of the class, it
                  cannot directly access
                  non-static variables or methods.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javadef_abstractclass"></a>11.2.&nbsp;Abstract class and methods
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A class and method can be declared as
                  <code class="code">abstract</code>.
                  An
                  <code class="code">abstract</code>
                  class can not be directly instantiated.
                  
               </p>
               <p>
                  If a class has at least one method, which only contains the declaration
                  of
                  the method, but not the implementation, then this class is
                  <code class="code">abstract</code>
                  and
                  can not be instantiated. Sub-classes need then to define the
                  methods
                  except if they are also declared as abstract.
                  
               </p>
               <p>
                  If a class contains an abstract method, it also needs to get
                  defined
                  with the keyword
                  <code class="code">abstract</code>.
                  
               </p>
               <p>The following example shows an abstract class.</p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.base;

<span class="hl-keyword">public</span> <span class="hl-keyword">abstract</span> <span class="hl-keyword">class</span> MyAbstractClass {
  <span class="hl-keyword">abstract</span> <span class="hl-keyword">double</span> returnDouble();
} </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="cheatsheets"></a>12.&nbsp;Cheat Sheets
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               The following can be used as a reference for certain task which
               you have to do.
               
            </p>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="cheatsheets_class"></a>12.1.&nbsp;Working with classes
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  While programming Java you have to create several classes,
                  methods, instance variables. The following uses the package test.
                  
               </p>
               <p>
                  
               </p>
               <div class="table"><a name="d421206e1230"></a><p class="title"><b>Table&nbsp;2.&nbsp;</b></p>
                  <div class="table-contents">
                     <table border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">What to do</th>
                              <th align="left">How to do it</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">
                                 Create a new class called
                                 <em class="wordasword">MyNewClass</em>.
                                 
                              </td>
                              <td align="left">
                                 
                                 <p>
                                    
                                 </p><pre class="programlisting"><span class="hl-keyword">package</span> test;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyNewClass {

} </pre><p>
                                    
                                 </p>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Create a new attribute (instance variable) called
                                 <em class="wordasword">var1</em>
                                 of type <code class="code">String</code>
                                 in the
                                 <code class="code">MyNewClass</code>
                                 class
                                 
                              </td>
                              <td align="left">
                                 
                                 <p>
                                    
                                 </p><pre class="programlisting"><span class="hl-keyword">package</span> test;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyNewClass {
  <span class="hl-keyword">private</span> String var1;
} </pre><p>
                                    
                                 </p>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Create a Constructor for your
                                 <code class="code">MyNewClass</code>
                                 class which has a
                                 <code class="code">String</code>
                                 parameter and assigns the value of it to
                                 the
                                 <code class="code">var1</code>
                                 instance
                                 variable.
                                 
                              </td>
                              <td align="left">
                                 
                                 <p>
                                    
                                 </p><pre class="programlisting"><span class="hl-keyword">package</span> test;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyNewClass {
  <span class="hl-keyword">private</span> String var1;

  <span class="hl-keyword">public</span> MyNewClass(String para1) {
    var1 = para1;
    <em class="hl-comment" style="color: #080">// or this.var1= para1;</em>
  }
} </pre><p>
                                    
                                 </p>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Create a new method called
                                 <em class="wordasword">doSomeThing</em>
                                 in your class which does not
                                 return a value and has no parameters.
                                 
                              </td>
                              <td align="left">
                                 
                                 <p>
                                    
                                 </p><pre class="programlisting"><span class="hl-keyword">package</span> test;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyNewClass {
  <span class="hl-keyword">private</span> String var1;

  <span class="hl-keyword">public</span> MyNewClass(String para1) {
    var1 = para1;
    <em class="hl-comment" style="color: #080">// or this.var1= para1;</em>
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> doSomeThing() {

  }

} </pre><p>
                                    
                                 </p>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Create a new method called
                                 <em class="wordasword">doSomeThing2</em>
                                 in your class which does
                                 not
                                 return a value and has two parameters,
                                 an <code class="code">int</code>
                                 and a <code class="code">Person</code>
                                 
                              </td>
                              <td align="left">
                                 
                                 <p>
                                    
                                 </p><pre class="programlisting"><span class="hl-keyword">package</span> test;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyNewClass {
  <span class="hl-keyword">private</span> String var1;

  <span class="hl-keyword">public</span> MyNewClass(String para1) {
    var1 = para1;
    <em class="hl-comment" style="color: #080">// or this.var1= para1;</em>
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> doSomeThing() {

  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> doSomeThing2(<span class="hl-keyword">int</span> a, Person person) {

  }

} </pre><p>
                                    
                                 </p>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Create a new method called
                                 <em class="wordasword">doSomeThing2</em>
                                 in your class which
                                 returns an <code class="code">int</code> value and has three parameters,
                                 two <code class="code">Strings</code> and a <code class="code">Person</code>.
                                 
                              </td>
                              <td align="left">
                                 
                                 <p>
                                    
                                 </p><pre class="programlisting"><span class="hl-keyword">package</span> test;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyNewClass {
  <span class="hl-keyword">private</span> String var1;

  <span class="hl-keyword">public</span> MyNewClass(String para1) {
    var1 = para1;
    <em class="hl-comment" style="color: #080">// or this.var1= para1;</em>
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> doSomeThing() {

  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> doSomeThing2(<span class="hl-keyword">int</span> a, Person person) {

  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">int</span> doSomeThing3(String a, String b, Person person) {
    <span class="hl-keyword">return</span> <span class="hl-number">5</span>; <em class="hl-comment" style="color: #080">// any value will do for this example</em>
  }

} </pre><p>
                                    
                                 </p>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Create a class called <em class="wordasword">MyOtherClass</em> with two instance
                                 variables.
                                 One will store a <code class="code">String</code>, the other will store a <code class="code">Dog</code>.
                                 Create
                                 getter and setter for these variables.
                                 
                              </td>
                              <td align="left">
                                 
                                 <p>
                                    
                                 </p><pre class="programlisting"><span class="hl-keyword">package</span> test;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyOtherClass {
  String myvalue;
  Dog dog;

  <span class="hl-keyword">public</span> String getMyvalue() {
    <span class="hl-keyword">return</span> myvalue;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setMyvalue(String myvalue) {
    <span class="hl-keyword">this</span>.myvalue = myvalue;
  }

  <span class="hl-keyword">public</span> Dog getDog() {
    <span class="hl-keyword">return</span> dog;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setDog(Dog dog) {
    <span class="hl-keyword">this</span>.dog = dog;
  }
} </pre><p>
                                    
                                 </p>
                                 
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="cheatsheets_localvariable"></a>12.2.&nbsp;Working with local variable
                        </h3>
                     </div>
                  </div>
               </div>
               <p>A local variable must always be declared in a method.</p>
               <p>
                  
               </p>
               <div class="table"><a name="d421206e1380"></a><p class="title"><b>Table&nbsp;3.&nbsp;</b></p>
                  <div class="table-contents">
                     <table border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">What to do </th>
                              <th align="left">How to do it</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">Declare a (local) variable of type <code class="code">String</code>.
                              </td>
                              <td align="left"><code class="code">String variable1;</code></td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Declare a (local) variable of type <code class="code">String</code> and
                                 assign
                                 <code class="code">"Test"</code>
                                 to it.
                                 
                              </td>
                              <td align="left"><code class="code">String variable2 = "Test";</code></td>
                           </tr>
                           <tr>
                              <td align="left">Declare a (local) variable of type <code class="code">Person</code></td>
                              <td align="left"><code class="code">Person person;</code></td>
                           </tr>
                           <tr>
                              <td align="left">Declare a (local) variable of type <code class="code">Person</code>,
                                 create a new Object and assign the variable to this object.
                                 
                              </td>
                              <td align="left"><code class="code">Person person = new Person();</code></td>
                           </tr>
                           <tr>
                              <td align="left">Declare an array of type <code class="code">String</code></td>
                              <td align="left"><code class="code">String array[];</code></td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Declare an array of type <code class="code">Person</code> and create an array
                                 for this
                                 variable which can hold 5 persons.
                                 
                              </td>
                              <td align="left"><code class="code">Person array[]= new Person[5];</code></td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Assign 5 to the <code class="code">int</code> variable <code class="code">var1</code>
                                 (which was already declared);
                                 
                              </td>
                              <td align="left"><code class="code">var1 = 5;</code></td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Assign the existing variable <code class="code">pers2</code> to the exiting
                                 variable
                                 <code class="code">pers1</code>;
                                 
                              </td>
                              <td align="left"><code class="code">pers1 = pers2;</code></td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Declare an <code class="code">ArrayList</code> variable which can hold objects
                                 of type
                                 <code class="code">Person</code>
                                 
                              </td>
                              <td align="left">
                                 ArrayList&lt;Person&gt; persons;
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Create a new <code class="code">ArrayList</code>
                                 with objects of type <code class="code">Person</code>
                                 and
                                 assign it to the existing variable <code class="code">persons</code>.
                                 
                              </td>
                              <td align="left">
                                 persons = new ArrayList&lt;Person&gt;();
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 Declare an <code class="code">ArrayList</code> variable which can hold objects
                                 of type <code class="code">Person</code>
                                 and create a new <code class="code">Object</code> for it.
                                 
                              </td>
                              <td align="left">
                                 ArrayList&lt;Person&gt; persons = new ArrayList&lt;Person&gt;();
                                 
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="ide"></a>13.&nbsp;Integrated Development Environment
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               The previous chapter explained how to create and compile a Java
               program on the command line. A Java Integrated Development Environment
               (IDE) provides lots of ease of use functionality for creating Java
               programs. There are other very powerful IDEs available, for example,
               the
               Eclipse IDE.
               
            </p>
            <p>
               For an introduction on how to use the Eclipse IDE please see
               <a class="ulink" href="http://www.vogella.com/tutorials/Eclipse/article.html" target="_top">Eclipse IDE Tutorial</a>.
               
            </p>
            <p>
               The remaining description uses the phrase:
               <em class="wordasword">"Create a Java project called...".</em>
               This refers to creating a Java project in Eclipse. If you are
               using
               a
               different IDE, please follow the required steps in that IDE.
               
            </p>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="exercises_starter"></a>14.&nbsp;Exercises - Creating Java objects and methods
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="exercises_starter1"></a>14.1.&nbsp;Create a Person class and instantiate it
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Create a new Java project called
                  <code class="code">com.vogella.javastarter.exercises1</code>
                  and a package with the same name.
                  
               </p>
               <p>
                  Create a class called
                  <em class="wordasword">Person</em>.
                  
               </p>
               <p>
                  Add three instance variables to it, one for storing the first
                  name of the person, one for storing the last name
                  and one for storing
                  the age of the Person.
                  
               </p>
               <p>
                  Use the constructor of the
                  <code class="code">Person</code>
                  object
                  to set the values to some default value.
                  
               </p>
               <p>
                  Add a
                  <code class="code">toString</code>
                  method as described by the following codeing and solve the TODO. This method is used to convert the object to a
                  String representation.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><em><span class="hl-annotation" style="color: gray">@Override</span></em>
<span class="hl-keyword">public</span> String toString() {
    <em class="hl-comment" style="color: #080">// TODO replace "" with the following:</em>
    <em class="hl-comment" style="color: #080">// firstName + " " + lastName</em>
  <span class="hl-keyword">return</span> <span class="hl-string" style="color:blue">""</span>; 
} </pre><p>
                  
               </p>
               <p>
                  Create a new class called
                  <em class="wordasword">Main</em>
                  with a
                  <code class="code">public static void main(String[] args)</code>.
                  In this method create an instance of the
                  <code class="code">Person</code>
                  class.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="exercises_starter2"></a>14.2.&nbsp;Use constructor
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Add a constructor to your
                  <code class="code">Person</code>
                  class which takes first name, last name and age as parameter.
                  Assign the values to your instance variables.
                  
               </p>
               <p>
                  In your main method create at least one object of type
                  <code class="code">Person</code>
                  and use
                  <code class="code">System.out.println()</code>
                  with the object as parameter.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="exercises_starter3"></a>14.3.&nbsp;Define getter and setter methods
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Define methods which allow you to read the values of the
                  instance
                  variables and to set them. These methods are called
                  <em class="wordasword">setter</em>
                  and
                  <em class="wordasword">getter</em>.
                  
               </p>
               <p>
                  Getters should start with
                  <code class="code">get</code>
                  followed by the variable name whereby the first letter of the
                  variable is capitalized.
                  
               </p>
               <p>
                  Setter should start with
                  <code class="code">set</code>
                  followed by the variable name whereby the first letter of the
                  variable is capitalized.
                  
               </p>
               <p>
                  For example, the variable called
                  <em class="wordasword">firstName</em>
                  would have the
                  <code class="code">getFirstName()</code>
                  getter method and the
                  <code class="code">setFirstName(String s)</code>
                  setter method.
                  
               </p>
               <p>
                  Change your
                  <code class="code">main</code>
                  method so that you create one
                  <code class="code">Person</code>
                  object
                  and use the setter method to change the last name.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="exercises_starter4"></a>14.4.&nbsp;Create an Address object
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Create a new object called
                  <em class="wordasword">Address</em>.
                  The
                  <code class="code">Address</code>
                  should allow you to store the address of a person.
                  
               </p>
               <p>
                  Add a new instance variable of this type in the
                  <code class="code">Person</code>
                  object.
                  Also,
                  create a getter and setter for the
                  <code class="code">Address</code>
                  object in the
                  <code class="code">Person</code>
                  object.
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="exercises_starter_solution"></a>15.&nbsp;Solution - Creating Java objects and methods
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="exercises_starter1_solution"></a>15.1.&nbsp;Create a Person class and instantiate it
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The following is the expected result after
                  <a class="xref" href="#exercises_starter1" title="14.1.&nbsp;Create a Person class and instantiate it">Section&nbsp;14.1, &#8220;Create a Person class and instantiate it&#8221;</a>.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> exercises.exercise04;

<span class="hl-keyword">class</span> Person {
  String firstname = <span class="hl-string" style="color:blue">"Jim"</span>;
  String lastname = <span class="hl-string" style="color:blue">"Knopf"</span>;
  <span class="hl-keyword">int</span> age = <span class="hl-number">12</span>;

  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> String toString() {
    <span class="hl-keyword">return</span> firstName + <span class="hl-string" style="color:blue">" "</span> + lastName;
  }

} </pre><p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> exercises.exercise04;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Main {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    Person person = <span class="hl-keyword">new</span> Person();
    
    <em class="hl-comment" style="color: #080">//  this calls the toString method on the pers object</em>
    System.out.println(pers);
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="exercises_starter2_solution"></a>15.2.&nbsp;Use constructor
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The following is the expected result after
                  <a class="xref" href="#exercises_starter2" title="14.2.&nbsp;Use constructor">Section&nbsp;14.2, &#8220;Use constructor&#8221;</a>.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javastarter.exercises1;


<span class="hl-keyword">class</span> Person {
  String firstName;
  String lastName;
  <span class="hl-keyword">int</span> age;

  <span class="hl-keyword">public</span> Person(String a, String b, <span class="hl-keyword">int</span> value) {
    firstName = a;
    lastName = b;
    age=value;
  }
  
  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> String toString() {
    <span class="hl-keyword">return</span> firstName + <span class="hl-string" style="color:blue">" "</span> + lastName;
  }

} </pre><p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javastarter.exercises1;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Main {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    Person p1 = <span class="hl-keyword">new</span> Person(<span class="hl-string" style="color:blue">"Jim"</span>, <span class="hl-string" style="color:blue">"Knopf"</span> , <span class="hl-number">12</span>);
    System.out.println(p1);

    <em class="hl-comment" style="color: #080">// reuse the same variable and assign a new object to it</em>
    Person p2 = <span class="hl-keyword">new</span> Person(<span class="hl-string" style="color:blue">"Henry"</span>, <span class="hl-string" style="color:blue">"Ford"</span>, <span class="hl-number">104</span>);
    System.out.println(p2);
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="exercises_starter3solution"></a>15.3.&nbsp;Define getter and setter methods
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The following is the expected result after
                  <a class="xref" href="#exercises_starter3" title="14.3.&nbsp;Define getter and setter methods">Section&nbsp;14.3, &#8220;Define getter and setter methods&#8221;</a>.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javastarter.exercises1;

<span class="hl-keyword">class</span> Person {
  String firstName;
  String lastName;
  <span class="hl-keyword">int</span> age;

  <span class="hl-keyword">public</span> Person(String a, String b, <span class="hl-keyword">int</span> value) {
    firstName = a;
    lastName = b;
    age = value;
  }

  <span class="hl-keyword">public</span> String getFirstName() {
    <span class="hl-keyword">return</span> firstName;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setFirstName(String firstName) {
    <span class="hl-keyword">this</span>.firstName = firstName;
  }

  <span class="hl-keyword">public</span> String getLastName() {
    <span class="hl-keyword">return</span> lastName;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setLastName(String lastName) {
    <span class="hl-keyword">this</span>.lastName = lastName;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">int</span> getAge() {
    <span class="hl-keyword">return</span> age;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setAge(<span class="hl-keyword">int</span> age) {
    <span class="hl-keyword">this</span>.age = age;
  }
  
  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> String toString() {
    <span class="hl-keyword">return</span> firstName + <span class="hl-string" style="color:blue">" "</span> + lastName;
  }


} </pre><p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javastarter.exercises1;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Main {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    Person person = <span class="hl-keyword">new</span> Person(<span class="hl-string" style="color:blue">"Jim"</span>, <span class="hl-string" style="color:blue">"Knopf"</span>, <span class="hl-number">21</span>);
    Person p2 = <span class="hl-keyword">new</span> Person(<span class="hl-string" style="color:blue">"Jill"</span>, <span class="hl-string" style="color:blue">"Sanders"</span>, <span class="hl-number">20</span>);
    <em class="hl-comment" style="color: #080">// Jill gets married to Jim</em>
    <em class="hl-comment" style="color: #080">// and takes his name</em>
    p2.setLastName(<span class="hl-string" style="color:blue">"Knopf"</span>);
    System.out.println(p2);
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="exercises_starter4solution"></a>15.4.&nbsp;Solution - Create an Address object
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The following is the expected result after
                  <a class="xref" href="#exercises_starter4" title="14.4.&nbsp;Create an Address object">Section&nbsp;14.4, &#8220;Create an Address object&#8221;</a>.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javastarter.exercises1;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Address {

  <span class="hl-keyword">private</span> String street;
  <span class="hl-keyword">private</span> String number;
  <span class="hl-keyword">private</span> String postalCode;
  <span class="hl-keyword">private</span> String city;
  <span class="hl-keyword">private</span> String country;

  <span class="hl-keyword">public</span> String getStreet() {
    <span class="hl-keyword">return</span> street;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setStreet(String street) {
    <span class="hl-keyword">this</span>.street = street;
  }

  <span class="hl-keyword">public</span> String getNumber() {
    <span class="hl-keyword">return</span> number;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setNumber(String number) {
    <span class="hl-keyword">this</span>.number = number;
  }

  <span class="hl-keyword">public</span> String getPostalCode() {
    <span class="hl-keyword">return</span> postalCode;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setPostalCode(String postalCode) {
    <span class="hl-keyword">this</span>.postalCode = postalCode;
  }

  <span class="hl-keyword">public</span> String getCity() {
    <span class="hl-keyword">return</span> city;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setCity(String city) {
    <span class="hl-keyword">this</span>.city = city;
  }

  <span class="hl-keyword">public</span> String getCountry() {
    <span class="hl-keyword">return</span> country;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setCountry(String country) {
    <span class="hl-keyword">this</span>.country = country;
  }

  <span class="hl-keyword">public</span> String toString() {
    <span class="hl-keyword">return</span> street + <span class="hl-string" style="color:blue">" "</span> + number + <span class="hl-string" style="color:blue">" "</span> + postalCode + <span class="hl-string" style="color:blue">" "</span> + city + <span class="hl-string" style="color:blue">" "</span>
        + country;
  }

} </pre><p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javastarter.exercises1;


<span class="hl-keyword">class</span> Person {
  String firstName;
  String lastName;
  <span class="hl-keyword">int</span> age;
  <span class="hl-keyword">private</span> Address address;

  <span class="hl-keyword">public</span> Person(String a, String b, <span class="hl-keyword">int</span> value) {
    firstName = a;
    lastName = b;
    age=value;
  }

  <span class="hl-keyword">public</span> String getFirstName() {
    <span class="hl-keyword">return</span> firstName;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setFirstName(String firstName) {
    <span class="hl-keyword">this</span>.firstName = firstName;
  }

  <span class="hl-keyword">public</span> String getLastName() {
    <span class="hl-keyword">return</span> lastName;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setLastName(String lastName) {
    <span class="hl-keyword">this</span>.lastName = lastName;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">int</span> getAge() {
    <span class="hl-keyword">return</span> age;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setAge(<span class="hl-keyword">int</span> age) {
    <span class="hl-keyword">this</span>.age = age;
  }

  
  <span class="hl-keyword">public</span> Address getAddress() {
    <span class="hl-keyword">return</span> address;
  }

  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setAddress(Address address) {
    <span class="hl-keyword">this</span>.address = address;
  }

  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> String toString() {
    <span class="hl-keyword">return</span> firstName + <span class="hl-string" style="color:blue">" "</span> + lastName;
  }

} </pre><p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javastarter.exercises1;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Main {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    <em class="hl-comment" style="color: #080">// I create a person</em>
    Person pers = <span class="hl-keyword">new</span> Person(<span class="hl-string" style="color:blue">"Jim"</span>, <span class="hl-string" style="color:blue">"Knopf"</span>, <span class="hl-number">31</span>);
    <em class="hl-comment" style="color: #080">// set the age of the person to 32</em>
    pers.setAge(<span class="hl-number">32</span>);

    <em class="hl-comment" style="color: #080">// just for testing I write this to the console</em>
    System.out.println(pers);
    <em class="hl-comment" style="color: #080">/*
     * actually System.out.println always calls toString, if you do not
     * specify it so you could also have written System.out.println(pers);
     */</em>
    <em class="hl-comment" style="color: #080">// create an address</em>
    Address address = <span class="hl-keyword">new</span> Address();
    <em class="hl-comment" style="color: #080">// set the values for the address</em>
    address.setCity(<span class="hl-string" style="color:blue">"Heidelberg"</span>);
    address.setCountry(<span class="hl-string" style="color:blue">"Germany"</span>);
    address.setNumber(<span class="hl-string" style="color:blue">"104"</span>);
    address.setPostalCode(<span class="hl-string" style="color:blue">"69214"</span>);
    address.setStreet(<span class="hl-string" style="color:blue">"Musterstr."</span>);

    <em class="hl-comment" style="color: #080">// assign the address to the person</em>
    pers.setAddress(address);

    <em class="hl-comment" style="color: #080">// dispose reference to address object</em>
    address = null;

    <em class="hl-comment" style="color: #080">// person is moving to the next house in the same street</em>
    pers.getAddress().setNumber(<span class="hl-string" style="color:blue">"105"</span>);

  }

} </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="languageconstructs"></a>16.&nbsp;Java statements
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               The Java language defines certain statements with a predefined
               meaning.
               The following description lists some of them.
               
            </p>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javalang_if"></a>16.1.&nbsp;if-then and if-then-else
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The
                  <code class="code">if-then</code>
                  statement is a control flow statement. A block of code is only
                  executed when the test specified by the <code class="code">if</code> part evaluates to
                  <code class="code">true</code>.
                  The optional
                  <code class="code">else</code>
                  block is executed when the
                  <code class="code">if</code>
                  part evaluates to
                  <code class="code">false</code>.
                  
               </p>
               <p>
                  The following example code shows a class with two methods. The first
                  method demonstrates the usage of
                  <code class="code">if-then</code>
                  and the second method demonstrates the usage of
                  <code class="code">if-then-else</code>.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="languageconstructsss1as2b"></a>16.2.&nbsp;Switch
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The switch statement can be used to handle several
                  alternatives
                  if they are based on the same constant value.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">switch</span> (expression) {
  <span class="hl-keyword">case</span> constant1:
    command;
    <span class="hl-keyword">break</span>; <em class="hl-comment" style="color: #080">// will prevent that the other cases or also executed</em>
  <span class="hl-keyword">case</span> constant2:
    command;
    <span class="hl-keyword">break</span>;
    ...
  <span class="hl-keyword">default</span>:
}

<em class="hl-comment" style="color: #080">// Example:</em>

<span class="hl-keyword">switch</span> (cat.getLevel()) {
  <span class="hl-keyword">case</span> <span class="hl-number">0</span>:
    <span class="hl-keyword">return</span> true;
  <span class="hl-keyword">case</span> <span class="hl-number">1</span>:
    <span class="hl-keyword">if</span> (cat.getLevel() == <span class="hl-number">1</span>) {
      <span class="hl-keyword">if</span> (cat.getName().equalsIgnoreCase(req.getCategory())) {
        <span class="hl-keyword">return</span> true;
      }
    }
  <span class="hl-keyword">case</span> <span class="hl-number">2</span>:
    <span class="hl-keyword">if</span> (cat.getName().equalsIgnoreCase(req.getSubCategory())) {
      <span class="hl-keyword">return</span> true;
    }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="languageconstructs_comparison"></a>16.3.&nbsp;Boolean Operations
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Use <code class="code">==</code> to compare two primitives or to see if two references
                  refer to the same object. Use the <code class="code">equals()</code> method to see if
                  two different objects are equal.
                  
               </p>
               <p>
                  &amp;&amp; and
                  || are both <em class="wordasword">Short Circuit Methods</em>
                  which means that they
                  terminate once
                  the result of an evaluation is already clear.
                  <code class="code">Example (true || ...)</code>
                  is always <code class="code">true</code> while <code class="code">(false
                     &amp;&amp; ...)</code> always is always interpreted as <code class="code">false</code>. Usage:
                  
               </p>
               <p>
                  (<code class="code">var !=null
                     &amp;&amp; 
                     var.method1() ...</code>) ensures that <code class="code">var</code> is not
                  <code class="code">null</code> before doing
                  the real
                  check.
                  
               </p>
               <p>
                  
               </p>
               <div class="table"><a name="d421206e1811"></a><p class="title"><b>Table&nbsp;4.&nbsp;Boolean</b></p>
                  <div class="table-contents">
                     <table summary="Boolean" border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Operations</th>
                              <th align="left">Description</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left"><code class="code">==</code></td>
                              <td align="left">
                                 Is equal, in case of objects the system
                                 checks if the
                                 reference variable point
                                 to the same object. It will not compare
                                 the content of the objects!
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code"> &amp;&amp; </code>
                                 
                              </td>
                              <td align="left">And</td>
                           </tr>
                           <tr>
                              <td align="left"><code class="code">!=</code></td>
                              <td align="left">
                                 is not equal, similar to <code class="code">==</code>.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left"><code class="code">a.equals(b)</code></td>
                              <td align="left">Checks if string a equals b.</td>
                           </tr>
                           <tr>
                              <td align="left"><code class="code">a.equalsIgnoreCase(b)</code></td>
                              <td align="left">
                                 Checks if string a equals b while
                                 ignoring lower cases.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left"><code class="code">If (value ? false : true) {}</code></td>
                              <td align="left">
                                 Negotiation: return true if value is not true.
                                 
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
            </div>
         </div>
         
         
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="loops"></a>17.&nbsp;Loops in Java
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javalang_for"></a>17.1.&nbsp;The for loop
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A for loop is a repetition control structure that allows you to
                  write a block of code which is executed a specific number of
                  times. The syntax is the following.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">for</span>(initialization; expression; update_statement)
{
   <em class="hl-comment" style="color: #080">//block of code to run </em>
} </pre><p>
                  
               </p>
               <p>The following shows an example for a for loop.</p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ForTest {

  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String args[]) {

  <span class="hl-keyword">for</span>(<span class="hl-keyword">int</span> i = <span class="hl-number">1</span>; i &lt; <span class="hl-number">10</span>; i = i+<span class="hl-number">1</span>) {
    System.out.println(<span class="hl-string" style="color:blue">"value of i : "</span> + i);
    }
  }
} </pre><p>
                  
               </p>
               <div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Tip</h3>
                  <p>
                     For arrays and collections there is also an enhanced for loop
                     available. This loop is covered in the Array description.
                     
                  </p>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javalang_while"></a>17.2.&nbsp;The while loop
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A while loop is a repetition control structure that allows you
                  to
                  write a block of code which is executed until a specific condition
                  evaluates to false. The
                  syntax is the following.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">while</span>(expression)
{
  <em class="hl-comment" style="color: #080">// block of code to run</em>
} </pre><p>
                  
               </p>
               <p>The following shows an example for a while loop.</p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> WhileTest {

  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String args[]) {
    <span class="hl-keyword">int</span> x = <span class="hl-number">1</span>;

    <span class="hl-keyword">while</span> (x &lt; <span class="hl-number">10</span>) {
      System.out.println(<span class="hl-string" style="color:blue">"value of x : "</span> + x);
      x++;
    }
  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javalang_dowhile"></a>17.3.&nbsp;The do while loop
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The do-while loop is similar to the while loop,
                  with the exception that the
                  condition is checked after the execution. The
                  syntax is the following.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">do</span>
{
  <em class="hl-comment" style="color: #080">// block of code to run</em>
} <span class="hl-keyword">while</span>(expression); </pre><p>
                  
               </p>
               <p>
                  The following shows an example for a do-while loop.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">public</span> <span class="hl-keyword">class</span> DoTest {

  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String args[]) {
    <span class="hl-keyword">int</span> x = <span class="hl-number">1</span>;

    <span class="hl-keyword">do</span> {
      System.out.println(<span class="hl-string" style="color:blue">"value of x : "</span> + x);
      x++;
    } <span class="hl-keyword">while</span> (x &lt; <span class="hl-number">10</span>);
  }
} </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="arrays"></a>18.&nbsp;Arrays
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="arrays_definition"></a>18.1.&nbsp;Arrays in Java
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  An array is a container object that holds a fixed number of
                  values of a single type. An item in an array is called an element.
                  Every element can be accessed via an index. The first element in an
                  array is addressed via the 0 index, the second via 1, etc.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.array;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> TestMain {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    <em class="hl-comment" style="color: #080">// declares an array of integers</em>
    <span class="hl-keyword">int</span>[] array;

    <em class="hl-comment" style="color: #080">// allocates memory for 10 integers</em>
    array = <span class="hl-keyword">new</span> <span class="hl-keyword">int</span>[<span class="hl-number">10</span>];

    <em class="hl-comment" style="color: #080">// initialize values</em>
    array[<span class="hl-number">0</span>] = <span class="hl-number">10</span>;
    <em class="hl-comment" style="color: #080">// initialize second element</em>
    array[<span class="hl-number">1</span>] = <span class="hl-number">20</span>;
    array[<span class="hl-number">2</span>] = <span class="hl-number">30</span>;
    array[<span class="hl-number">3</span>] = <span class="hl-number">40</span>;
    array[<span class="hl-number">4</span>] = <span class="hl-number">50</span>;
    array[<span class="hl-number">5</span>] = <span class="hl-number">60</span>;
    array[<span class="hl-number">6</span>] = <span class="hl-number">70</span>;
    array[<span class="hl-number">7</span>] = <span class="hl-number">80</span>;
    array[<span class="hl-number">8</span>] = <span class="hl-number">90</span>;
    array[<span class="hl-number">9</span>] = <span class="hl-number">100</span>;

  }
} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="arrays_forloop"></a>18.2.&nbsp;Enhanced for loop for Arrays and Collections
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Arrays and collections can be processed with a simpler for loop.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">for</span>(declaration : expression)
{
  <em class="hl-comment" style="color: #080">// body of code to be executed</em>
} </pre><p>
                  
               </p>
               <p>The following code demonstrates its usage.</p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.javaintro.array;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> TestMain {
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    <em class="hl-comment" style="color: #080">// declares an array of integers</em>
    <span class="hl-keyword">int</span>[] array;

    <em class="hl-comment" style="color: #080">// allocates memory for 10 integers</em>
    array = <span class="hl-keyword">new</span> <span class="hl-keyword">int</span>[<span class="hl-number">10</span>];

    <em class="hl-comment" style="color: #080">// initialize values</em>
    array[<span class="hl-number">0</span>] = <span class="hl-number">10</span>;
    <em class="hl-comment" style="color: #080">// initialize second element</em>
    array[<span class="hl-number">1</span>] = <span class="hl-number">20</span>;
    array[<span class="hl-number">2</span>] = <span class="hl-number">30</span>;
    array[<span class="hl-number">3</span>] = <span class="hl-number">40</span>;
    array[<span class="hl-number">4</span>] = <span class="hl-number">50</span>;
    array[<span class="hl-number">5</span>] = <span class="hl-number">60</span>;
    array[<span class="hl-number">6</span>] = <span class="hl-number">70</span>;
    array[<span class="hl-number">7</span>] = <span class="hl-number">80</span>;
    array[<span class="hl-number">8</span>] = <span class="hl-number">90</span>;
    array[<span class="hl-number">9</span>] = <span class="hl-number">100</span>;

    <span class="hl-keyword">for</span> (<span class="hl-keyword">int</span> i : array) {
      System.out.println(<span class="hl-string" style="color:blue">"Element at index "</span> + i + <span class="hl-string" style="color:blue">" :"</span>  + array[i]);
    }
  }
} </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="javastring"></a>19.&nbsp;Strings
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javastringdefinition"></a>19.1.&nbsp;Strings in Java
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The
                  <code class="code">String</code>
                  class represents character strings. All string literals, for example,
                  "hello", are implemented as instances of this class. An instance of
                  this class is an object. Strings are immutable, e.g., an assignment
                  of
                  a new value to a
                  <code class="code">String</code>
                  object creates a new object.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javastringpool"></a>19.2.&nbsp;String pool in Java
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  For memory efficiency Java uses a
                  <code class="code">String</code>
                  pool. The string pool
                  allows string literals to be reused. This is
                  possible because
                  strings in Java are immutable.
                  
               </p>
               <p>
                  If the same string literal is used in several places in the
                  Java
                  code, only one copy of that string is created.
                  
               </p>
               <p>
                  Whenever a
                  <code class="code">String</code>
                  object is created and gets a string literal
                  assigned, e.g., as in
                  <code class="code">String s = "constant"</code>,
                  the string pool is used. However, the
                  <code class="code">new</code>
                  operator forces a new
                  <code class="code">String</code>
                  copy to be allocated, for example, in
                  <code class="code">
                     String s = new String("constant");
                     </code>.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javastringcompare"></a>19.3.&nbsp;Compare Strings in Java
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  To compare the
                  <code class="code">String</code>
                  objects
                  <code class="code">s1</code>
                  and
                  <code class="code">s2</code>,
                  use the
                  <code class="code">s1.equals(s2)</code>
                  method.
                  
               </p>
               <p>
                  A
                  <code class="code">String</code>
                  comparison with
                  <code class="code">==</code>
                  is incorrect, as
                  <code class="code">==</code>
                  checks for object reference equality.
                  <code class="code">==</code>
                  sometimes gives the correct result, as Java uses a
                  <code class="code">String</code>
                  pool. The
                  following example would work with
                  <code class="code">==</code>.
                  
               </p>
               <p>This would work as expected.</p>
               <p>
                  
               </p><pre class="programlisting">String a = <span class="hl-string" style="color:blue">"Hello"</span>;
String b = <span class="hl-string" style="color:blue">"Hello"</span>;
<span class="hl-keyword">if</span> (a==b) {
  <em class="hl-comment" style="color: #080">// if statement is true</em>
  <em class="hl-comment" style="color: #080">// because String pool is used and</em>
  <em class="hl-comment" style="color: #080">// a and b point to the same constant</em>
} </pre><p>
                  
               </p>
               <p>This comparison would fail.</p>
               <p>
                  
               </p><pre class="programlisting">String a = <span class="hl-string" style="color:blue">"Hello"</span>;
String b = <span class="hl-keyword">new</span> String(<span class="hl-string" style="color:blue">"Hello"</span>);
<span class="hl-keyword">if</span> (a==b) {
  
} <span class="hl-keyword">else</span> {
  <em class="hl-comment" style="color: #080">// if statement is false</em>
  <em class="hl-comment" style="color: #080">// because String pool is used and </em>
  <em class="hl-comment" style="color: #080">// a and b point to the same constant</em>
} </pre><p>
                  
               </p>
               <div class="warning" style="margin-left: 0.5in; margin-right: 0.5in;">
                  <h3 class="title">Warning</h3>
                  <p>
                     Therefore, you should always use the
                     <code class="code">equals()</code>
                     method when you compare strings.
                     
                  </p>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="javastringhandling"></a>19.4.&nbsp;Working with Strings
                        </h3>
                     </div>
                  </div>
               </div>
               <p>The following lists the most common string operations.</p>
               <p>
                  
               </p>
               <div class="table"><a name="d421206e2061"></a><p class="title"><b>Table&nbsp;5.&nbsp;</b></p>
                  <div class="table-contents">
                     <table border="1">
                        <colgroup>
                           <col align="left" class="c1">
                           <col align="left" class="c2">
                        </colgroup>
                        <thead>
                           <tr>
                              <th align="left">Command</th>
                              <th align="left">Description</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td align="left">
                                 <code class="code">"Testing".equals(text1);</code>
                                 
                              </td>
                              <td align="left">
                                 Return <code class="code">true</code> if <code class="code">text1</code>
                                 is equal to <code class="code">"Testing"</code>. The check is
                                 case-sensitive.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">"Testing".equalsIgnoreCase(text1);</code>
                                 
                              </td>
                              <td align="left">
                                 Return <code class="code">true</code> if <code class="code">text1</code> is equal to
                                 <code class="code">"Testing"</code>. The check is not case-sensitive.
                                 For example, it would also be true for <code class="code">"testing"</code>.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">StringBuffer str1 = new StringBuffer();</code>
                                 
                              </td>
                              <td align="left">
                                 Define a new
                                 <code class="code">String</code>
                                 with a variable length.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.charat(1);</code>
                                 
                              </td>
                              <td align="left">
                                 Return the character at position 1.
                                 (Note: strings are
                                 arrays of chars starting with 0)
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.substring(1);</code>
                                 
                              </td>
                              <td align="left">Removes the first characters.</td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.substring(1, 5);</code>
                                 
                              </td>
                              <td align="left">
                                 Gets the substring from the second to the fifth
                                 character.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.indexOf("Test")</code>
                                 
                              </td>
                              <td align="left">
                                 Look for the
                                 <code class="code">String</code>
                                 "Test" in String
                                 <code class="code">str</code>.
                                 Returns the index of the first
                                 occurrence of the specified
                                 string.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.lastIndexOf("ing")</code>
                                 
                              </td>
                              <td align="left">
                                 Returns the index of the last occurrence of the
                                 specified
                                 <code class="code">String</code>
                                 "ing" in the
                                 <code class="code">String</code>
                                 str.
                                 <code class="code">StringBuffer</code>
                                 does not support this method.
                                 Hence first
                                 convert the
                                 <code class="code">StringBuffer</code>
                                 to
                                 <code class="code">String</code>
                                 via method
                                 <code class="code">toString</code>.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.endsWith("ing")</code>
                                 
                              </td>
                              <td align="left">
                                 Returns <code class="code">true</code> if <code class="code">str</code>
                                 ends with <code class="code">String</code> <code class="code">"ing"</code>
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.startsWith("Test")</code>
                                 
                              </td>
                              <td align="left">
                                 Returns <code class="code">true</code> if
                                 <code class="code">String</code>
                                 <code class="code">str</code> starts with
                                 <code class="code">String</code>
                                 <code class="code">"Test"</code>.
                                 
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.trim()</code>
                                 
                              </td>
                              <td align="left">Removes leading and trailing spaces.</td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.replace(str1, str2)</code>
                                 
                              </td>
                              <td align="left">Replaces all occurrences of <code class="code">str1</code> by <code class="code">str2</code></td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str2.concat(str1);</code>
                                 
                              </td>
                              <td align="left">Concatenates <code class="code">str1</code> at the end of <code class="code">str2</code>.
                              </td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str.toLowerCase()</code>
                                 /
                                 <code class="code">str.toUpperCase()</code>
                                 
                              </td>
                              <td align="left">Converts the string to lower- or uppercase</td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">str1 + str2</code>
                                 
                              </td>
                              <td align="left">Concatenate <code class="code">str1</code> and <code class="code">str2</code></td>
                           </tr>
                           <tr>
                              <td align="left">
                                 <code class="code">String[] array = myString.split("-");</code>
                                 <code class="code">String[] array2 = myString.split("\\.");</code>
                                 
                              </td>
                              <td align="left">
                                 Splits the character separated <code class="code">myString</code> into an array of strings.
                                 <span class="emphasis"><em>
                                       Attention: the split string is a regular expression,
                                       so if you using special characters which have a meaning in
                                       regular expressions, you need to quote them. In the second
                                       example the . is used and must be quoted by two backslashes.
                                       </em></span>
                                 
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </div>
               </div>
               <p><br class="table-break">
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="lambdas"></a>20.&nbsp;Lambdas
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="lambdas_definition"></a>20.1.&nbsp;What are lambdas?
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  The Java programming language supports
                  <em class="wordasword">lambdas</em>
                  as of Java 8. A lambda expression is a block of code with parameters.
                  Lambdas allows to specify a block of code which should be executed
                  later. If a method expects a
                  <em class="wordasword">functional interface</em>
                  as parameter it is
                  possible to pass in the lambda expression instead.
                  
               </p>
               <p>The type of a lambda expression in Java is a functional
                  interface.
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="lambdas_closures"></a>20.2.&nbsp;Difference between a lambda expression and a closure
                        </h3>
                     </div>
                  </div>
               </div>
               <p>A lambda is an anonymous function, e.g., it can be defined as
                  parameter. A closure is any function which closes over the
                  environment
                  in which it was defined. This means that it can access
                  variables not
                  in its parameter list and assigned to a variable.
                  
               </p>
               <p>Java supports lambdas but not closures. </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="lambdas_purpose"></a>20.3.&nbsp;Purpose of lambda expressions
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Using lambdas allows to use a condensed syntax compared to other
                  Java
                  programming constructs. For example the
                  <code class="code">Collections</code>
                  in Java 8 have a
                  <code class="code">forEach</code>
                  method which accepts a lambda expression.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">List&lt;String&gt; list = <span class="hl-keyword">new</span> ArrayList&lt;&gt;();
list.add(<span class="hl-string" style="color:blue">"vogella.com"</span>);
list.add(<span class="hl-string" style="color:blue">"google.com"</span>);
list.add(<span class="hl-string" style="color:blue">"heise.de"</span>);
list.forEach(System.out::println); </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="lambdas_methodreferences"></a>20.4.&nbsp;Using method references
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  You can use method references in a lambda expression. Method
                  reference define the method to be called via
                  <code class="code">CalledFrom::method</code>. CalledFrom can be
                  
               </p>
               <div class="itemizedlist">
                  <ul class="itemizedlist" type="disc">
                     <li class="listitem">
                        <p>instance::instanceMethod</p>
                     </li>
                     <li class="listitem">
                        <p>SomeClass::staticMethod</p>
                     </li>
                     <li class="listitem">
                        <p>SomeClass::instanceMethod</p>
                     </li>
                  </ul>
               </div>
               <p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting">List&lt;String&gt; list = <span class="hl-keyword">new</span> ArrayList&lt;&gt;();
list.add(<span class="hl-string" style="color:blue">"vogella.com"</span>);
list.add(<span class="hl-string" style="color:blue">"google.com"</span>);
list.add(<span class="hl-string" style="color:blue">"heise.de"</span>);
list.forEach(s-&gt; System.out.println(s)); </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="streams"></a>21.&nbsp;Streams
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="lambdas_definition"></a>21.1.&nbsp;What are Streams in Java 8?
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  A stream from the
                  <code class="code">java.util.stream</code>
                  package
                  is
                  is a sequence of elements from a source that
                  supports
                  aggregate
                  operations.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="lambdas_closures"></a>21.2.&nbsp;IntStream
                        </h3>
                     </div>
                  </div>
               </div>
               <p>Allow to create a stream of sequence of primitive int-valued
                  elements supporting sequential and parallel aggregate operations.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.java.streams;

<span class="hl-keyword">import</span> java.util.ArrayList;
<span class="hl-keyword">import</span> java.util.List;
<span class="hl-keyword">import</span> java.util.stream.IntStream;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> IntStreamExample {

  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    <em class="hl-comment" style="color: #080">// printout the numbers from 1 to 100</em>
    IntStream.range(<span class="hl-number">1</span>, <span class="hl-number">101</span>).forEach(s -&gt; System.out.println(s));
    
    <em class="hl-comment" style="color: #080">// create a list of integers for 1 to 100</em>
    List&lt;Integer&gt; list = <span class="hl-keyword">new</span> ArrayList&lt;&gt;();
    IntStream.range(<span class="hl-number">1</span>, <span class="hl-number">101</span>).forEach(it -&gt; list.add(it));
    System.out.println(<span class="hl-string" style="color:blue">"Size "</span> + list.size());
  }

} </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="lambdas_reduction"></a>21.3.&nbsp;Reduction operations with streams and lambdas
                        </h3>
                     </div>
                  </div>
               </div>
               <p>Allow to create a stream of sequence of primitive int-valued
                  elements supporting sequential and parallel aggregate operations.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.java.streams;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> Task {
  <span class="hl-keyword">private</span> String summary;
  <span class="hl-keyword">private</span> <span class="hl-keyword">int</span> duration;
  
  <span class="hl-keyword">public</span> Task(String summary, <span class="hl-keyword">int</span> duration) {
    <span class="hl-keyword">this</span>.summary = summary;
    <span class="hl-keyword">this</span>.duration = duration;
  }
  <span class="hl-keyword">public</span> String getSummary() {
    <span class="hl-keyword">return</span> summary;
  }
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setSummary(String summary) {
    <span class="hl-keyword">this</span>.summary = summary;
  }
  <span class="hl-keyword">public</span> <span class="hl-keyword">int</span> getDuration() {
    <span class="hl-keyword">return</span> duration;
  }
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> setDuration(<span class="hl-keyword">int</span> duration) {
    <span class="hl-keyword">this</span>.duration = duration;
  }
  
} </pre><p>
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> com.vogella.java.streams;

<span class="hl-keyword">import</span> java.util.ArrayList;
<span class="hl-keyword">import</span> java.util.List;
<span class="hl-keyword">import</span> java.util.Random;
<span class="hl-keyword">import</span> java.util.stream.Collectors;
<span class="hl-keyword">import</span> java.util.stream.IntStream;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> StreamTester {

  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    Random random = <span class="hl-keyword">new</span> Random();
    <em class="hl-comment" style="color: #080">// Generate a list of random task</em>
    List&lt;Task&gt; values = <span class="hl-keyword">new</span> ArrayList&lt;&gt;();
    IntStream.range(<span class="hl-number">1</span>, <span class="hl-number">20</span>).forEach(i -&gt; values.add(<span class="hl-keyword">new</span> Task(<span class="hl-string" style="color:blue">"Task"</span> + random.nextInt(<span class="hl-number">10</span>), random.nextInt(<span class="hl-number">10</span>))));

    
    <em class="hl-comment" style="color: #080">// get a list of the distinct task summary field</em>
    List&lt;String&gt; resultList = values.stream().filter(t -&gt; t.getDuration() &gt; <span class="hl-number">5</span>).map(t -&gt; t.getSummary()).distinct().collect(Collectors.toList());
    System.out.println(resultList);
    
    
    <em class="hl-comment" style="color: #080">// get a concatenated string of Task with a duration longer than 5 hours</em>
    String collect = values.stream().filter(t -&gt; t.getDuration() &gt; <span class="hl-number">5</span>).map(t -&gt; t.getSummary()).distinct().collect(Collectors.joining(<span class="hl-string" style="color:blue">"-"</span>));
    System.out.println(collect);
  }

} </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="conversion"></a>22.&nbsp;Type Conversion
                     </h2>
                  </div>
               </div>
            </div>
            <p>If you use variables of different types Java requires for certain
               types an explicit conversion. The following gives examples for this conversion.
            </p>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="Conversion_tostring"></a>22.1.&nbsp;Conversion to String
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Use the following to convert from other types to Strings
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><em class="hl-comment" style="color: #080">// Convert from int to String</em>
String s1 = String.valueOf (<span class="hl-number">10</span>); <em class="hl-comment" style="color: #080">// "10" </em>
<em class="hl-comment" style="color: #080">// Convert from double to String</em>
String s2 = String.valueOf (Math.PI); <em class="hl-comment" style="color: #080">// "3.141592653589793"</em>
<em class="hl-comment" style="color: #080">// Convert from boolean to String</em>
String s3 = String.valueOf (<span class="hl-number">1</span> &lt; <span class="hl-number">2</span>); <em class="hl-comment" style="color: #080">// "true" </em>
<em class="hl-comment" style="color: #080">// Convert from date to String</em>
String s4 = String.valueOf (<span class="hl-keyword">new</span> Date()); <em class="hl-comment" style="color: #080">// "Tue Jun 03 14:40:38 CEST 2003" </em></pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="conversion_tonumber"></a>22.2.&nbsp;Conversion from String to Number
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  
               </p><pre class="programlisting"><em class="hl-comment" style="color: #080">// Conversion from String to int</em>
<span class="hl-keyword">int</span> i = Integer.parseInt(String);
<em class="hl-comment" style="color: #080">// Conversion from float to int</em>
<span class="hl-keyword">float</span> f = Float.parseFloat(String);
<em class="hl-comment" style="color: #080">// Conversion from double to int</em>
<span class="hl-keyword">double</span> d = Double.parseDouble(String); </pre><p>
                  
               </p>
               <p>
                  The conversion from string to number is independent from the
                  locale settings, e.g., it is always using the English
                  notification for
                  number. In this notification a correct
                  number format is "8.20". Thed
                  German number "8,20" would
                  result in an error.
                  
               </p>
               <p>
                  To convert from a German number, you have to use the
                  <code class="code">NumberFormat</code>
                  class. The challenge is that when the value is,
                  for example, 98.00 then
                  the <code class="code">NumberFormat</code> class would create a
                  <code class="code">Long</code> which cannot be casted to
                  Double. Hence the following
                  complex conversion class.
                  
               </p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">private</span> Double convertStringToDouble(String s) {

    Locale l = <span class="hl-keyword">new</span> Locale(<span class="hl-string" style="color:blue">"de"</span>, <span class="hl-string" style="color:blue">"DE"</span>);
    Locale.setDefault(l);
    NumberFormat nf = NumberFormat.getInstance();
    Double result = <span class="hl-number">0.0</span>;
    <span class="hl-keyword">try</span> {
      <span class="hl-keyword">if</span> (Class.forName(<span class="hl-string" style="color:blue">"java.lang.Long"</span>).isInstance(nf.parse(s))) {
        result = Double.parseDouble(String.valueOf(nf.parse(s)));
      } <span class="hl-keyword">else</span> {
        result = (Double) nf.parse(<span class="hl-keyword">new</span> String(s));
      }
    } <span class="hl-keyword">catch</span> (ClassNotFoundException e1) {
      e1.printStackTrace();
    } <span class="hl-keyword">catch</span> (ParseException e1) {
      e1.printStackTrace();
    }
    <span class="hl-keyword">return</span> result;
  } </pre><p>
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="conversion_toint"></a>22.3.&nbsp;Double to int
                        </h3>
                     </div>
                  </div>
               </div>
               <p>int i = (int) double;</p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="conversion_sqldate"></a>22.4.&nbsp;SQL Date conversions
                        </h3>
                     </div>
                  </div>
               </div>
               <p>Use the following to convert a Date to a SQL date</p>
               <p>
                  
               </p><pre class="programlisting"><span class="hl-keyword">package</span> test;

<span class="hl-keyword">import</span> java.text.DateFormat;
<span class="hl-keyword">import</span> java.text.ParseException;
<span class="hl-keyword">import</span> java.text.SimpleDateFormat;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ConvertDateToSQLDate {

<span class="hl-keyword">private</span> <span class="hl-keyword">void</span> convertDateToSQL(){
   SimpleDateFormat template = 
      <span class="hl-keyword">new</span> SimpleDateFormat(<span class="hl-string" style="color:blue">"yyyy-MM-dd"</span>); 
      java.util.Date enddate = 
      <span class="hl-keyword">new</span> java.util.Date(<span class="hl-string" style="color:blue">"10/31/99"</span>); 
      java.sql.Date sqlDate = 
      java.sql.Date.valueOf(template.format(enddate)); 
   
}
  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    ConvertDateToSQLDate date = <span class="hl-keyword">new</span> ConvertDateToSQLDate();
    date.convertDateToSQL();
  }   

} </pre><p>
                  
               </p>
            </div>
         </div>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="scheduletasks"></a>23.&nbsp;Schedule tasks
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               Java allows you to schedule tasks. A scheduled tasks can perform
               once
               or several times.
               
            </p>
            <p>
               <code class="code">java.util.Timer</code> and <code class="code">java.util.TimerTask</code>
               can be used to schedule
               tasks. The object which implements <code class="code">TimeTask</code>
               will then be performed by
               the <code class="code">Timer</code> based on the given interval. 
               
            </p>
            <p>
               
            </p><pre class="programlisting"><span class="hl-keyword">package</span> schedule;

<span class="hl-keyword">import</span> java.util.TimerTask;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> MyTask <span class="hl-keyword">extends</span> TimerTask {
  <span class="hl-keyword">private</span> <span class="hl-keyword">final</span> String string;
  <span class="hl-keyword">private</span> <span class="hl-keyword">int</span> count = <span class="hl-number">0</span>;

  <span class="hl-keyword">public</span> MyTask(String string) {
    <span class="hl-keyword">this</span>.string = string;
  }

  <em><span class="hl-annotation" style="color: gray">@Override</span></em>
  <span class="hl-keyword">public</span> <span class="hl-keyword">void</span> run() {
    count++;
    System.out.println(string + <span class="hl-string" style="color:blue">" called "</span> + count);
  }

} </pre><p>
               
            </p>
            <p>
               
            </p><pre class="programlisting"><span class="hl-keyword">package</span> schedule;

<span class="hl-keyword">import</span> java.util.Timer;

<span class="hl-keyword">public</span> <span class="hl-keyword">class</span> ScheduleTest {

  <span class="hl-keyword">public</span> <span class="hl-keyword">static</span> <span class="hl-keyword">void</span> main(String[] args) {
    Timer timer = <span class="hl-keyword">new</span> Timer();

    <em class="hl-comment" style="color: #080">// wait 2 seconds (2000 milli-secs) and then start</em>
    timer.schedule(<span class="hl-keyword">new</span> MyTask(<span class="hl-string" style="color:blue">"Task1"</span>), <span class="hl-number">2000</span>);

    <span class="hl-keyword">for</span> (<span class="hl-keyword">int</span> i = <span class="hl-number">0</span>; i &lt; <span class="hl-number">100</span>; i++) {
      <em class="hl-comment" style="color: #080">// wait 1 seconds and then again every 5 seconds</em>
      timer.schedule(<span class="hl-keyword">new</span> MyTask(<span class="hl-string" style="color:blue">"Task "</span> + i), <span class="hl-number">1000</span>, <span class="hl-number">5000</span>);
    }
  }
} </pre><p>
               
            </p>
            <p>
               
            </p>
            <div class="tip" style="margin-left: 0.5in; margin-right: 0.5in;">
               <h3 class="title">Tip</h3>
               Improved job scheduling is available via the open source framework
               <em class="wordasword">quartz</em>. See
               <a class="ulink" href="http://www.onjava.com/lpt/a/4637" target="_top">
                  http://www.onjava.com/lpt/a/4637</a>
               or
               <a class="ulink" href="http://www.quartz-scheduler.org/" target="_top">
                  http://www.quartz-scheduler.org/</a>
               for an explanation.
               
            </div>
            <p>
               
            </p>
         </div> 
         <script async="async" src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
         
         <!-- Article - Before Support 336 x 280 -->
         <ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-3851443674951530" data-ad-slot="3645921933"></ins>
         <script>(adsbygoogle=window.adsbygoogle||[]).push({});</script>
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="supportandlicense"></a>24.&nbsp;About this website
                     </h2>
                  </div>
               </div>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="thankyou"></a>24.1.&nbsp;Donate to support free tutorials
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  
                  	
               </p>
               <p>
                  		Please consider a contribution
                  	<a href="http://www.vogella.com/support.html">
                     			<img src="http://www.vogella.com/img/common/40x50xvogella-donate.png.pagespeed.ic.gMuY8kQC6X.png" width="40" height="50" alt="Support free tutorials" title="Support free tutorials" onclick="_gaq.push(['_trackEvent', 'Donations', 'clicked', 'Buttom tutorial in thank you']);"></a>
                  			if this article helped you. It will help to maintain our content and our Open Source activities.
                  	
               </p>
               <p>
                  
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="questions"></a>24.2.&nbsp;Questions and discussion
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  Writing and updating these tutorials is a lot of work.
                  If this
                  free community service was helpful,
                  you can support the cause by
                  giving
                  a tip
                  as well as reporting typos and factual errors.
                  
               </p>
               <p>
                  If you find errors in this tutorial, please notify me
                  (see the
                  <a class="ulink" href="#top" target="_top">top of the page</a>).
                  Please note that due to the high volume of feedback I
                  receive, I
                  cannot answer questions to your implementation. Ensure you
                  have read
                  the
                  <a class="ulink" href="http://www.vogella.com/faq.html" target="_top">vogella FAQ</a>
                  as
                  I don't respond to questions already answered there.
                  
               </p>
            </div>
            <div class="section">
               <div class="titlepage">
                  <div>
                     <div>
                        <h3 class="title"><a name="thankyou"></a>24.3.&nbsp;License for this tutorial and its code
                        </h3>
                     </div>
                  </div>
               </div>
               <p>
                  This tutorial is Open Content under the
                  <a class="ulink" href="http://creativecommons.org/licenses/by-nc-sa/3.0/de/deed.en" target="_top">
                     CC BY-NC-SA 3.0 DE
                     </a>
                  license. Source code in this tutorial is distributed under the
                  <a class="ulink" href="https://www.eclipse.org/legal/epl-v10.html" target="_top">Eclipse Public License</a>.
                  See the
                  <a class="ulink" href="http://www.vogella.com/license.html" target="_top">vogella License</a>
                  page
                  for details on the terms of reuse.
                  
               </p>
            </div>
         </div>
         
         
         <div class="section">
            <div class="titlepage">
               <div>
                  <div>
                     <h2 class="title"><a name="resources"></a>25.&nbsp;Links and Literature
                     </h2>
                  </div>
               </div>
            </div>
            <p>
               <a class="ulink" href="https://google-styleguide.googlecode.com/svn/trunk/javaguide.html" target="_top">
                  Code Conventions for the Java Programming Language by Google</a>
               
            </p>
         </div><img src="http://vg04.met.vgwort.de/na/a0f24376959746e0ba768e24c829c0ca" width="1" height="1" alt=""></div>
      
      
      
   <script pagespeed_no_defer="">//<![CDATA[
(function(){window.pagespeed=window.pagespeed||{};var f=window.pagespeed,h=function(e,a,c,b){this.c=e;this.a=a;this.b=c;this.d=b};f.beaconUrl="";
var k=function(e){var a=e.c,c=window.mod_pagespeed_start,b=Number(new Date)-c,a=a+(-1==a.indexOf("?")?"?":"&"),a=a+"ets="+("load"==e.a?"load:":"unload:"),a=a+b;if("beforeunload"!=e.a||!window.mod_pagespeed_loaded){a+="&r"+e.a+"=";if(window.performance){var b=window.performance.timing,d=b.navigationStart,g=b.requestStart,a=a+(b[e.a+"EventStart"]-d),a=a+("&nav="+(b.fetchStart-d)),a=a+("&dns="+(b.domainLookupEnd-b.domainLookupStart)),a=a+("&connect="+(b.connectEnd-b.connectStart)),a=a+("&req_start="+
(g-d)),a=a+("&ttfb="+(b.responseStart-g)),a=a+("&dwld="+(b.responseEnd-b.responseStart)),a=a+("&dom_c="+(b.domContentLoadedEventStart-d));window.performance.navigation&&(a+="&nt="+window.performance.navigation.type);d=-1;b.msFirstPaint?d=b.msFirstPaint:window.chrome&&window.chrome.loadTimes&&(d=Math.floor(1E3*window.chrome.loadTimes().firstPaintTime));d=d-g;0<=d&&(a+="&fp="+d)}else a+=b;f.getResourceTimingData&&window.parent==window&&(a+=f.getResourceTimingData());a+=window.parent!=window?"&ifr=1":
"&ifr=0";"load"==e.a&&(window.mod_pagespeed_loaded=!0,(b=window.mod_pagespeed_num_resources_prefetched)&&(a+="&nrp="+b),(b=window.mod_pagespeed_prefetch_start)&&(a+="&htmlAt="+(c-b)));f.panelLoader&&(c=f.panelLoader.getCsiTimingsString(),""!=c&&(a+="&b_csi="+c));f.criticalCss&&(c=f.criticalCss,a+="&ccis="+c.total_critical_inlined_size+"&cces="+c.total_original_external_size+"&ccos="+c.total_overhead_size+"&ccrl="+c.num_replaced_links+"&ccul="+c.num_unreplaced_links);""!=e.b&&(a+=e.b);document.referrer&&
(a+="&ref="+encodeURIComponent(document.referrer));a+="&url="+encodeURIComponent(e.d);f.beaconUrl=a;(new Image).src=a}};f.e=function(e,a,c,b){var d=new h(e,a,c,b);window.addEventListener?window.addEventListener(a,function(){k(d)},!1):window.attachEvent("on"+a,function(){k(d)})};f.addInstrumentationInit=f.e;})();

pagespeed.addInstrumentationInit('/mod_pagespeed_beacon', 'load', '', 'http://www.vogella.com/tutorials/JavaIntroduction/article.html');
//]]></script></body>
</html>

