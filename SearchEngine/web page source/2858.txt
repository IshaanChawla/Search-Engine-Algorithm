<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>CodingUnit Programming Tutorials</title>
	<atom:link href="http://www.codingunit.com/feed" rel="self" type="application/rss+xml" />
	<link>http://www.codingunit.com</link>
	<description>CodingUnit is your online resource for learning to program. Tutorials on C, C++, PHP, Python, MySQL, Java, JQuery, Opengl, DirectX and much more!</description>
	<lastBuildDate>Wed, 12 Nov 2014 15:32:19 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=4.2.2</generator>
	<item>
		<title>C Tutorial &#8211; Queues</title>
		<link>http://www.codingunit.com/c-tutorial-queues</link>
		<comments>http://www.codingunit.com/c-tutorial-queues#comments</comments>
		<pubDate>Mon, 23 Jun 2014 17:58:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[C Tutorials]]></category>
		<category><![CDATA[C Programming Language Tutorial]]></category>
		<category><![CDATA[C Source]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1376</guid>
		<description><![CDATA[In this C programming language tutorial we take a quick look at what a queue is and how to implement a queue using C. What is a Queue? Almost everybody knows printer queues. A print queue is a list where from where print jobs (an item) are used and then deleted from one end (front). [&#8230;]<p><a href="http://www.codingunit.com/c-tutorial-queues">C Tutorial &#8211; Queues</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/c-tutorial-queues/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>C Tutorial – Error Handling (Exception Handling)</title>
		<link>http://www.codingunit.com/c-tutorial-error-handling-exception-handling</link>
		<comments>http://www.codingunit.com/c-tutorial-error-handling-exception-handling#comments</comments>
		<pubDate>Sun, 16 Jun 2013 10:10:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[C Tutorials]]></category>
		<category><![CDATA[C Programming Language Tutorial]]></category>
		<category><![CDATA[C Source]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1336</guid>
		<description><![CDATA[In this C language tutorial we are going to look at error handling. Although C programming does not provide direct support for error handling (also called exception handling), there are ways to do error handling. Of course the programmer needs to prevent errors during coding and should always test the return values of functions called [&#8230;]<p><a href="http://www.codingunit.com/c-tutorial-error-handling-exception-handling">C Tutorial – Error Handling (Exception Handling)</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/c-tutorial-error-handling-exception-handling/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>C Tutorial – Splitting a Text File into Multiple Files</title>
		<link>http://www.codingunit.com/c-tutorial-splitting-a-text-file-into-multiple-files</link>
		<comments>http://www.codingunit.com/c-tutorial-splitting-a-text-file-into-multiple-files#comments</comments>
		<pubDate>Wed, 02 Jan 2013 11:26:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[C Tutorials]]></category>
		<category><![CDATA[C Programming Language Tutorial]]></category>
		<category><![CDATA[C Source]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1323</guid>
		<description><![CDATA[A new year (have a good new year by the way) a new C language tutorial. We start the year with a C language tutorial where we will look at how to split a text file into multiple files. In previous tutorials we already looked at reading and writing text files in C examples and [&#8230;]<p><a href="http://www.codingunit.com/c-tutorial-splitting-a-text-file-into-multiple-files">C Tutorial – Splitting a Text File into Multiple Files</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/c-tutorial-splitting-a-text-file-into-multiple-files/feed</wfw:commentRss>
		<slash:comments>4</slash:comments>
		</item>
		<item>
		<title>C Tutorial – Deleting a Record from a Binary File</title>
		<link>http://www.codingunit.com/c-tutorial-deleting-a-record-from-a-binary-file</link>
		<comments>http://www.codingunit.com/c-tutorial-deleting-a-record-from-a-binary-file#comments</comments>
		<pubDate>Thu, 22 Nov 2012 22:00:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[C Tutorials]]></category>
		<category><![CDATA[C Programming Language Tutorial]]></category>
		<category><![CDATA[C Source]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1302</guid>
		<description><![CDATA[In this C language tutorial we will build upon a previous C tutorial (Binary File I/O) where we took a quick look add binary file IO. In this tutorial we will take a look at how to delete a certain record (found by name) from a binary file and how to read/write a record(s) from [&#8230;]<p><a href="http://www.codingunit.com/c-tutorial-deleting-a-record-from-a-binary-file">C Tutorial – Deleting a Record from a Binary File</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/c-tutorial-deleting-a-record-from-a-binary-file/feed</wfw:commentRss>
		<slash:comments>1</slash:comments>
		</item>
		<item>
		<title>C Tutorial – Call by Value or Call by Reference</title>
		<link>http://www.codingunit.com/c-tutorial-call-by-value-or-call-by-reference</link>
		<comments>http://www.codingunit.com/c-tutorial-call-by-value-or-call-by-reference#comments</comments>
		<pubDate>Tue, 12 Jun 2012 16:00:44 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[C Tutorials]]></category>
		<category><![CDATA[C Programming Language Tutorial]]></category>
		<category><![CDATA[C Source]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1284</guid>
		<description><![CDATA[In this C language tutorial we will take a look at call by value and call by reference (also known as pass-by-value and pass-by-reference). These methods are different ways of passing (or calling) data to functions. Call by Value If data is passed by value, the data is copied from the variable used in for [&#8230;]<p><a href="http://www.codingunit.com/c-tutorial-call-by-value-or-call-by-reference">C Tutorial – Call by Value or Call by Reference</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/c-tutorial-call-by-value-or-call-by-reference/feed</wfw:commentRss>
		<slash:comments>101</slash:comments>
		</item>
		<item>
		<title>Checking for Palindrome Strings or Numbers in C Language</title>
		<link>http://www.codingunit.com/checking-for-palindrome-strings-or-numbers-in-c-language</link>
		<comments>http://www.codingunit.com/checking-for-palindrome-strings-or-numbers-in-c-language#comments</comments>
		<pubDate>Wed, 18 Apr 2012 14:00:22 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[Programming Algorithms]]></category>
		<category><![CDATA[C Source]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1261</guid>
		<description><![CDATA[In this programming algorithm tutorial we will look at how to find out if a string or number is a palindrome or not. A palindrome is a word, phrase, number or other sequence of units that has the property of reading the same in either direction. A few examples of palindrome strings are: “madam”, “dad” [&#8230;]<p><a href="http://www.codingunit.com/checking-for-palindrome-strings-or-numbers-in-c-language">Checking for Palindrome Strings or Numbers in C Language</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/checking-for-palindrome-strings-or-numbers-in-c-language/feed</wfw:commentRss>
		<slash:comments>5</slash:comments>
		</item>
		<item>
		<title>Linear Search Algorithm in C Language</title>
		<link>http://www.codingunit.com/linear-search-algorithm-in-c-language</link>
		<comments>http://www.codingunit.com/linear-search-algorithm-in-c-language#comments</comments>
		<pubDate>Tue, 17 Apr 2012 19:44:48 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[Programming Algorithms]]></category>
		<category><![CDATA[C Programming Language Tutorial]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1255</guid>
		<description><![CDATA[In this programming algorithm tutorial we will at how we can do a linear search in C language. A linear search algorithm using numbers is very easy to implement. Take a look at the following source code: #include &#60;stdio.h&#62; int main() { int a[100]; int counter, num, numsearch; int boolnum = 0; printf("Enter the number [&#8230;]<p><a href="http://www.codingunit.com/linear-search-algorithm-in-c-language">Linear Search Algorithm in C Language</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/linear-search-algorithm-in-c-language/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>Determining the Area of Different Shaped Triangles in C</title>
		<link>http://www.codingunit.com/determining-the-area-of-different-shaped-triangles-in-c</link>
		<comments>http://www.codingunit.com/determining-the-area-of-different-shaped-triangles-in-c#comments</comments>
		<pubDate>Tue, 17 Apr 2012 19:26:07 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[Programming Algorithms]]></category>
		<category><![CDATA[C Programming Language Tutorial]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1250</guid>
		<description><![CDATA[In this C programming algorithm tutorial we are looking at how to implement the mathematical formulas to determine area of different shaped triangles. We will look at the triangle, right angled triangle and equilateral triangle. We will give you the formula, the C source code and the results. Area of a Right Angled Triangle The [&#8230;]<p><a href="http://www.codingunit.com/determining-the-area-of-different-shaped-triangles-in-c">Determining the Area of Different Shaped Triangles in C</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/determining-the-area-of-different-shaped-triangles-in-c/feed</wfw:commentRss>
		<slash:comments>0</slash:comments>
		</item>
		<item>
		<title>Area of a Rectangle Circle and Trapezium in C</title>
		<link>http://www.codingunit.com/area-of-a-rectangle-circle-and-trapezium-in-c</link>
		<comments>http://www.codingunit.com/area-of-a-rectangle-circle-and-trapezium-in-c#comments</comments>
		<pubDate>Tue, 17 Apr 2012 19:03:28 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[Programming Algorithms]]></category>
		<category><![CDATA[C Programming Language Tutorial]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1242</guid>
		<description><![CDATA[In this C programming algorithm tutorial we are looking at how to implement the mathematical formulas to determine area of a rectangle, circle and trapezium. We will give you the formula, the C source code and the results. Area of a Rectangle The mathematical formula to determine the area of a rectangle is: area = [&#8230;]<p><a href="http://www.codingunit.com/area-of-a-rectangle-circle-and-trapezium-in-c">Area of a Rectangle Circle and Trapezium in C</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/area-of-a-rectangle-circle-and-trapezium-in-c/feed</wfw:commentRss>
		<slash:comments>2</slash:comments>
		</item>
		<item>
		<title>How to Print Floyds Triangle in C</title>
		<link>http://www.codingunit.com/how-to-print-floyds-triangle-in-c</link>
		<comments>http://www.codingunit.com/how-to-print-floyds-triangle-in-c#comments</comments>
		<pubDate>Sun, 08 Apr 2012 19:03:30 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[Programming Algorithms]]></category>
		<category><![CDATA[C Programming Language Tutorial]]></category>
		<category><![CDATA[C Source]]></category>
		<category><![CDATA[C tutorial]]></category>

		<guid isPermaLink="false">http://www.codingunit.com/?p=1238</guid>
		<description><![CDATA[In this tutorial we will take a quick look at the Floyd&#8217;s triangle using the C language. The Floyd&#8217;s triangle (named after Robert Floyd) algorithm is a right-angled triangular array of natural numbers. It is defined by filling the rows of the triangle with consecutive numbers, starting with the number one in the top left [&#8230;]<p><a href="http://www.codingunit.com/how-to-print-floyds-triangle-in-c">How to Print Floyds Triangle in C</a> is a post from: <a href="http://www.codingunit.com">CodingUnit Programming Tutorials</a></p>
]]></description>
		<wfw:commentRss>http://www.codingunit.com/how-to-print-floyds-triangle-in-c/feed</wfw:commentRss>
		<slash:comments>10</slash:comments>
		</item>
	</channel>
</rss>

